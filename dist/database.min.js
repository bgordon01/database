(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.Database = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function Database(e,t){if(t=t||{},this.dbname=e,this.syncURL=t.syncURL||"http://kwantu10.kwantu.net:8000/kwantu_apps",this.username=t.username||"",this.password=t.password||"",this.mock=t.mock||!1,this.adapter="pouchdb",this.url="http://localhost:59840",this.db={},this.authenticated=!1,this._settings={_id:"_local/settings",lastSynSeq:0,session:{},subscriptions:{}},this.createDB=function(){window.cblite?(this.adapter="couchbase",window.cblite.getURL(function(e,t){if(e)throw"Couchbase Lite Initilization error - "+JSON.stringify(e);this.url=t;try{var n=new XMLHttpRequest;n.open("GET",this.url,!1),n.send(null)}catch(e){throw"Android version 4.1 error - "+JSON.stringify(e)}var a={url:this.url+"/"+this.dbname,type:"PUT",data:"",dataType:"JSON",contentType:"application/json"},r=$.ajax(a);r.done(function(e,t,n){console.log(n.responseText)}).fail(function(e,t,n){console.log(e.responseText)})})):(this.adapter="pouchdb",console.warn("Couchbase Lite plugin not found. Creating the PouchDB database."),this.mock===!0?this.db=new PouchDB(this.dbname,{adapter:"memory"}):this.db=new PouchDB(this.dbname))},void 0===e)throw"DBERROR: A database name is required i.e. var db = new Database('default');";this.createDB()}Database.prototype.deleteDB=function(){var e=this;return new Promise(function(t,n){if("couchbase"===e.adapter){var a={url:e.url+"/"+e.dbname,type:"DELETE"};$.ajax(a).done(function(e,n,a){t(e)}).fail(function(e,t,a){console.log("Native - error deleting database. Error stacktrace: "+JSON.stringify(e)),n(e.responseText)})}else e.db.destroy().then(function(e){t(e)}).catch(function(e){console.log("Browser - error deleting database. Error stacktrace: "+e),n(e)})})},Database.prototype.save=function(e){var t=this;return new Promise(function(n,a){if("couchbase"===t.adapter){var r={url:t.url+"/"+t.dbname+"/"+e._id+"?rev="+e._rev,type:"PUT",data:JSON.stringify(e),contentType:"application/json",dataType:"json"};$.ajax(r).done(function(e,t,a){n(e)}).fail(function(t,n,r){console.log("Native - error saving document with id: "+e._id+". Error stacktrace: "+JSON.stringify(t)),a(t.responseText)})}else t.db.put(e).then(function(e){n(e)}).catch(function(t){console.log("Browser - error saving document with id: "+e._id+". Error stacktrace: "+t),a(t)})})},Database.prototype.get=function(e){var t=this;return new Promise(function(n,a){if("couchbase"===t.adapter){var r={url:t.url+"/"+t.dbname+"/"+e,type:"GET",dataType:"json"};$.ajax(r).done(function(e,t,a){n(e)}).fail(function(t,n,r){console.log("Native - error getting document with id: "+e+". Error stacktrace: "+JSON.stringify(t)),a(t.responseText)})}else t.db.get(e).then(function(e){n(e)}).catch(function(t){console.log("Browser - error getting document with id: "+e+". Error stacktrace: "+t),a(t)})})},Database.prototype.remove=function(e,t){var n=this;return new Promise(function(a,r){if("couchbase"===n.adapter){var o={url:n.url+"/"+n.dbname+"/"+e+"?rev="+t,type:"DELETE",Accept:"application/json",dataType:"json"};$.ajax(o).done(function(e,t,n){a(e)}).fail(function(t,n,a){console.log("Native - error deleting document with id: "+e+". Error stacktrace: "+JSON.stringify(t)),r(t.responseText)})}else n.db.remove(e,t).then(function(e){a(e)}).catch(function(t){console.log("Browser - error deleting document with id: "+e+". Error stacktrace: "+t),r(t)})})},Database.prototype.saveAttachment=function(e,t,n,a,r){var o=this;return new Promise(function(i,s){if("couchbase"===o.adapter){var c={url:o.url+"/"+o.dbname+"/"+e+"/"+r+"?rev="+t,type:"PUT",data:n,dataType:"json",contentType:a};$.ajax(c).done(function(e,t,n){i(e)}).fail(function(t,n,a){console.log("Native - error saving attachment for the document with id: "+e+". Error stacktrace: "+JSON.stringify(t)),s(t.responseText)})}else o.db.putAttachment(e,r,t,n,a).then(function(e){i(e)}).catch(function(t){console.log("Browser - error saving attachment for the document with id: "+e+". Error stacktrace: "+t),s(t)})})},Database.prototype.getAttachment=function(e,t,n){var a=this;return new Promise(function(r,o){if("couchbase"===a.adapter){var i={url:a.url+"/"+a.dbname+"/"+e+"/"+n+"?rev="+t,type:"GET"};$.ajax(i).done(function(e,t,n){r(e)}).fail(function(t,n,a){console.warn("Native - error retrieving attachment for the document with id: "+e+". Error stacktrace: "+JSON.stringify(t)),o(t.responseText)})}else a.db.getAttachment(e,n,{rev:t}).then(function(e){r(e)}).catch(function(t){console.warn("Browser - error retrieving attachment for the document with id: "+e+". Error stacktrace: "+t),o(t)})})},Database.prototype.deleteAttachment=function(e,t,n){var a=this;return new Promise(function(r,o){if("couchbase"===a.adapter){var i={url:a.url+"/"+a.dbname+"/"+e+"/"+n+"?rev="+t,type:"DELETE",dataType:"json"};$.ajax(i).done(function(e,t,n){r(e)}).fail(function(t,n,a){console.warn("Native - error deleting attachment for the document with id: "+e+". Error stacktrace: "+JSON.stringify(t)),o(t.responseText)})}else a.db.removeAttachment(e,n,t).then(function(e){r(e)}).catch(function(t){console.warn("ERRCODE: "+t.status+" ( "+t.name+" ) - Error deleting attachment for the document with id: "+e+". "+t.message+"."),o(t)})})},Database.prototype.createDocView=function(e,t,n){var a=this;return new Promise(function(r,o){if("couchbase"===a.adapter){var i={language:"javascript",views:{}},s="function(doc) { "+n.toString()+" }";i.views[t]={map:s};var c={url:a.url+"/"+a.dbname+"/_design/"+e,type:"PUT",data:i,dataType:"json",contentType:"application/json"};$.ajax(c).done(function(e,t,n){r(e)}).fail(function(t,n,a){console.warn("Native - error creating the design document with the id: "+e+". Error stacktrace: "+JSON.stringify(t)),o(t.responseText)})}else{var i={_id:"_design/"+e,views:{}},s="function(doc) { "+n.toString()+" }";i.views[t]={map:s},a.save(i).then(function(e){r(e)},function(t){409!==t.status?(console.warn("Browser - error creating the design document with the id: "+e+". Error stacktrace: "+t),o(t)):(console.warn(t),r({}))})}})},Database.prototype.getDocView=function(e){var t=this;return new Promise(function(n,a){if("couchbase"===t.adapter){var r={url:t.url+"/"+t.dbname+"/_design/"+e,type:"GET"};$.ajax(r).done(function(e,t,a){n(e)}).fail(function(t,n,r){console.warn("Native - error getting the design document with the id: "+e+". Error stacktrace: "+JSON.stringify(t)),a(t.responseText)})}else t.get("_design/"+e).then(function(e){n(e)},function(t){console.warn("Browser - error getting the design document with the id: "+e+". Error stacktrace: "+t),a(t)})})},Database.prototype.deleteDocView=function(e,t){var n=this;return new Promise(function(a,r){if("couchbase"===n.adapter){var o={url:n.url+"/"+n.dbname+"/_design/"+e+"?rev="+t,type:"DELETE"};$.ajax(o).done(function(e,t,n){a(e)}).fail(function(t,n,a){console.warn("Native - error deleting the design document with the id: "+e+". Error stacktrace: "+JSON.stringify(t)),r(t.responseText)})}else n.remove("_design/"+e,t).then(function(e){a(e)},function(t){console.warn("Browser - error deleting the design document with the id: "+e+". Error stacktrace: "+t),r(t)})})},Database.prototype.query=function(e,t,n){var a=this;return new Promise(function(r,o){if("couchbase"===a.adapter){var i="include_docs=true&key="+n.key,s={url:a.url+"/"+a.dbname+"/_design/"+e+"/_view/"+t+"?"+i,type:"GET",dataType:"json"};$.ajax(s).done(function(e,t,n){r(e)}).fail(function(t,n,a){console.warn("Native - error querying the design document with the id: "+e+". Error stacktrace: "+JSON.stringify(t)),o(t.responseText)})}else{var c=n.pageSize||100,u=n.pageIndex||0,s={key:n.key,limit:c,skip:u*c,include_docs:!0};a.db.query(e+"/"+t,s).then(function(e){r(e)}).catch(function(e){console.warn("ERRCODE: "+e.status+" ( "+e.name+" ) - querying the design document with the id: "+id+". "+e.message+"."),o(e)})}})},Database.prototype.authenticateToSyncGateway=function(){var e=this;return new Promise(function(t,n){var a=e.syncURL+"/_session",r="POST",o=JSON.stringify({name:e.username,password:e.password}),i=!0,s=new XMLHttpRequest;s.withCredentials=!0,s.onload=function(){var a=s.status,r=s.responseText;200==a?(e.authenticated=!0,t(r)):n(r)},s.open(r,a,i),s.setRequestHeader("Content-Type","application/json; charset=UTF-8"),s.send(o)})},Database.prototype.changes=function(e){var t=this;return new Promise(function(n,a){if("couchbase"===t.adapter){var r="limit=100&since="+t._settings.lastSyncSeq,o={url:t.url+"/"+t.dbname+"/_changes?"+r,type:"GET",dataType:"json"};$.ajax(o).done(function(e,t,a){n(e)}).fail(function(e,t,n){console.warn("Native - error retrieving the latest changes. Error stacktrace: "+JSON.stringify(e)),a(e.responseText)})}else{var r={limit:100,since:t._settings.lastSyncSeq},o=e||r;t.db.changes(o).then(function(e){n(e)}).catch(function(e){console.warn("ERRCODE: "+e.status+" ( "+e.name+" ) - retrieving the latest changes: "+id+". "+e.message+"."),a(e)})}})},Database.prototype.startPull=function(){var e=this;return new Promise(function(t,n){"couchbase"===e.adapter?cordova.exec(function(e){t(e)},function(e){n(e)},"CBLite","pull",[{dbname:e.dbname,url:e.syncURL}]):e.db.replicate.from(new PouchDB(e.syncURL)).then(function(e){t(e)}).catch(function(e){console.warn("ERRCODE: "+e.status+" ( "+e.name+" ) - retrieving the latest changes: "+id+". "+e.message+"."),n(e)})})},Database.prototype.startSync=function(){var e=this,t=e._settings.subscriptions.username,n=e._settings.subscriptions.password;return new Promise(function(a,r){"couchbase"===e.adapter?cordova.exec(function(t){e._settings.lastSyncSeq===t&&(e._settings.lastSyncSeq=t,e.save(e._settings).then(function(e){a(e)},function(e){r(e)}))},function(e){r(e)},"CBLite","sync",[{dbname:e.dbname,url:"http://"+t+":"+n+"@"+e.syncURL.replace("http://","")}]):e.authenticated===!1?e.authenticateToSyncGateway(t,n).then(function(t){e.db.sync(new PouchDB(e.syncURL),{live:!0,retry:!0}).on("change",function(t){var n=t.last_seq;e._settings.lastSyncSeq!==n&&(e._settings.lastSyncSeq=n,e.save(e._settings).then(function(e){a(e)},function(e){r(e)}))}).on("error",function(e){r(e)})},function(e){r(e)}):e.db.sync(new PouchDB(e.syncURL),{live:!0,retry:!0}).on("change",function(t){var n=t.last_seq;e._settings.lastSyncSeq!==n&&(e._settings.lastSyncSeq=n,e.save(e._settings).then(function(e){a(e)},function(e){r(e)}))}).on("error",function(e){r(e)})})},module.exports=Database;

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
