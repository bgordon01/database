{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///database.min.js","webpack:///webpack/bootstrap 6c150c6bd88ba8e5d3f2","webpack:///./src/main.ts","webpack:///./~/pouchdb/lib/index-browser.js","webpack:///./~/process/browser.js","webpack:///./~/js-extend/extend.js","webpack:///./~/debug/browser.js","webpack:///./~/debug/debug.js","webpack:///./~/ms/index.js","webpack:///./~/inherits/inherits_browser.js","webpack:///./~/lie/lib/browser.js","webpack:///./~/immediate/lib/browser.js","webpack:///./~/events/events.js","webpack:///./~/argsarray/index.js","webpack:///./~/scope-eval/scope_eval.js","webpack:///./~/spark-md5/spark-md5.js","webpack:///./~/vuvuzela/index.js","webpack:///./~/es6-promise-pool/es6-promise-pool.js"],"names":["root","factory","exports","module","define","amd","a","i","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","PouchDB","Database","dbname","arguments","undefined","adapter","options","_dbname","_adapter","_hostname","hostname","_port","port","_username","username","_password","password","value","_db","err","Error","__awaiter","regeneratorRuntime","mark","_callee","wrap","_context","prev","next","destroy","t0","stop","docId","_callee2","_context2","get","content","attId","query","remoteURL","process","global","_interopDefault","ex","mangle","unmangle","substring","_Map","store","_Set","array","Array","isArray","len","add","isBinaryObject","object","ArrayBuffer","Blob","cloneArrayBuffer","buff","slice","byteLength","targetArray","Uint8Array","sourceArray","set","cloneBinaryObject","size","type","webkitSlice","isPlainObject","proto","getPrototypeOf","Ctor","constructor","funcToString","objectCtorString","clone","newObject","Date","toISOString","hasOwnProperty","once","fun","called","getArguments","args","apply","toPromise","func","usedCB","self","tempCB","pop","resp","nextTick","promise","PouchPromise","fulfill","reject","callback","mesg","push","then","e","result","adapterFun","name","logApiCall","log","enabled","logArgs","origCallback","res","responseArgs","concat","_closed","_destroyed","taskqueue","isReady","addTask","failed","pick","obj","arr","prop","identityFunction","x","formatResultForOpenRevsGet","ok","bulkGet","db","opts","collapseResultsAndFinish","results","perDocResults","forEach","docs","info","checkDone","numDone","numDocs","gotResult","docIndex","nextBatch","allRequests","upTo","Math","min","MAX_NUM_CONCURRENT_REQUESTS","batch","processBatch","offset","j","docIdx","docRequests","requestsById","docOpts","open_revs","map","request","rev","filter","formatResult","param","error","requests","keys","isChromeApp","chrome","storage","local","hasLocalStorage","hasLocal","attachBrowserEvents","onChanged","addListener","db_name","emit","dbName","newValue","addEventListener","window","attachEvent","Changes$1","events","EventEmitter","_listeners","guardedConsole","method","console","randomNumber","max","maxTimeout","parseInt","ratio","random","range","defaultBackOff","explainError","status","str","PouchError","reason","message","createError","CustomPouchError","generateErrorFromResponse","data","UNKNOWN_ERROR","tryFilter","doc","req","msg","toString","BAD_REQUEST","filterChange","hasFilter","query_params","change","filterReturn","include_docs","attachments","att","_attachments","stub","flatten","arrs","invalidIdError","INVALID_ID","test","RESERVED_ID","MISSING_ID","listenerCount","ee","parseDesignDocFunctionName","s","parts","split","normalizeDesignDocFunctionName","normalized","join","parseUri","parser","exec","uri","encoded","indexOf","decodeURIComponent","qName","replace","qParser","$0","$1","$2","upsert","diffFun","docRev","_rev","newDoc","_id","tryAndPut","updated","put","getValue","radix","uuid","chars","out","winningRev","metadata","winningId","winningPos","winningDeleted","node","toVisit","rev_tree","tree","ids","branches","pos","deleted","traverseRevTree","revs","newCtx","ctx","sortByPos","b","collectLeaves","leaves","isLeaf","acc","sort","reverse","collectConflicts","win","conflicts","leaf","compactTree","revHash","rootToLeaf","paths","history","sortByPos$1","binarySearch","item","comparator","mid","low","high","insertSorted","idx","splice","pathToTree","path","numStemmed","currentLeaf","compareTree","mergeTree","in_tree1","in_tree2","queue","tree1","tree2","merged","doMerge","dontExpand","restree","branch","t1","t2","diff","candidateParents","trees","parent","parentIdx","elements","elementsLen","el","stem","depth","maybeStem","stemmed","stemmedNode","merge","newTree","stemmedRevs","revExists","splitRev","targetPos","targetId","getTrees","isDeleted","isLocalId","evalFilter","input","scopedEval","evalView","code","tryCatchInChangeListener","Changes","onDestroy","cancel","complete","removeAllListeners","removeListener","on","onChange","isCancelled","bind","doChanges","processChange","changeList","style","changes","_conflicts","compare","left","right","arrayFirst","yankError","cleanDocs","_deleted","atts","compareByIdThenRev","idCompare","aStart","_revisions","start","bStart","computeHeight","height","edges","prnt","from","to","edge","allDocsKeysQuery","api","skip","limit","descending","_allDocs","finalResults","all","subOpts","jsExtend","extend","optKey","resolve","total_rows","rows","doNextCompaction","task","_compactionQueue","last_seq","_compact","shift","attachmentNameError","charAt","AbstractPouchDB","TaskQueue","parseAdapter","match","adapterName","skipIdb","adapters","localStorage","prefix","preferredAdapters","usePrefix","use_prefix","prepareForDestruction","onDestroyed","onConstructorDestroyed","destructionListeners","_destructionListeners","has","__opts","auto_compaction","prefixedName","backend","debug","valid","fail","ready","setUpEventEmitter","Pouch","eventEmitter","destructListeners","toObject","reduce","parseRevisionInfo","INVALID_REV","makeRevTreeFromRevisions","revisions","revisionIds","parseDoc","newEdits","nRevNum","newRevId","revInfo","toLowerCase","_rev_tree","specialKey","reservedWords","DOC_VALIDATION","dataWords","createBlob","properties","Builder","BlobBuilder","MSBlobBuilder","MozBlobBuilder","WebKitBlobBuilder","builder","append","getBlob","binaryStringToArrayBuffer","bin","buf","charCodeAt","binStringToBluffer","binString","b64ToBluffer","b64","atob$1","arrayBufferToBinaryString","buffer","binary","bytes","String","fromCharCode","readAsBinaryString","blob","FileReader","FileReaderSync","readAsArrayBuffer","reader","hasBinaryString","onloadend","blobToBinaryString","blobOrBuffer","blobToBase64","base64","btoa$1","rawToBase64","raw","sliceBlob","end","appendBlob","arrayBuffer","appendString","string","appendBinary","binaryMd5","setImmediateShim","loadNextChunk","done","currentChunk","chunkSize","chunks","inputIsString","MD5_CHUNK_SIZE","ceil","Md5","stringMd5","hash","parseBase64","BAD_ARG","preprocessString","blobType","asBinary","content_type","digest","preprocessBlob","md5","preprocessAttachment","preprocessAttachments","docInfos","docv","overallErr","docInfo","processedAttachment","recv","updateDoc","revLimit","cb","writeDoc","previousWinningRev","previouslyDeleted","isRoot","inConflict","REV_CONFLICT","newRev","rev_map","newRevIsDeleted","winningRev$$","winningRevIsDeleted","delta","rootIsMissing","processDocs","fetchedDocs","tx","overallCallback","insertDoc","resultsIdx","MISSING_DOC","checkAllDocsDone","docsDone","docsToDo","new_edits","idsToDocs","currentDoc","docWritten","nextDoc","slowJsonParse","JSON","parse","vuvuzela","safeJsonParse","safeJsonStringify","json","stringify","tryCode","that","applyNext","taskQueue","running","action","idbError","evt","IDB_ERROR","encodeMetadata","deletedOrLocal","seq","decodeMetadata","storedObject","decodeDoc","_doc_id_rev","lastIndexOf","readBlobData","body","asBlob","fetchAttachmentsIfNecessary","txn","fetchAttachment","attObj","objectStore","ATTACH_STORE","onsuccess","postProcessAttachments","row","attNames","compactRevs","count","deleteOrphanedAttachments","possiblyOrphanedDigests","countReq","attAndSeqStore","index","IDBKeyRange","bound","attStore","seqStore","BY_SEQ_STORE","ATTACH_AND_SEQ_STORE","getKey","cursor","openCursor","only","event","digestSeq","primaryKey","openTransactionSafely","idb","stores","mode","transaction","idbBulkDocs","dbOpts","idbChanges","startTransaction","DOC_STORE","LOCAL_STORE","txnResult","onabort","ontimeout","oncomplete","docStore","bySeqStore","attachStore","attachAndSeqStore","verifyAttachments","preconditionErrored","fetchExistingDocs","idbProcessDocs","revs_limit","numFetched","readMetadata","notify","_meta","docCount","docCountDelta","verifyAttachment","MISSING_STUB","finish","digests","filename","attErr","isUpdate","hasAttachments","writeAttachments","finishDoc","afterPutDoc","revsToDelete","metadataToStore","metaDataReq","afterPutMetadata","afterPutDocError","preventDefault","stopPropagation","getKeyReq","putReq","insertAttachmentMappings","onerror","collectResults","attachmentSaved","revpos","saveAttachment","attsAdded","attsToAdd","newAtt","docInfoError","blobSupport","createKeyRange","inclusiveEnd","upperBound","lowerBound","handleKeyRangeError","idbAllDocs","allDocsQuery","fetchDocAsynchronously","docIdRevIndex","allDocsInner","onGetCursor","onResultsReady","onTxnComplete","startkey","endkey","inclusive_end","keyRange","allDocs","checkBlobSupport","DETECT_BLOB_SUPPORT_STORE","matchedChrome","navigator","userAgent","matchedEdge","IdbPouch","thisCallback","init","createSchema","createObjectStore","keyPath","autoIncrement","createIndex","unique","META_STORE","addDeletedOrLocalIndex","createLocalStoreSchema","migrateLocalStore","localStore","docIdRev","seqCursor","addAttachAndSeqStore","migrateAttsAndSeqs","digestMap","migrateMetadata","decodeMetadataCompat","fetchMetadataSeq","metadataSeq","onGetMetadataSeq","instanceId","_bulkDocs","reqOpts","_get","_getAttachment","attachId","attachment","blobData","_info","cachedDBs","updateSeq","doc_count","update_seq","idb_attachment_format","_changes","onGetMetadata","lastSeq","onGetWinningDoc","fetchWinningDoc","winningDoc","filtered","numResults","returnDocs","docIds","docIdsToMetadata","fetchChanges","objectStores","since","continuous","doc_ids","return_docs","_close","NOT_OPEN","close","_getRevisionTree","_doCompaction","_getLocal","_putLocal","oldRev","ret","oStore","oldDoc","_removeLocal","_destroy","openReq","openReqList","indexedDB","deleteDatabase","cached","tryStorageOption","open","ADAPTER_VERSION","onupgradeneeded","migration","migrations","oldVersion","currentTarget","onversionchange","checkSetupComplete","meta","blobSupportPromise","val","version","IDBPouch","decodeUtf8","escape","hexToInt","charCode","parseHexUtf8","parseHexUtf16","parseHexString","encoding","quote","escapeBlob","unescapeBlob","stringifyDoc","unstringifyDoc","qMarks","num","select","selector","table","joiner","where","orderBy","compactRevs$1","deleteOrphans","seqs","sql","ATTACH_AND_SEQ_STORE$1","executeSql","digestsToCheck","nonOrphanedDigests","ATTACH_STORE$1","BY_SEQ_STORE$1","websqlError","errorNameMatch","errorName","errorReason","WSQ_ERROR","getSize","isAndroid","websqlBulkDocs","websqlChanges","_name","_docCount","cnt","sqlArgs","deletedInt","insertId","dataWritten","fetchSql","attachmentErr","revsToCompact","DOC_STORE$1","metadataStr","params","websqlProcessDocs","userDocs","docInfoErrors","openDatabaseWithOpts","websql","description","openDBSafely","openDB$1","cachedResult","cachedDatabases","fetchAttachmentsIfNecessary$1","attOpts","_","WebSqlPouch$1","dbCreated","runMigration2","DOC_STORE_WINNINGSEQ_INDEX_SQL","BY_SEQ_STORE_DELETED_INDEX_SQL","runMigration3","LOCAL_STORE$1","doNext","runMigration4","updateRows","doc_id_rev","hex","doc_id","BY_SEQ_STORE_DOC_ID_REV_INDEX_SQL","runMigration5","nextPage","SELECT_DOCS","DOC_STORE_AND_BY_SEQ_JOINER","pageSize","addDigestSeq","digestSeqs","digestSeqPairs","pair","attachAndRev","ATTACH_AND_SEQ_STORE_ATTACH_INDEX_SQL","ATTACH_AND_SEQ_STORE_SEQ_INDEX_SQL","runMigration6","runMigration7","checkEncoding","onGetInstanceId","idRequests","idCallback","onGetVersion","dbVersion","META_STORE$1","attach","initSeq","initSeqArgs","ADAPTER_VERSION$1","setupDone","migrated","dbid","tasks","nextMigration","setup","fetchVersion","db_version","countDocs","websqlOpts","POUCH_VERSION","openDBResult","readTransaction","websql_encoding","totalRows","criteria","l","selectStmt","view","reportChange","maxSeq","escaped","putLocal","values","rowsAffected","removeLocal","canOpenTestDB","openDatabase","isValidWebSQL","hasLS","localStorageKey","openedTestDB","openDB","WebSQLPouch","_opts","WebSqlPouch","wrappedFetch","wrappedPromise","fetch","response","fetchRequest","timer","headers","Headers","fetchOptions","credentials","processData","url","timeout","setTimeout","fetchResponse","statusCode","clearTimeout","text","abort","xhRequest","xhr","timedout","abortReq","cleanUp","timeoutReq","onprogress","upload","onreadystatechange","XMLHttpRequest","exception","withCredentials","Accept","responseType","setRequestHeader","readyState","getResponseHeader","responseText","send","testXhr","ajax$1","hasXhr","defaultBody","ajaxCore","onSuccess","v","missing","res$2","defaultOptions","cache","ajax","ua","isSafari","isIE","isEdge","shouldCacheBust","isBlobUrl","hasArgs","now","readAttachmentsAsBlobOrBuffer","encodeDocId","encodeURIComponent","preprocessAttachments$1","hasUrlPrefix","protocol","getHost","substr","user","auth","genDBUrl","genUrl","pathDel","host","paramsToStr","k","HttpPouch","ajax$$","userOpts","reqAjax","ajaxOpts","log$1","_ajax","ajaxPromise","adapterFun$$","skipSetup","skip_setup","setupPromise","checkExists","dbUrl","encodeAttachmentId","attachmentId","nAuth","token","unescape","Authorization","compact","ping","compact_running","interval","doBulkGet","doBulkGetShim","onResult","batchNum","numBatches","batchSize","MAX_SIMULTANEOUS_REVS","supportsBulkGet","supportsBulkGetMap","floor","fetchAttachments","filenames","PromisePool","fetchAllAttachments","docOrDocs","revs_info","remove","docOrId","optsOrRev","getAttachment","removeAttachment","putAttachment","Content-Type","_put","start_key","end_key","paramStr","batch_size","CHANGES_BATCH_SIZE","leftToFetch","feed","heartbeat","param_name","lastFetchedSeq","aborted","xhrOpts","fetched","raw_results_length","finished","revsDiff","HttpPouch$1","pad","padWith","upToLength","padding","targetLength","padLeft","collate","normalizeKey","ai","collationIndex","bi","stringCollate","arrayCollate","objectCollate","Infinity","isNaN","origKey","toJSON","indexify","numToIndexableString","toIndexableString","objKey","zero","SEP","parseNumber","originalIdx","neg","numAsString","magAsString","MAGNITUDE_DIGITS","magnitude","MIN_MAGNITUDE","ch","parseFloat","stack","metaStack","lastMetaElement","element","lastElementIndex","parseIndexableString","parsedNum","parsedStr","arrayElement","objElement","ak","bk","expFormat","toExponential","magForComparison","magString","factor","abs","factorStr","toFixed","TaskQueue$1","createView","cachedViews","sourceDB","viewName","mapFun","reduceFun","temporary","viewSignature","_cachedViews","promiseForView","diffFunction","views","fullViewName","depDbs","depDbName","registerDependentDatabase","lastSeqDoc","QueryParseError","captureStackTrace","NotFoundError","BuiltInError","createBuiltInError","sum","jLen","jNum","evalFunctionWithEval","log$2","parseViewName","isGenOne","emitError","tryCode$1","output","sortByKeyThenValue","y","keyCompare","sliceResults","rowToDocId","readAttachmentsAsBlobOrBuffer$1","postprocessAttachments","addHttpParam","paramName","asJson","coerceInteger","integerCandidate","asNumber","Number","coerceOptions","group_level","checkPositiveInteger","number","checkQueryParseError","startkeyName","endkeyName","group","optionName","httpQuery","MAX_URL_LENGTH","keysAsString","customQuery","_query","customViewCleanup","_viewCleanup","defaultsTo","getDocsToPersist","docIdsToChangesAndEmits","getMetaDoc","defaultMetaDoc","metaDocId","getKeyValueDocs","metaDoc","processKvDocs","kvDocsRes","kvDocs","oldKeysMap","indexableKeysToKeyValues","keyValue","newKeys","kvDoc","uniq","docData","saveKeyValues","seqDocId","listOfDocsToPersist","docsToPersist","bulkDocs","getQueue","persistentQueues","updateView","sequentialize","updateViewInQueue","mapResults","origMap","currentSeq","processNextBatch","onError","CHANGES_BATCH_SIZE$1","lastKey","jl","complexKey","indexableKey","reduceView","shouldGroup","builtInReduce","groups","lvl","POSITIVE_INFINITY","last","groupKey","reduceTry","queryView","queryViewInQueue","fetchFromView","viewOpts","expectedKeys","parsedKeyAndDocId","onMapResultsReady","shouldReduce","allDocsRes","docIdsToDocs","fetchPromises","keyStart","keyEnd","httpViewCleanup","localViewCleanup","docsToViews","designDocName","viewsToStatus","ddocName","viewDBNames","statusIsGood","viewDBName","dbsToDelete","destroyPromises","queryPromised","createViewOpts","tempViewQueue","cleanup","fin","stale","isGenOne$1","fileHasChanged","localDoc","remoteDoc","getDocAttachments","getDocAttachmentsFromTargetOrSource","src","doCheckForLocalAttachments","createBulkGetOpts","diffs","missingRevs","missingRev","getDocs","state","getAllDocs","bulkGetOpts","bulkGetResponse","cancelled","bulkGetInfo","resultDocs","Boolean","fetchRevisionOneDocs","getRevisionOneDocs","returnResult","updateCheckpoint","checkpoint","session","returnValue","session_id","replicator","REPLICATOR","CHECKPOINT_VERSION","unshift","CHECKPOINT_HISTORY_SIZE","Checkpointer","compareReplicationLogs","srcDoc","tgtDoc","compareReplicationHistory","sourceHistory","targetHistory","S","sourceRest","T","targetRest","LOWEST_SEQ","sourceId","hasSessionId","sessionId","rest","isForbiddenError","backOff","retry","back_off_function","backOffSet","current_back_off","STARTING_BACK_OFF","removeBackOffSetter","sortObjectPropertiesByKey","queryParams","generateReplicationId","filterFun","filterViewName","queryData","md5sum","replicate$1","initCheckpointer","checkpointer","repId","writeDocs","changedDocs","currentBatch","bulkOpts","completeReplication","errorsById","create","errorsNo","doc_write_failures","docs_written","errors","finishBatch","outResult","writingCheckpoint","writeCheckpoint","getChanges","onCheckpointError","getDiffs","getBatchDocs","got","docs_read","startNextBatch","batches","processPendingBatch","abortReplication","immediate","pendingBatch","changesOpts","live","changesCompleted","replicationCompleted","fatalError","end_time","onChangesComplete","changesPending","onChangesError","abortChanges","batches_limit","_abortChanges","startChanges","getCheckpoint","start_time","_addedListeners","Replication","toPouch","PouchConstructor","replicate","replicateRet","srcPouch","targetPouch","sync","Sync","pullChange","direction","pushChange","pushDenied","pullDenied","pushPaused","pullPaused","pushActive","pullActive","removeAll","isChange","isDenied","isPaused","isActive","removed","canceled","optsPush","optsPull","pull","success","replication","other","inherits","lie","Promise","mangled","Function","setItem","getItem","eventFunction","inprogress","notifyLocalWindows","MISSING_BULK_DOCS","QUERY_PARSE_ERROR","NOT_AN_OBJECT","filterChanges","newPromise","ddoc","filterName","filters","post","createAttachment","prevrevpos","was_delete","addToMissing","revId","processDoc","missingForId","missingObj","compactDocument","maxHeight","revTree","candidates","promises","onComplete","finishOpenRevs","indexOfRev","howMany","_revs_info","incompatibleOpt","_type","attachmentError","dependentDb","dependentDbs","depDB","destroyDb","deletedMap","trueName","RegExp","execute","addToPreferredAdapters","plugin","defaults","defaultOpts","PouchAlt","atob","btoa","setImmediate","platform","promiseFactory","promisedCallback","callbackify","finalPromiseFactory","_sum","_count","_stats","sumsqr","_sumsqr","viewCleanup","mapreduce","updateTarget","updateSource","readOnlySource","comparisons","targetDoc","sourceDoc","1","_readyCalled","defaultSetTimout","defaultClearTimeout","runTimeout","cachedSetTimeout","runClearTimeout","marker","cachedClearTimeout","cleanUpNextTick","draining","currentQueue","queueIndex","drainQueue","run","Item","noop","title","browser","env","argv","versions","off","binding","cwd","chdir","dir","umask","each","sources","source","useColors","document","documentElement","firebug","formatArgs","namespace","humanize","color","lastC","save","namespaces","removeItem","load","r","localstorage","colors","formatters","enable","selectColor","prevColor","disabled","curr","ms","prevTime","coerce","format","formatter","logFn","fn","skips","names","disable","n","d","h","short","round","long","plural","ctor","superCtor","super_","TempCtor","INTERNAL","resolver","PENDING","outcome","safelyResolveThenable","QueueItem","onFulfilled","onRejected","callFulfilled","otherCallFulfilled","callRejected","otherCallRejected","unwrap","handlers","getThen","thenable","tryToUnwrap","tryCatch","iterable","allResolver","resolveFromAll","outValue","resolved","race","REJECTED","FULFILLED","oldQueue","scheduleDrain","Mutation","MutationObserver","WebKitMutationObserver","observer","createTextNode","observe","characterData","MessageChannel","createElement","scriptEl","parentNode","removeChild","appendChild","channel","port1","onmessage","port2","postMessage","_events","_maxListeners","isFunction","arg","isNumber","isObject","isUndefined","defaultMaxListeners","setMaxListeners","er","handler","listeners","context","listener","newListener","warned","trace","g","fired","list","position","evlistener","emitter","argsArray","hasProp","scope","cmn","q","t","add32","ff","gg","hh","ii","md5cycle","md5blk","md5blks","md5blk_array","md51","tail","tmp","lo","hi","md51_array","subarray","rhex","hex_chr","toUtf8","utf8Str2ArrayBuffer","returnUInt8Array","arrayBuffer2Utf8Str","concatenateArrayBuffers","first","second","hexToBinaryString","SparkMD5","reset","lsw","msw","clamp","begin","contents","_buff","_length","_hash","_finish","getState","setState","hashBinary","arrayPrefix","objPrefix","numChar","parsedString","lastCh","numConsecutiveSlashes","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","EventTarget","removeEventListener","dispatchEvent","isGenerator","functionToIterator","promiseToIterator","toIterator","PromisePoolEvent","concurrency","_concurrency","_options","_iterator","_done","_size","_promise","_callbacks","active","_proceed","_fireEvent","_settle","_onPooledPromiseFulfilled","_onPooledPromiseRejected","_trackPromise"],"mappings":"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","file":"database.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t///<reference path=\"../node_modules/@types/pouchdb-core/index.d.ts\"/> \n\t'use strict';\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar PouchDB = __webpack_require__(1);\n\t\n\tvar Database = function () {\n\t    /**\n\t     * Represents the generic data access layer.\n\t     *\n\t     * @class\n\t     * @param {string} dbname - Database name\n\t     * @param {Adapters} adapter - Database adapter type\n\t     * @param {Object} [options]\n\t     *\t@param {string} options.username\n\t     *\tLogged in user's username\n\t     *\t@param {string} options.password\n\t     *\tLogged in user's password\n\t     *\n\t     * @author Brent Gordon\n\t     * @version 1.0.0\n\t     *\n\t     * @example\n\t     * var pouch = new Database('dbname','pouchdb');\n\t     * var couch = new Database('dbname','couchdb', { username: 'user001', password: 'pwd001' });\n\t     *\n\t     * @return {class} new Database class object\n\t     *\n\t     */\n\t    function Database() {\n\t        var dbname = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'default';\n\t        var adapter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'pouchdb';\n\t        var options = arguments[2];\n\t\n\t        _classCallCheck(this, Database);\n\t\n\t        // Set the database name\n\t        this._dbname = dbname;\n\t        // Set the adapter type\n\t        this._adapter = adapter;\n\t        // Set the database username\n\t        this._hostname = options.hostname || 'localhost';\n\t        // Set the database username\n\t        this._port = options.port || 5984;\n\t        // Set the database username\n\t        this._username = options.username || 'admin';\n\t        // Set the database username\n\t        this._password = options.password || 'password';\n\t    }\n\t    /** */\n\t\n\t\n\t    _createClass(Database, [{\n\t        key: 'create',\n\t        value: function create() {\n\t            try {\n\t                // Database adapter 'pouchdb'\n\t                if (this._adapter === 'pouchdb') this._db = new PouchDB(this._dbname);\n\t            } catch (err) {\n\t                throw new Error(err);\n\t            }\n\t        }\n\t        /** */\n\t\n\t    }, {\n\t        key: 'delete',\n\t        value: function _delete() {\n\t            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {\n\t                return regeneratorRuntime.wrap(function _callee$(_context) {\n\t                    while (1) {\n\t                        switch (_context.prev = _context.next) {\n\t                            case 0:\n\t                                _context.prev = 0;\n\t\n\t                                if (!(this._adapter === 'pouchdb')) {\n\t                                    _context.next = 4;\n\t                                    break;\n\t                                }\n\t\n\t                                _context.next = 4;\n\t                                return this._db.destroy();\n\t\n\t                            case 4:\n\t                                _context.next = 9;\n\t                                break;\n\t\n\t                            case 6:\n\t                                _context.prev = 6;\n\t                                _context.t0 = _context['catch'](0);\n\t                                throw new Error(_context.t0);\n\t\n\t                            case 9:\n\t                            case 'end':\n\t                                return _context.stop();\n\t                        }\n\t                    }\n\t                }, _callee, this, [[0, 6]]);\n\t            }));\n\t        }\n\t        /** */\n\t\n\t    }, {\n\t        key: 'fetchDoc',\n\t        value: function fetchDoc(docId, options) {\n\t            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee2() {\n\t                return regeneratorRuntime.wrap(function _callee2$(_context2) {\n\t                    while (1) {\n\t                        switch (_context2.prev = _context2.next) {\n\t                            case 0:\n\t                                _context2.prev = 0;\n\t\n\t                                if (!(this._adapter === 'pouchdb')) {\n\t                                    _context2.next = 9;\n\t                                    break;\n\t                                }\n\t\n\t                                if (!options) {\n\t                                    _context2.next = 7;\n\t                                    break;\n\t                                }\n\t\n\t                                _context2.next = 5;\n\t                                return this._db.get(docId, options);\n\t\n\t                            case 5:\n\t                                _context2.next = 9;\n\t                                break;\n\t\n\t                            case 7:\n\t                                _context2.next = 9;\n\t                                return this._db.get(docId);\n\t\n\t                            case 9:\n\t                                _context2.next = 14;\n\t                                break;\n\t\n\t                            case 11:\n\t                                _context2.prev = 11;\n\t                                _context2.t0 = _context2['catch'](0);\n\t                                throw new Error(_context2.t0);\n\t\n\t                            case 14:\n\t                            case 'end':\n\t                                return _context2.stop();\n\t                        }\n\t                    }\n\t                }, _callee2, this, [[0, 11]]);\n\t            }));\n\t        }\n\t    }, {\n\t        key: 'saveDoc',\n\t        value: function saveDoc(docId, content) {}\n\t    }, {\n\t        key: 'removeDoc',\n\t        value: function removeDoc(docId) {}\n\t    }, {\n\t        key: 'fetchAttachment',\n\t        value: function fetchAttachment(attId) {}\n\t    }, {\n\t        key: 'saveAttachment',\n\t        value: function saveAttachment(attId, content) {}\n\t    }, {\n\t        key: 'removeAttachment',\n\t        value: function removeAttachment(attId) {}\n\t    }, {\n\t        key: 'search',\n\t        value: function search(query) {}\n\t    }, {\n\t        key: 'push',\n\t        value: function push(remoteURL) {}\n\t    }, {\n\t        key: 'pull',\n\t        value: function pull(remoteURL) {}\n\t    }, {\n\t        key: 'sync',\n\t        value: function sync(remoteURL) {}\n\t    }]);\n\t\n\t    return Database;\n\t}();\n\t\n\texports.Database = Database;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(process, global) {'use strict';\n\t\n\tfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\t\n\tvar jsExtend = __webpack_require__(3);\n\tvar debug = _interopDefault(__webpack_require__(4));\n\tvar inherits = _interopDefault(__webpack_require__(7));\n\tvar lie = _interopDefault(__webpack_require__(8));\n\tvar events = __webpack_require__(10);\n\tvar getArguments = _interopDefault(__webpack_require__(11));\n\tvar scopedEval = _interopDefault(__webpack_require__(12));\n\tvar Md5 = _interopDefault(__webpack_require__(13));\n\tvar vuvuzela = _interopDefault(__webpack_require__(14));\n\tvar PromisePool = _interopDefault(__webpack_require__(15));\n\t\n\t/* istanbul ignore next */\n\tvar PouchPromise = typeof Promise === 'function' ? Promise : lie;\n\t\n\t// based on https://github.com/montagejs/collections\n\tfunction mangle(key) {\n\t  return '$' + key;\n\t}\n\tfunction unmangle(key) {\n\t  return key.substring(1);\n\t}\n\tfunction _Map() {\n\t  this.store = {};\n\t}\n\t_Map.prototype.get = function (key) {\n\t  var mangled = mangle(key);\n\t  return this.store[mangled];\n\t};\n\t_Map.prototype.set = function (key, value) {\n\t  var mangled = mangle(key);\n\t  this.store[mangled] = value;\n\t  return true;\n\t};\n\t_Map.prototype.has = function (key) {\n\t  var mangled = mangle(key);\n\t  return mangled in this.store;\n\t};\n\t_Map.prototype.delete = function (key) {\n\t  var mangled = mangle(key);\n\t  var res = mangled in this.store;\n\t  delete this.store[mangled];\n\t  return res;\n\t};\n\t_Map.prototype.forEach = function (cb) {\n\t  var keys = Object.keys(this.store);\n\t  for (var i = 0, len = keys.length; i < len; i++) {\n\t    var key = keys[i];\n\t    var value = this.store[key];\n\t    key = unmangle(key);\n\t    cb(value, key);\n\t  }\n\t};\n\t\n\tfunction _Set(array) {\n\t  this.store = new _Map();\n\t\n\t  // init with an array\n\t  if (array && Array.isArray(array)) {\n\t    for (var i = 0, len = array.length; i < len; i++) {\n\t      this.add(array[i]);\n\t    }\n\t  }\n\t}\n\t_Set.prototype.add = function (key) {\n\t  return this.store.set(key, true);\n\t};\n\t_Set.prototype.has = function (key) {\n\t  return this.store.has(key);\n\t};\n\t\n\tfunction isBinaryObject(object) {\n\t  return (typeof ArrayBuffer !== 'undefined' && object instanceof ArrayBuffer) ||\n\t    (typeof Blob !== 'undefined' && object instanceof Blob);\n\t}\n\t\n\tfunction cloneArrayBuffer(buff) {\n\t  if (typeof buff.slice === 'function') {\n\t    return buff.slice(0);\n\t  }\n\t  // IE10-11 slice() polyfill\n\t  var target = new ArrayBuffer(buff.byteLength);\n\t  var targetArray = new Uint8Array(target);\n\t  var sourceArray = new Uint8Array(buff);\n\t  targetArray.set(sourceArray);\n\t  return target;\n\t}\n\t\n\tfunction cloneBinaryObject(object) {\n\t  if (object instanceof ArrayBuffer) {\n\t    return cloneArrayBuffer(object);\n\t  }\n\t  var size = object.size;\n\t  var type = object.type;\n\t  // Blob\n\t  if (typeof object.slice === 'function') {\n\t    return object.slice(0, size, type);\n\t  }\n\t  // PhantomJS slice() replacement\n\t  return object.webkitSlice(0, size, type);\n\t}\n\t\n\t// most of this is borrowed from lodash.isPlainObject:\n\t// https://github.com/fis-components/lodash.isplainobject/\n\t// blob/29c358140a74f252aeb08c9eb28bef86f2217d4a/index.js\n\t\n\tvar funcToString = Function.prototype.toString;\n\tvar objectCtorString = funcToString.call(Object);\n\t\n\tfunction isPlainObject(value) {\n\t  var proto = Object.getPrototypeOf(value);\n\t  /* istanbul ignore if */\n\t  if (proto === null) { // not sure when this happens, but I guess it can\n\t    return true;\n\t  }\n\t  var Ctor = proto.constructor;\n\t  return (typeof Ctor == 'function' &&\n\t    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);\n\t}\n\t\n\tfunction clone(object) {\n\t  var newObject;\n\t  var i;\n\t  var len;\n\t\n\t  if (!object || typeof object !== 'object') {\n\t    return object;\n\t  }\n\t\n\t  if (Array.isArray(object)) {\n\t    newObject = [];\n\t    for (i = 0, len = object.length; i < len; i++) {\n\t      newObject[i] = clone(object[i]);\n\t    }\n\t    return newObject;\n\t  }\n\t\n\t  // special case: to avoid inconsistencies between IndexedDB\n\t  // and other backends, we automatically stringify Dates\n\t  if (object instanceof Date) {\n\t    return object.toISOString();\n\t  }\n\t\n\t  if (isBinaryObject(object)) {\n\t    return cloneBinaryObject(object);\n\t  }\n\t\n\t  if (!isPlainObject(object)) {\n\t    return object; // don't clone objects like Workers\n\t  }\n\t\n\t  newObject = {};\n\t  for (i in object) {\n\t    /* istanbul ignore else */\n\t    if (Object.prototype.hasOwnProperty.call(object, i)) {\n\t      var value = clone(object[i]);\n\t      if (typeof value !== 'undefined') {\n\t        newObject[i] = value;\n\t      }\n\t    }\n\t  }\n\t  return newObject;\n\t}\n\t\n\tfunction once(fun) {\n\t  var called = false;\n\t  return getArguments(function (args) {\n\t    /* istanbul ignore if */\n\t    if (called) {\n\t      // this is a smoke test and should never actually happen\n\t      throw new Error('once called more than once');\n\t    } else {\n\t      called = true;\n\t      fun.apply(this, args);\n\t    }\n\t  });\n\t}\n\t\n\tfunction toPromise(func) {\n\t  //create the function we will be returning\n\t  return getArguments(function (args) {\n\t    // Clone arguments\n\t    args = clone(args);\n\t    var self = this;\n\t    var tempCB =\n\t      (typeof args[args.length - 1] === 'function') ? args.pop() : false;\n\t    // if the last argument is a function, assume its a callback\n\t    var usedCB;\n\t    if (tempCB) {\n\t      // if it was a callback, create a new callback which calls it,\n\t      // but do so async so we don't trap any errors\n\t      usedCB = function (err, resp) {\n\t        process.nextTick(function () {\n\t          tempCB(err, resp);\n\t        });\n\t      };\n\t    }\n\t    var promise = new PouchPromise(function (fulfill, reject) {\n\t      var resp;\n\t      try {\n\t        var callback = once(function (err, mesg) {\n\t          if (err) {\n\t            reject(err);\n\t          } else {\n\t            fulfill(mesg);\n\t          }\n\t        });\n\t        // create a callback for this invocation\n\t        // apply the function in the orig context\n\t        args.push(callback);\n\t        resp = func.apply(self, args);\n\t        if (resp && typeof resp.then === 'function') {\n\t          fulfill(resp);\n\t        }\n\t      } catch (e) {\n\t        reject(e);\n\t      }\n\t    });\n\t    // if there is a callback, call it back\n\t    if (usedCB) {\n\t      promise.then(function (result) {\n\t        usedCB(null, result);\n\t      }, usedCB);\n\t    }\n\t    return promise;\n\t  });\n\t}\n\t\n\tvar log = debug('pouchdb:api');\n\t\n\tfunction adapterFun(name, callback) {\n\t  function logApiCall(self, name, args) {\n\t    /* istanbul ignore if */\n\t    if (log.enabled) {\n\t      var logArgs = [self.name, name];\n\t      for (var i = 0; i < args.length - 1; i++) {\n\t        logArgs.push(args[i]);\n\t      }\n\t      log.apply(null, logArgs);\n\t\n\t      // override the callback itself to log the response\n\t      var origCallback = args[args.length - 1];\n\t      args[args.length - 1] = function (err, res) {\n\t        var responseArgs = [self.name, name];\n\t        responseArgs = responseArgs.concat(\n\t          err ? ['error', err] : ['success', res]\n\t        );\n\t        log.apply(null, responseArgs);\n\t        origCallback(err, res);\n\t      };\n\t    }\n\t  }\n\t\n\t  return toPromise(getArguments(function (args) {\n\t    if (this._closed) {\n\t      return PouchPromise.reject(new Error('database is closed'));\n\t    }\n\t    if (this._destroyed) {\n\t      return PouchPromise.reject(new Error('database is destroyed'));\n\t    }\n\t    var self = this;\n\t    logApiCall(self, name, args);\n\t    if (!this.taskqueue.isReady) {\n\t      return new PouchPromise(function (fulfill, reject) {\n\t        self.taskqueue.addTask(function (failed) {\n\t          if (failed) {\n\t            reject(failed);\n\t          } else {\n\t            fulfill(self[name].apply(self, args));\n\t          }\n\t        });\n\t      });\n\t    }\n\t    return callback.apply(this, args);\n\t  }));\n\t}\n\t\n\t// like underscore/lodash _.pick()\n\tfunction pick(obj, arr) {\n\t  var res = {};\n\t  for (var i = 0, len = arr.length; i < len; i++) {\n\t    var prop = arr[i];\n\t    if (prop in obj) {\n\t      res[prop] = obj[prop];\n\t    }\n\t  }\n\t  return res;\n\t}\n\t\n\t// Most browsers throttle concurrent requests at 6, so it's silly\n\t// to shim _bulk_get by trying to launch potentially hundreds of requests\n\t// and then letting the majority time out. We can handle this ourselves.\n\tvar MAX_NUM_CONCURRENT_REQUESTS = 6;\n\t\n\tfunction identityFunction(x) {\n\t  return x;\n\t}\n\t\n\tfunction formatResultForOpenRevsGet(result) {\n\t  return [{\n\t    ok: result\n\t  }];\n\t}\n\t\n\t// shim for P/CouchDB adapters that don't directly implement _bulk_get\n\tfunction bulkGet(db, opts, callback) {\n\t  var requests = opts.docs;\n\t\n\t  // consolidate into one request per doc if possible\n\t  var requestsById = {};\n\t  requests.forEach(function (request) {\n\t    if (request.id in requestsById) {\n\t      requestsById[request.id].push(request);\n\t    } else {\n\t      requestsById[request.id] = [request];\n\t    }\n\t  });\n\t\n\t  var numDocs = Object.keys(requestsById).length;\n\t  var numDone = 0;\n\t  var perDocResults = new Array(numDocs);\n\t\n\t  function collapseResultsAndFinish() {\n\t    var results = [];\n\t    perDocResults.forEach(function (res) {\n\t      res.docs.forEach(function (info) {\n\t        results.push({\n\t          id: res.id,\n\t          docs: [info]\n\t        });\n\t      });\n\t    });\n\t    callback(null, {results: results});\n\t  }\n\t\n\t  function checkDone() {\n\t    if (++numDone === numDocs) {\n\t      collapseResultsAndFinish();\n\t    }\n\t  }\n\t\n\t  function gotResult(docIndex, id, docs) {\n\t    perDocResults[docIndex] = {id: id, docs: docs};\n\t    checkDone();\n\t  }\n\t\n\t  var allRequests = Object.keys(requestsById);\n\t\n\t  var i = 0;\n\t\n\t  function nextBatch() {\n\t\n\t    if (i >= allRequests.length) {\n\t      return;\n\t    }\n\t\n\t    var upTo = Math.min(i + MAX_NUM_CONCURRENT_REQUESTS, allRequests.length);\n\t    var batch = allRequests.slice(i, upTo);\n\t    processBatch(batch, i);\n\t    i += batch.length;\n\t  }\n\t\n\t  function processBatch(batch, offset) {\n\t    batch.forEach(function (docId, j) {\n\t      var docIdx = offset + j;\n\t      var docRequests = requestsById[docId];\n\t\n\t      // just use the first request as the \"template\"\n\t      // TODO: The _bulk_get API allows for more subtle use cases than this,\n\t      // but for now it is unlikely that there will be a mix of different\n\t      // \"atts_since\" or \"attachments\" in the same request, since it's just\n\t      // replicate.js that is using this for the moment.\n\t      // Also, atts_since is aspirational, since we don't support it yet.\n\t      var docOpts = pick(docRequests[0], ['atts_since', 'attachments']);\n\t      docOpts.open_revs = docRequests.map(function (request) {\n\t        // rev is optional, open_revs disallowed\n\t        return request.rev;\n\t      });\n\t\n\t      // remove falsey / undefined revisions\n\t      docOpts.open_revs = docOpts.open_revs.filter(identityFunction);\n\t\n\t      var formatResult = identityFunction;\n\t\n\t      if (docOpts.open_revs.length === 0) {\n\t        delete docOpts.open_revs;\n\t\n\t        // when fetching only the \"winning\" leaf,\n\t        // transform the result so it looks like an open_revs\n\t        // request\n\t        formatResult = formatResultForOpenRevsGet;\n\t      }\n\t\n\t      // globally-supplied options\n\t      ['revs', 'attachments', 'binary', 'ajax'].forEach(function (param) {\n\t        if (param in opts) {\n\t          docOpts[param] = opts[param];\n\t        }\n\t      });\n\t      db.get(docId, docOpts, function (err, res) {\n\t        var result;\n\t        /* istanbul ignore if */\n\t        if (err) {\n\t          result = [{error: err}];\n\t        } else {\n\t          result = formatResult(res);\n\t        }\n\t        gotResult(docIdx, docId, result);\n\t        nextBatch();\n\t      });\n\t    });\n\t  }\n\t\n\t  nextBatch();\n\t\n\t}\n\t\n\tfunction isChromeApp() {\n\t  return (typeof chrome !== \"undefined\" &&\n\t    typeof chrome.storage !== \"undefined\" &&\n\t    typeof chrome.storage.local !== \"undefined\");\n\t}\n\t\n\tvar hasLocal;\n\t\n\tif (isChromeApp()) {\n\t  hasLocal = false;\n\t} else {\n\t  try {\n\t    localStorage.setItem('_pouch_check_localstorage', 1);\n\t    hasLocal = !!localStorage.getItem('_pouch_check_localstorage');\n\t  } catch (e) {\n\t    hasLocal = false;\n\t  }\n\t}\n\t\n\tfunction hasLocalStorage() {\n\t  return hasLocal;\n\t}\n\t\n\tinherits(Changes$1, events.EventEmitter);\n\t\n\t/* istanbul ignore next */\n\tfunction attachBrowserEvents(self) {\n\t  if (isChromeApp()) {\n\t    chrome.storage.onChanged.addListener(function (e) {\n\t      // make sure it's event addressed to us\n\t      if (e.db_name != null) {\n\t        //object only has oldValue, newValue members\n\t        self.emit(e.dbName.newValue);\n\t      }\n\t    });\n\t  } else if (hasLocalStorage()) {\n\t    if (typeof addEventListener !== 'undefined') {\n\t      addEventListener(\"storage\", function (e) {\n\t        self.emit(e.key);\n\t      });\n\t    } else { // old IE\n\t      window.attachEvent(\"storage\", function (e) {\n\t        self.emit(e.key);\n\t      });\n\t    }\n\t  }\n\t}\n\t\n\tfunction Changes$1() {\n\t  events.EventEmitter.call(this);\n\t  this._listeners = {};\n\t\n\t  attachBrowserEvents(this);\n\t}\n\tChanges$1.prototype.addListener = function (dbName, id, db, opts) {\n\t  /* istanbul ignore if */\n\t  if (this._listeners[id]) {\n\t    return;\n\t  }\n\t  var self = this;\n\t  var inprogress = false;\n\t  function eventFunction() {\n\t    /* istanbul ignore if */\n\t    if (!self._listeners[id]) {\n\t      return;\n\t    }\n\t    if (inprogress) {\n\t      inprogress = 'waiting';\n\t      return;\n\t    }\n\t    inprogress = true;\n\t    var changesOpts = pick(opts, [\n\t      'style', 'include_docs', 'attachments', 'conflicts', 'filter',\n\t      'doc_ids', 'view', 'since', 'query_params', 'binary'\n\t    ]);\n\t\n\t    /* istanbul ignore next */\n\t    function onError() {\n\t      inprogress = false;\n\t    }\n\t\n\t    db.changes(changesOpts).on('change', function (c) {\n\t      if (c.seq > opts.since && !opts.cancelled) {\n\t        opts.since = c.seq;\n\t        opts.onChange(c);\n\t      }\n\t    }).on('complete', function () {\n\t      if (inprogress === 'waiting') {\n\t        setTimeout(function (){\n\t          eventFunction();\n\t        },0);\n\t      }\n\t      inprogress = false;\n\t    }).on('error', onError);\n\t  }\n\t  this._listeners[id] = eventFunction;\n\t  this.on(dbName, eventFunction);\n\t};\n\t\n\tChanges$1.prototype.removeListener = function (dbName, id) {\n\t  /* istanbul ignore if */\n\t  if (!(id in this._listeners)) {\n\t    return;\n\t  }\n\t  events.EventEmitter.prototype.removeListener.call(this, dbName,\n\t    this._listeners[id]);\n\t  delete this._listeners[id];\n\t};\n\t\n\t\n\t/* istanbul ignore next */\n\tChanges$1.prototype.notifyLocalWindows = function (dbName) {\n\t  //do a useless change on a storage thing\n\t  //in order to get other windows's listeners to activate\n\t  if (isChromeApp()) {\n\t    chrome.storage.local.set({dbName: dbName});\n\t  } else if (hasLocalStorage()) {\n\t    localStorage[dbName] = (localStorage[dbName] === \"a\") ? \"b\" : \"a\";\n\t  }\n\t};\n\t\n\tChanges$1.prototype.notify = function (dbName) {\n\t  this.emit(dbName);\n\t  this.notifyLocalWindows(dbName);\n\t};\n\t\n\tfunction guardedConsole(method) {\n\t  /* istanbul ignore else */\n\t  if (console !== 'undefined' && method in console) {\n\t    var args = Array.prototype.slice.call(arguments, 1);\n\t    console[method].apply(console, args);\n\t  }\n\t}\n\t\n\tfunction randomNumber(min, max) {\n\t  var maxTimeout = 600000; // Hard-coded default of 10 minutes\n\t  min = parseInt(min, 10) || 0;\n\t  max = parseInt(max, 10);\n\t  if (max !== max || max <= min) {\n\t    max = (min || 1) << 1; //doubling\n\t  } else {\n\t    max = max + 1;\n\t  }\n\t  // In order to not exceed maxTimeout, pick a random value between half of maxTimeout and maxTimeout\n\t  if(max > maxTimeout) {\n\t    min = maxTimeout >> 1; // divide by two\n\t    max = maxTimeout;\n\t  }\n\t  var ratio = Math.random();\n\t  var range = max - min;\n\t\n\t  return ~~(range * ratio + min); // ~~ coerces to an int, but fast.\n\t}\n\t\n\tfunction defaultBackOff(min) {\n\t  var max = 0;\n\t  if (!min) {\n\t    max = 2000;\n\t  }\n\t  return randomNumber(min, max);\n\t}\n\t\n\t// designed to give info to browser users, who are disturbed\n\t// when they see http errors in the console\n\tfunction explainError(status, str) {\n\t  guardedConsole('info', 'The above ' + status + ' is totally normal. ' + str);\n\t}\n\t\n\tinherits(PouchError, Error);\n\t\n\tfunction PouchError(opts) {\n\t  Error.call(this, opts.reason);\n\t  this.status = opts.status;\n\t  this.name = opts.error;\n\t  this.message = opts.reason;\n\t  this.error = true;\n\t}\n\t\n\tPouchError.prototype.toString = function () {\n\t  return JSON.stringify({\n\t    status: this.status,\n\t    name: this.name,\n\t    message: this.message,\n\t    reason: this.reason\n\t  });\n\t};\n\t\n\tvar UNAUTHORIZED = new PouchError({\n\t  status: 401,\n\t  error: 'unauthorized',\n\t  reason: \"Name or password is incorrect.\"\n\t});\n\t\n\tvar MISSING_BULK_DOCS = new PouchError({\n\t  status: 400,\n\t  error: 'bad_request',\n\t  reason: \"Missing JSON list of 'docs'\"\n\t});\n\t\n\tvar MISSING_DOC = new PouchError({\n\t  status: 404,\n\t  error: 'not_found',\n\t  reason: 'missing'\n\t});\n\t\n\tvar REV_CONFLICT = new PouchError({\n\t  status: 409,\n\t  error: 'conflict',\n\t  reason: 'Document update conflict'\n\t});\n\t\n\tvar INVALID_ID = new PouchError({\n\t  status: 400,\n\t  error: 'bad_request',\n\t  reason: '_id field must contain a string'\n\t});\n\t\n\tvar MISSING_ID = new PouchError({\n\t  status: 412,\n\t  error: 'missing_id',\n\t  reason: '_id is required for puts'\n\t});\n\t\n\tvar RESERVED_ID = new PouchError({\n\t  status: 400,\n\t  error: 'bad_request',\n\t  reason: 'Only reserved document ids may start with underscore.'\n\t});\n\t\n\tvar NOT_OPEN = new PouchError({\n\t  status: 412,\n\t  error: 'precondition_failed',\n\t  reason: 'Database not open'\n\t});\n\t\n\tvar UNKNOWN_ERROR = new PouchError({\n\t  status: 500,\n\t  error: 'unknown_error',\n\t  reason: 'Database encountered an unknown error'\n\t});\n\t\n\tvar BAD_ARG = new PouchError({\n\t  status: 500,\n\t  error: 'badarg',\n\t  reason: 'Some query argument is invalid'\n\t});\n\t\n\tvar INVALID_REQUEST = new PouchError({\n\t  status: 400,\n\t  error: 'invalid_request',\n\t  reason: 'Request was invalid'\n\t});\n\t\n\tvar QUERY_PARSE_ERROR = new PouchError({\n\t  status: 400,\n\t  error: 'query_parse_error',\n\t  reason: 'Some query parameter is invalid'\n\t});\n\t\n\tvar DOC_VALIDATION = new PouchError({\n\t  status: 500,\n\t  error: 'doc_validation',\n\t  reason: 'Bad special document member'\n\t});\n\t\n\tvar BAD_REQUEST = new PouchError({\n\t  status: 400,\n\t  error: 'bad_request',\n\t  reason: 'Something wrong with the request'\n\t});\n\t\n\tvar NOT_AN_OBJECT = new PouchError({\n\t  status: 400,\n\t  error: 'bad_request',\n\t  reason: 'Document must be a JSON object'\n\t});\n\t\n\tvar DB_MISSING = new PouchError({\n\t  status: 404,\n\t  error: 'not_found',\n\t  reason: 'Database not found'\n\t});\n\t\n\tvar IDB_ERROR = new PouchError({\n\t  status: 500,\n\t  error: 'indexed_db_went_bad',\n\t  reason: 'unknown'\n\t});\n\t\n\tvar WSQ_ERROR = new PouchError({\n\t  status: 500,\n\t  error: 'web_sql_went_bad',\n\t  reason: 'unknown'\n\t});\n\t\n\tvar LDB_ERROR = new PouchError({\n\t  status: 500,\n\t  error: 'levelDB_went_went_bad',\n\t  reason: 'unknown'\n\t});\n\t\n\tvar FORBIDDEN = new PouchError({\n\t  status: 403,\n\t  error: 'forbidden',\n\t  reason: 'Forbidden by design doc validate_doc_update function'\n\t});\n\t\n\tvar INVALID_REV = new PouchError({\n\t  status: 400,\n\t  error: 'bad_request',\n\t  reason: 'Invalid rev format'\n\t});\n\t\n\tvar FILE_EXISTS = new PouchError({\n\t  status: 412,\n\t  error: 'file_exists',\n\t  reason: 'The database could not be created, the file already exists.'\n\t});\n\t\n\tvar MISSING_STUB = new PouchError({\n\t  status: 412,\n\t  error: 'missing_stub'\n\t});\n\t\n\tvar INVALID_URL = new PouchError({\n\t  status: 413,\n\t  error: 'invalid_url',\n\t  reason: 'Provided URL is invalid'\n\t});\n\t\n\tfunction createError(error, reason) {\n\t  function CustomPouchError(reason) {\n\t    // inherit error properties from our parent error manually\n\t    // so as to allow proper JSON parsing.\n\t    /* jshint ignore:start */\n\t    for (var p in error) {\n\t      if (typeof error[p] !== 'function') {\n\t        this[p] = error[p];\n\t      }\n\t    }\n\t    /* jshint ignore:end */\n\t    if (reason !== undefined) {\n\t      this.reason = reason;\n\t    }\n\t  }\n\t  CustomPouchError.prototype = PouchError.prototype;\n\t  return new CustomPouchError(reason);\n\t}\n\t\n\tfunction generateErrorFromResponse(err) {\n\t\n\t  if (typeof err !== 'object') {\n\t    var data = err;\n\t    err = UNKNOWN_ERROR;\n\t    err.data = data;\n\t  }\n\t\n\t  if ('error' in err && err.error === 'conflict') {\n\t    err.name = 'conflict';\n\t    err.status = 409;\n\t  }\n\t\n\t  if (!('name' in err)) {\n\t    err.name = err.error || 'unknown';\n\t  }\n\t\n\t  if (!('status' in err)) {\n\t    err.status = 500;\n\t  }\n\t\n\t  if (!('message' in err)) {\n\t    err.message = err.message || err.reason;\n\t  }\n\t\n\t  return err;\n\t}\n\t\n\tfunction tryFilter(filter, doc, req) {\n\t  try {\n\t    return !filter(doc, req);\n\t  } catch (err) {\n\t    var msg = 'Filter function threw: ' + err.toString();\n\t    return createError(BAD_REQUEST, msg);\n\t  }\n\t}\n\t\n\tfunction filterChange(opts) {\n\t  var req = {};\n\t  var hasFilter = opts.filter && typeof opts.filter === 'function';\n\t  req.query = opts.query_params;\n\t\n\t  return function filter(change) {\n\t    if (!change.doc) {\n\t      // CSG sends events on the changes feed that don't have documents,\n\t      // this hack makes a whole lot of existing code robust.\n\t      change.doc = {};\n\t    }\n\t\n\t    var filterReturn = hasFilter && tryFilter(opts.filter, change.doc, req);\n\t\n\t    if (typeof filterReturn === 'object') {\n\t      return filterReturn;\n\t    }\n\t\n\t    if (filterReturn) {\n\t      return false;\n\t    }\n\t\n\t    if (!opts.include_docs) {\n\t      delete change.doc;\n\t    } else if (!opts.attachments) {\n\t      for (var att in change.doc._attachments) {\n\t        /* istanbul ignore else */\n\t        if (change.doc._attachments.hasOwnProperty(att)) {\n\t          change.doc._attachments[att].stub = true;\n\t        }\n\t      }\n\t    }\n\t    return true;\n\t  };\n\t}\n\t\n\tfunction flatten(arrs) {\n\t  var res = [];\n\t  for (var i = 0, len = arrs.length; i < len; i++) {\n\t    res = res.concat(arrs[i]);\n\t  }\n\t  return res;\n\t}\n\t\n\t// Determine id an ID is valid\n\t//   - invalid IDs begin with an underescore that does not begin '_design' or\n\t//     '_local'\n\t//   - any other string value is a valid id\n\t// Returns the specific error object for each case\n\tfunction invalidIdError(id) {\n\t  var err;\n\t  if (!id) {\n\t    err = createError(MISSING_ID);\n\t  } else if (typeof id !== 'string') {\n\t    err = createError(INVALID_ID);\n\t  } else if (/^_/.test(id) && !(/^_(design|local)/).test(id)) {\n\t    err = createError(RESERVED_ID);\n\t  }\n\t  if (err) {\n\t    throw err;\n\t  }\n\t}\n\t\n\tfunction listenerCount(ee, type) {\n\t  return 'listenerCount' in ee ? ee.listenerCount(type) :\n\t                                 events.EventEmitter.listenerCount(ee, type);\n\t}\n\t\n\tfunction parseDesignDocFunctionName(s) {\n\t  if (!s) {\n\t    return null;\n\t  }\n\t  var parts = s.split('/');\n\t  if (parts.length === 2) {\n\t    return parts;\n\t  }\n\t  if (parts.length === 1) {\n\t    return [s, s];\n\t  }\n\t  return null;\n\t}\n\t\n\tfunction normalizeDesignDocFunctionName(s) {\n\t  var normalized = parseDesignDocFunctionName(s);\n\t  return normalized ? normalized.join('/') : null;\n\t}\n\t\n\t// originally parseUri 1.2.2, now patched by us\n\t// (c) Steven Levithan <stevenlevithan.com>\n\t// MIT License\n\tvar keys = [\"source\", \"protocol\", \"authority\", \"userInfo\", \"user\", \"password\",\n\t    \"host\", \"port\", \"relative\", \"path\", \"directory\", \"file\", \"query\", \"anchor\"];\n\tvar qName =\"queryKey\";\n\tvar qParser = /(?:^|&)([^&=]*)=?([^&]*)/g;\n\t\n\t// use the \"loose\" parser\n\t/* jshint maxlen: false */\n\tvar parser = /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n\t\n\tfunction parseUri(str) {\n\t  var m = parser.exec(str);\n\t  var uri = {};\n\t  var i = 14;\n\t\n\t  while (i--) {\n\t    var key = keys[i];\n\t    var value = m[i] || \"\";\n\t    var encoded = ['user', 'password'].indexOf(key) !== -1;\n\t    uri[key] = encoded ? decodeURIComponent(value) : value;\n\t  }\n\t\n\t  uri[qName] = {};\n\t  uri[keys[12]].replace(qParser, function ($0, $1, $2) {\n\t    if ($1) {\n\t      uri[qName][$1] = $2;\n\t    }\n\t  });\n\t\n\t  return uri;\n\t}\n\t\n\t// this is essentially the \"update sugar\" function from daleharvey/pouchdb#1388\n\t// the diffFun tells us what delta to apply to the doc.  it either returns\n\t// the doc, or false if it doesn't need to do an update after all\n\tfunction upsert(db, docId, diffFun) {\n\t  return new PouchPromise(function (fulfill, reject) {\n\t    db.get(docId, function (err, doc) {\n\t      if (err) {\n\t        /* istanbul ignore next */\n\t        if (err.status !== 404) {\n\t          return reject(err);\n\t        }\n\t        doc = {};\n\t      }\n\t\n\t      // the user might change the _rev, so save it for posterity\n\t      var docRev = doc._rev;\n\t      var newDoc = diffFun(doc);\n\t\n\t      if (!newDoc) {\n\t        // if the diffFun returns falsy, we short-circuit as\n\t        // an optimization\n\t        return fulfill({updated: false, rev: docRev});\n\t      }\n\t\n\t      // users aren't allowed to modify these values,\n\t      // so reset them here\n\t      newDoc._id = docId;\n\t      newDoc._rev = docRev;\n\t      fulfill(tryAndPut(db, newDoc, diffFun));\n\t    });\n\t  });\n\t}\n\t\n\tfunction tryAndPut(db, doc, diffFun) {\n\t  return db.put(doc).then(function (res) {\n\t    return {\n\t      updated: true,\n\t      rev: res.rev\n\t    };\n\t  }, function (err) {\n\t    /* istanbul ignore next */\n\t    if (err.status !== 409) {\n\t      throw err;\n\t    }\n\t    return upsert(db, doc._id, diffFun);\n\t  });\n\t}\n\t\n\t// BEGIN Math.uuid.js\n\t\n\t/*!\n\tMath.uuid.js (v1.4)\n\thttp://www.broofa.com\n\tmailto:robert@broofa.com\n\t\n\tCopyright (c) 2010 Robert Kieffer\n\tDual licensed under the MIT and GPL licenses.\n\t*/\n\t\n\t/*\n\t * Generate a random uuid.\n\t *\n\t * USAGE: Math.uuid(length, radix)\n\t *   length - the desired number of characters\n\t *   radix  - the number of allowable values for each character.\n\t *\n\t * EXAMPLES:\n\t *   // No arguments  - returns RFC4122, version 4 ID\n\t *   >>> Math.uuid()\n\t *   \"92329D39-6F5C-4520-ABFC-AAB64544E172\"\n\t *\n\t *   // One argument - returns ID of the specified length\n\t *   >>> Math.uuid(15)     // 15 character ID (default base=62)\n\t *   \"VcydxgltxrVZSTV\"\n\t *\n\t *   // Two arguments - returns ID of the specified length, and radix. \n\t *   // (Radix must be <= 62)\n\t *   >>> Math.uuid(8, 2)  // 8 character ID (base=2)\n\t *   \"01001010\"\n\t *   >>> Math.uuid(8, 10) // 8 character ID (base=10)\n\t *   \"47473046\"\n\t *   >>> Math.uuid(8, 16) // 8 character ID (base=16)\n\t *   \"098F4D35\"\n\t */\n\tvar chars = (\n\t  '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ' +\n\t  'abcdefghijklmnopqrstuvwxyz'\n\t).split('');\n\tfunction getValue(radix) {\n\t  return 0 | Math.random() * radix;\n\t}\n\tfunction uuid(len, radix) {\n\t  radix = radix || chars.length;\n\t  var out = '';\n\t  var i = -1;\n\t\n\t  if (len) {\n\t    // Compact form\n\t    while (++i < len) {\n\t      out += chars[getValue(radix)];\n\t    }\n\t    return out;\n\t  }\n\t    // rfc4122, version 4 form\n\t    // Fill in random data.  At i==19 set the high bits of clock sequence as\n\t    // per rfc4122, sec. 4.1.5\n\t  while (++i < 36) {\n\t    switch (i) {\n\t      case 8:\n\t      case 13:\n\t      case 18:\n\t      case 23:\n\t        out += '-';\n\t        break;\n\t      case 19:\n\t        out += chars[(getValue(16) & 0x3) | 0x8];\n\t        break;\n\t      default:\n\t        out += chars[getValue(16)];\n\t    }\n\t  }\n\t\n\t  return out;\n\t}\n\t\n\t// We fetch all leafs of the revision tree, and sort them based on tree length\n\t// and whether they were deleted, undeleted documents with the longest revision\n\t// tree (most edits) win\n\t// The final sort algorithm is slightly documented in a sidebar here:\n\t// http://guide.couchdb.org/draft/conflicts.html\n\tfunction winningRev(metadata) {\n\t  var winningId;\n\t  var winningPos;\n\t  var winningDeleted;\n\t  var toVisit = metadata.rev_tree.slice();\n\t  var node;\n\t  while ((node = toVisit.pop())) {\n\t    var tree = node.ids;\n\t    var branches = tree[2];\n\t    var pos = node.pos;\n\t    if (branches.length) { // non-leaf\n\t      for (var i = 0, len = branches.length; i < len; i++) {\n\t        toVisit.push({pos: pos + 1, ids: branches[i]});\n\t      }\n\t      continue;\n\t    }\n\t    var deleted = !!tree[1].deleted;\n\t    var id = tree[0];\n\t    // sort by deleted, then pos, then id\n\t    if (!winningId || (winningDeleted !== deleted ? winningDeleted :\n\t        winningPos !== pos ? winningPos < pos : winningId < id)) {\n\t      winningId = id;\n\t      winningPos = pos;\n\t      winningDeleted = deleted;\n\t    }\n\t  }\n\t\n\t  return winningPos + '-' + winningId;\n\t}\n\t\n\t// Pretty much all below can be combined into a higher order function to\n\t// traverse revisions\n\t// The return value from the callback will be passed as context to all\n\t// children of that node\n\tfunction traverseRevTree(revs, callback) {\n\t  var toVisit = revs.slice();\n\t\n\t  var node;\n\t  while ((node = toVisit.pop())) {\n\t    var pos = node.pos;\n\t    var tree = node.ids;\n\t    var branches = tree[2];\n\t    var newCtx =\n\t      callback(branches.length === 0, pos, tree[0], node.ctx, tree[1]);\n\t    for (var i = 0, len = branches.length; i < len; i++) {\n\t      toVisit.push({pos: pos + 1, ids: branches[i], ctx: newCtx});\n\t    }\n\t  }\n\t}\n\t\n\tfunction sortByPos(a, b) {\n\t  return a.pos - b.pos;\n\t}\n\t\n\tfunction collectLeaves(revs) {\n\t  var leaves = [];\n\t  traverseRevTree(revs, function (isLeaf, pos, id, acc, opts) {\n\t    if (isLeaf) {\n\t      leaves.push({rev: pos + \"-\" + id, pos: pos, opts: opts});\n\t    }\n\t  });\n\t  leaves.sort(sortByPos).reverse();\n\t  for (var i = 0, len = leaves.length; i < len; i++) {\n\t    delete leaves[i].pos;\n\t  }\n\t  return leaves;\n\t}\n\t\n\t// returns revs of all conflicts that is leaves such that\n\t// 1. are not deleted and\n\t// 2. are different than winning revision\n\tfunction collectConflicts(metadata) {\n\t  var win = winningRev(metadata);\n\t  var leaves = collectLeaves(metadata.rev_tree);\n\t  var conflicts = [];\n\t  for (var i = 0, len = leaves.length; i < len; i++) {\n\t    var leaf = leaves[i];\n\t    if (leaf.rev !== win && !leaf.opts.deleted) {\n\t      conflicts.push(leaf.rev);\n\t    }\n\t  }\n\t  return conflicts;\n\t}\n\t\n\t// compact a tree by marking its non-leafs as missing,\n\t// and return a list of revs to delete\n\tfunction compactTree(metadata) {\n\t  var revs = [];\n\t  traverseRevTree(metadata.rev_tree, function (isLeaf, pos,\n\t                                               revHash, ctx, opts) {\n\t    if (opts.status === 'available' && !isLeaf) {\n\t      revs.push(pos + '-' + revHash);\n\t      opts.status = 'missing';\n\t    }\n\t  });\n\t  return revs;\n\t}\n\t\n\t// build up a list of all the paths to the leafs in this revision tree\n\tfunction rootToLeaf(revs) {\n\t  var paths = [];\n\t  var toVisit = revs.slice();\n\t  var node;\n\t  while ((node = toVisit.pop())) {\n\t    var pos = node.pos;\n\t    var tree = node.ids;\n\t    var id = tree[0];\n\t    var opts = tree[1];\n\t    var branches = tree[2];\n\t    var isLeaf = branches.length === 0;\n\t\n\t    var history = node.history ? node.history.slice() : [];\n\t    history.push({id: id, opts: opts});\n\t    if (isLeaf) {\n\t      paths.push({pos: (pos + 1 - history.length), ids: history});\n\t    }\n\t    for (var i = 0, len = branches.length; i < len; i++) {\n\t      toVisit.push({pos: pos + 1, ids: branches[i], history: history});\n\t    }\n\t  }\n\t  return paths.reverse();\n\t}\n\t\n\t// for a better overview of what this is doing, read:\n\t// https://github.com/apache/couchdb-couch/blob/master/src/couch_key_tree.erl\n\t//\n\t// But for a quick intro, CouchDB uses a revision tree to store a documents\n\t// history, A -> B -> C, when a document has conflicts, that is a branch in the\n\t// tree, A -> (B1 | B2 -> C), We store these as a nested array in the format\n\t//\n\t// KeyTree = [Path ... ]\n\t// Path = {pos: position_from_root, ids: Tree}\n\t// Tree = [Key, Opts, [Tree, ...]], in particular single node: [Key, []]\n\t\n\tfunction sortByPos$1(a, b) {\n\t  return a.pos - b.pos;\n\t}\n\t\n\t// classic binary search\n\tfunction binarySearch(arr, item, comparator) {\n\t  var low = 0;\n\t  var high = arr.length;\n\t  var mid;\n\t  while (low < high) {\n\t    mid = (low + high) >>> 1;\n\t    if (comparator(arr[mid], item) < 0) {\n\t      low = mid + 1;\n\t    } else {\n\t      high = mid;\n\t    }\n\t  }\n\t  return low;\n\t}\n\t\n\t// assuming the arr is sorted, insert the item in the proper place\n\tfunction insertSorted(arr, item, comparator) {\n\t  var idx = binarySearch(arr, item, comparator);\n\t  arr.splice(idx, 0, item);\n\t}\n\t\n\t// Turn a path as a flat array into a tree with a single branch.\n\t// If any should be stemmed from the beginning of the array, that's passed\n\t// in as the second argument\n\tfunction pathToTree(path, numStemmed) {\n\t  var root;\n\t  var leaf;\n\t  for (var i = numStemmed, len = path.length; i < len; i++) {\n\t    var node = path[i];\n\t    var currentLeaf = [node.id, node.opts, []];\n\t    if (leaf) {\n\t      leaf[2].push(currentLeaf);\n\t      leaf = currentLeaf;\n\t    } else {\n\t      root = leaf = currentLeaf;\n\t    }\n\t  }\n\t  return root;\n\t}\n\t\n\t// compare the IDs of two trees\n\tfunction compareTree(a, b) {\n\t  return a[0] < b[0] ? -1 : 1;\n\t}\n\t\n\t// Merge two trees together\n\t// The roots of tree1 and tree2 must be the same revision\n\tfunction mergeTree(in_tree1, in_tree2) {\n\t  var queue = [{tree1: in_tree1, tree2: in_tree2}];\n\t  var conflicts = false;\n\t  while (queue.length > 0) {\n\t    var item = queue.pop();\n\t    var tree1 = item.tree1;\n\t    var tree2 = item.tree2;\n\t\n\t    if (tree1[1].status || tree2[1].status) {\n\t      tree1[1].status =\n\t        (tree1[1].status ===  'available' ||\n\t        tree2[1].status === 'available') ? 'available' : 'missing';\n\t    }\n\t\n\t    for (var i = 0; i < tree2[2].length; i++) {\n\t      if (!tree1[2][0]) {\n\t        conflicts = 'new_leaf';\n\t        tree1[2][0] = tree2[2][i];\n\t        continue;\n\t      }\n\t\n\t      var merged = false;\n\t      for (var j = 0; j < tree1[2].length; j++) {\n\t        if (tree1[2][j][0] === tree2[2][i][0]) {\n\t          queue.push({tree1: tree1[2][j], tree2: tree2[2][i]});\n\t          merged = true;\n\t        }\n\t      }\n\t      if (!merged) {\n\t        conflicts = 'new_branch';\n\t        insertSorted(tree1[2], tree2[2][i], compareTree);\n\t      }\n\t    }\n\t  }\n\t  return {conflicts: conflicts, tree: in_tree1};\n\t}\n\t\n\tfunction doMerge(tree, path, dontExpand) {\n\t  var restree = [];\n\t  var conflicts = false;\n\t  var merged = false;\n\t  var res;\n\t\n\t  if (!tree.length) {\n\t    return {tree: [path], conflicts: 'new_leaf'};\n\t  }\n\t\n\t  for (var i = 0, len = tree.length; i < len; i++) {\n\t    var branch = tree[i];\n\t    if (branch.pos === path.pos && branch.ids[0] === path.ids[0]) {\n\t      // Paths start at the same position and have the same root, so they need\n\t      // merged\n\t      res = mergeTree(branch.ids, path.ids);\n\t      restree.push({pos: branch.pos, ids: res.tree});\n\t      conflicts = conflicts || res.conflicts;\n\t      merged = true;\n\t    } else if (dontExpand !== true) {\n\t      // The paths start at a different position, take the earliest path and\n\t      // traverse up until it as at the same point from root as the path we\n\t      // want to merge.  If the keys match we return the longer path with the\n\t      // other merged After stemming we dont want to expand the trees\n\t\n\t      var t1 = branch.pos < path.pos ? branch : path;\n\t      var t2 = branch.pos < path.pos ? path : branch;\n\t      var diff = t2.pos - t1.pos;\n\t\n\t      var candidateParents = [];\n\t\n\t      var trees = [];\n\t      trees.push({ids: t1.ids, diff: diff, parent: null, parentIdx: null});\n\t      while (trees.length > 0) {\n\t        var item = trees.pop();\n\t        if (item.diff === 0) {\n\t          if (item.ids[0] === t2.ids[0]) {\n\t            candidateParents.push(item);\n\t          }\n\t          continue;\n\t        }\n\t        var elements = item.ids[2];\n\t        for (var j = 0, elementsLen = elements.length; j < elementsLen; j++) {\n\t          trees.push({\n\t            ids: elements[j],\n\t            diff: item.diff - 1,\n\t            parent: item.ids,\n\t            parentIdx: j\n\t          });\n\t        }\n\t      }\n\t\n\t      var el = candidateParents[0];\n\t\n\t      if (!el) {\n\t        restree.push(branch);\n\t      } else {\n\t        res = mergeTree(el.ids, t2.ids);\n\t        el.parent[2][el.parentIdx] = res.tree;\n\t        restree.push({pos: t1.pos, ids: t1.ids});\n\t        conflicts = conflicts || res.conflicts;\n\t        merged = true;\n\t      }\n\t    } else {\n\t      restree.push(branch);\n\t    }\n\t  }\n\t\n\t  // We didnt find\n\t  if (!merged) {\n\t    restree.push(path);\n\t  }\n\t\n\t  restree.sort(sortByPos$1);\n\t\n\t  return {\n\t    tree: restree,\n\t    conflicts: conflicts || 'internal_node'\n\t  };\n\t}\n\t\n\t// To ensure we dont grow the revision tree infinitely, we stem old revisions\n\tfunction stem(tree, depth) {\n\t  // First we break out the tree into a complete list of root to leaf paths\n\t  var paths = rootToLeaf(tree);\n\t  var maybeStem = {};\n\t\n\t  var result;\n\t  for (var i = 0, len = paths.length; i < len; i++) {\n\t    // Then for each path, we cut off the start of the path based on the\n\t    // `depth` to stem to, and generate a new set of flat trees\n\t    var path = paths[i];\n\t    var stemmed = path.ids;\n\t    var numStemmed = Math.max(0, stemmed.length - depth);\n\t    var stemmedNode = {\n\t      pos: path.pos + numStemmed,\n\t      ids: pathToTree(stemmed, numStemmed)\n\t    };\n\t\n\t    for (var s = 0; s < numStemmed; s++) {\n\t      var rev = (path.pos + s) + '-' + stemmed[s].id;\n\t      maybeStem[rev] = true;\n\t    }\n\t\n\t    // Then we remerge all those flat trees together, ensuring that we dont\n\t    // connect trees that would go beyond the depth limit\n\t    if (result) {\n\t      result = doMerge(result, stemmedNode, true).tree;\n\t    } else {\n\t      result = [stemmedNode];\n\t    }\n\t  }\n\t\n\t  traverseRevTree(result, function (isLeaf, pos, revHash) {\n\t    // some revisions may have been removed in a branch but not in another\n\t    delete maybeStem[pos + '-' + revHash];\n\t  });\n\t\n\t  return {\n\t    tree: result,\n\t    revs: Object.keys(maybeStem)\n\t  };\n\t}\n\t\n\tfunction merge(tree, path, depth) {\n\t  var newTree = doMerge(tree, path);\n\t  var stemmed = stem(newTree.tree, depth);\n\t  return {\n\t    tree: stemmed.tree,\n\t    stemmedRevs: stemmed.revs,\n\t    conflicts: newTree.conflicts\n\t  };\n\t}\n\t\n\t// return true if a rev exists in the rev tree, false otherwise\n\tfunction revExists(revs, rev) {\n\t  var toVisit = revs.slice();\n\t  var splitRev = rev.split('-');\n\t  var targetPos = parseInt(splitRev[0], 10);\n\t  var targetId = splitRev[1];\n\t\n\t  var node;\n\t  while ((node = toVisit.pop())) {\n\t    if (node.pos === targetPos && node.ids[0] === targetId) {\n\t      return true;\n\t    }\n\t    var branches = node.ids[2];\n\t    for (var i = 0, len = branches.length; i < len; i++) {\n\t      toVisit.push({pos: node.pos + 1, ids: branches[i]});\n\t    }\n\t  }\n\t  return false;\n\t}\n\t\n\tfunction getTrees(node) {\n\t  return node.ids;\n\t}\n\t\n\t// check if a specific revision of a doc has been deleted\n\t//  - metadata: the metadata object from the doc store\n\t//  - rev: (optional) the revision to check. defaults to winning revision\n\tfunction isDeleted(metadata, rev) {\n\t  if (!rev) {\n\t    rev = winningRev(metadata);\n\t  }\n\t  var id = rev.substring(rev.indexOf('-') + 1);\n\t  var toVisit = metadata.rev_tree.map(getTrees);\n\t\n\t  var tree;\n\t  while ((tree = toVisit.pop())) {\n\t    if (tree[0] === id) {\n\t      return !!tree[1].deleted;\n\t    }\n\t    toVisit = toVisit.concat(tree[2]);\n\t  }\n\t}\n\t\n\tfunction isLocalId(id) {\n\t  return (/^_local/).test(id);\n\t}\n\t\n\tfunction evalFilter(input) {\n\t  return scopedEval('\"use strict\";\\nreturn ' + input + ';', {});\n\t}\n\t\n\tfunction evalView(input) {\n\t  var code = [\n\t    'return function(doc) {',\n\t    '  \"use strict\";',\n\t    '  var emitted = false;',\n\t    '  var emit = function (a, b) {',\n\t    '    emitted = true;',\n\t    '  };',\n\t    '  var view = ' + input + ';',\n\t    '  view(doc);',\n\t    '  if (emitted) {',\n\t    '    return true;',\n\t    '  }',\n\t    '};'\n\t  ].join('\\n');\n\t\n\t  return scopedEval(code, {});\n\t}\n\t\n\tinherits(Changes, events.EventEmitter);\n\t\n\tfunction tryCatchInChangeListener(self, change) {\n\t  // isolate try/catches to avoid V8 deoptimizations\n\t  try {\n\t    self.emit('change', change);\n\t  } catch (e) {\n\t    guardedConsole('error', 'Error in .on(\"change\", function):', e);\n\t  }\n\t}\n\t\n\tfunction Changes(db, opts, callback) {\n\t  events.EventEmitter.call(this);\n\t  var self = this;\n\t  this.db = db;\n\t  opts = opts ? clone(opts) : {};\n\t  var complete = opts.complete = once(function (err, resp) {\n\t    if (err) {\n\t      if (listenerCount(self, 'error') > 0) {\n\t        self.emit('error', err);\n\t      }\n\t    } else {\n\t      self.emit('complete', resp);\n\t    }\n\t    self.removeAllListeners();\n\t    db.removeListener('destroyed', onDestroy);\n\t  });\n\t  if (callback) {\n\t    self.on('complete', function (resp) {\n\t      callback(null, resp);\n\t    });\n\t    self.on('error', callback);\n\t  }\n\t  function onDestroy() {\n\t    self.cancel();\n\t  }\n\t  db.once('destroyed', onDestroy);\n\t\n\t  opts.onChange = function (change) {\n\t    /* istanbul ignore if */\n\t    if (opts.isCancelled) {\n\t      return;\n\t    }\n\t    tryCatchInChangeListener(self, change);\n\t  };\n\t\n\t  var promise = new PouchPromise(function (fulfill, reject) {\n\t    opts.complete = function (err, res) {\n\t      if (err) {\n\t        reject(err);\n\t      } else {\n\t        fulfill(res);\n\t      }\n\t    };\n\t  });\n\t  self.once('cancel', function () {\n\t    db.removeListener('destroyed', onDestroy);\n\t    opts.complete(null, {status: 'cancelled'});\n\t  });\n\t  this.then = promise.then.bind(promise);\n\t  this['catch'] = promise['catch'].bind(promise);\n\t  this.then(function (result) {\n\t    complete(null, result);\n\t  }, complete);\n\t\n\t\n\t\n\t  if (!db.taskqueue.isReady) {\n\t    db.taskqueue.addTask(function (failed) {\n\t      if (failed) {\n\t        opts.complete(failed);\n\t      } else if (self.isCancelled) {\n\t        self.emit('cancel');\n\t      } else {\n\t        self.doChanges(opts);\n\t      }\n\t    });\n\t  } else {\n\t    self.doChanges(opts);\n\t  }\n\t}\n\tChanges.prototype.cancel = function () {\n\t  this.isCancelled = true;\n\t  if (this.db.taskqueue.isReady) {\n\t    this.emit('cancel');\n\t  }\n\t};\n\tfunction processChange(doc, metadata, opts) {\n\t  var changeList = [{rev: doc._rev}];\n\t  if (opts.style === 'all_docs') {\n\t    changeList = collectLeaves(metadata.rev_tree)\n\t    .map(function (x) { return {rev: x.rev}; });\n\t  }\n\t  var change = {\n\t    id: metadata.id,\n\t    changes: changeList,\n\t    doc: doc\n\t  };\n\t\n\t  if (isDeleted(metadata, doc._rev)) {\n\t    change.deleted = true;\n\t  }\n\t  if (opts.conflicts) {\n\t    change.doc._conflicts = collectConflicts(metadata);\n\t    if (!change.doc._conflicts.length) {\n\t      delete change.doc._conflicts;\n\t    }\n\t  }\n\t  return change;\n\t}\n\t\n\tChanges.prototype.doChanges = function (opts) {\n\t  var self = this;\n\t  var callback = opts.complete;\n\t\n\t  opts = clone(opts);\n\t  if ('live' in opts && !('continuous' in opts)) {\n\t    opts.continuous = opts.live;\n\t  }\n\t  opts.processChange = processChange;\n\t\n\t  if (opts.since === 'latest') {\n\t    opts.since = 'now';\n\t  }\n\t  if (!opts.since) {\n\t    opts.since = 0;\n\t  }\n\t  if (opts.since === 'now') {\n\t    this.db.info().then(function (info) {\n\t      /* istanbul ignore if */\n\t      if (self.isCancelled) {\n\t        callback(null, {status: 'cancelled'});\n\t        return;\n\t      }\n\t      opts.since = info.update_seq;\n\t      self.doChanges(opts);\n\t    }, callback);\n\t    return;\n\t  }\n\t\n\t\n\t  if (opts.view && !opts.filter) {\n\t    opts.filter = '_view';\n\t  }\n\t\n\t  if (opts.filter && typeof opts.filter === 'string') {\n\t    if (opts.filter === '_view') {\n\t      opts.view = normalizeDesignDocFunctionName(opts.view);\n\t    } else {\n\t      opts.filter = normalizeDesignDocFunctionName(opts.filter);\n\t    }\n\t\n\t    if (this.db.type() !== 'http' && !opts.doc_ids) {\n\t      return this.filterChanges(opts);\n\t    }\n\t  }\n\t\n\t  if (!('descending' in opts)) {\n\t    opts.descending = false;\n\t  }\n\t\n\t  // 0 and 1 should return 1 document\n\t  opts.limit = opts.limit === 0 ? 1 : opts.limit;\n\t  opts.complete = callback;\n\t  var newPromise = this.db._changes(opts);\n\t  /* istanbul ignore else */\n\t  if (newPromise && typeof newPromise.cancel === 'function') {\n\t    var cancel = self.cancel;\n\t    self.cancel = getArguments(function (args) {\n\t      newPromise.cancel();\n\t      cancel.apply(this, args);\n\t    });\n\t  }\n\t};\n\t\n\tChanges.prototype.filterChanges = function (opts) {\n\t  var self = this;\n\t  var callback = opts.complete;\n\t  if (opts.filter === '_view') {\n\t    if (!opts.view || typeof opts.view !== 'string') {\n\t      var err = createError(BAD_REQUEST,\n\t        '`view` filter parameter not found or invalid.');\n\t      return callback(err);\n\t    }\n\t    // fetch a view from a design doc, make it behave like a filter\n\t    var viewName = parseDesignDocFunctionName(opts.view);\n\t    this.db.get('_design/' + viewName[0], function (err, ddoc) {\n\t      /* istanbul ignore if */\n\t      if (self.isCancelled) {\n\t        return callback(null, {status: 'cancelled'});\n\t      }\n\t      /* istanbul ignore next */\n\t      if (err) {\n\t        return callback(generateErrorFromResponse(err));\n\t      }\n\t      var mapFun = ddoc && ddoc.views && ddoc.views[viewName[1]] &&\n\t        ddoc.views[viewName[1]].map;\n\t      if (!mapFun) {\n\t        return callback(createError(MISSING_DOC,\n\t          (ddoc.views ? 'missing json key: ' + viewName[1] :\n\t            'missing json key: views')));\n\t      }\n\t      opts.filter = evalView(mapFun);\n\t      self.doChanges(opts);\n\t    });\n\t  } else {\n\t    // fetch a filter from a design doc\n\t    var filterName = parseDesignDocFunctionName(opts.filter);\n\t    if (!filterName) {\n\t      return self.doChanges(opts);\n\t    }\n\t    this.db.get('_design/' + filterName[0], function (err, ddoc) {\n\t      /* istanbul ignore if */\n\t      if (self.isCancelled) {\n\t        return callback(null, {status: 'cancelled'});\n\t      }\n\t      /* istanbul ignore next */\n\t      if (err) {\n\t        return callback(generateErrorFromResponse(err));\n\t      }\n\t      var filterFun = ddoc && ddoc.filters && ddoc.filters[filterName[1]];\n\t      if (!filterFun) {\n\t        return callback(createError(MISSING_DOC,\n\t          ((ddoc && ddoc.filters) ? 'missing json key: ' + filterName[1]\n\t            : 'missing json key: filters')));\n\t      }\n\t      opts.filter = evalFilter(filterFun);\n\t      self.doChanges(opts);\n\t    });\n\t  }\n\t};\n\t\n\t/*\n\t * A generic pouch adapter\n\t */\n\t\n\tfunction compare(left, right) {\n\t  return left < right ? -1 : left > right ? 1 : 0;\n\t}\n\t\n\t// returns first element of arr satisfying callback predicate\n\tfunction arrayFirst(arr, callback) {\n\t  for (var i = 0; i < arr.length; i++) {\n\t    if (callback(arr[i], i) === true) {\n\t      return arr[i];\n\t    }\n\t  }\n\t}\n\t\n\t// Wrapper for functions that call the bulkdocs api with a single doc,\n\t// if the first result is an error, return an error\n\tfunction yankError(callback) {\n\t  return function (err, results) {\n\t    if (err || (results[0] && results[0].error)) {\n\t      callback(err || results[0]);\n\t    } else {\n\t      callback(null, results.length ? results[0]  : results);\n\t    }\n\t  };\n\t}\n\t\n\t// clean docs given to us by the user\n\tfunction cleanDocs(docs) {\n\t  for (var i = 0; i < docs.length; i++) {\n\t    var doc = docs[i];\n\t    if (doc._deleted) {\n\t      delete doc._attachments; // ignore atts for deleted docs\n\t    } else if (doc._attachments) {\n\t      // filter out extraneous keys from _attachments\n\t      var atts = Object.keys(doc._attachments);\n\t      for (var j = 0; j < atts.length; j++) {\n\t        var att = atts[j];\n\t        doc._attachments[att] = pick(doc._attachments[att],\n\t          ['data', 'digest', 'content_type', 'length', 'revpos', 'stub']);\n\t      }\n\t    }\n\t  }\n\t}\n\t\n\t// compare two docs, first by _id then by _rev\n\tfunction compareByIdThenRev(a, b) {\n\t  var idCompare = compare(a._id, b._id);\n\t  if (idCompare !== 0) {\n\t    return idCompare;\n\t  }\n\t  var aStart = a._revisions ? a._revisions.start : 0;\n\t  var bStart = b._revisions ? b._revisions.start : 0;\n\t  return compare(aStart, bStart);\n\t}\n\t\n\t// for every node in a revision tree computes its distance from the closest\n\t// leaf\n\tfunction computeHeight(revs) {\n\t  var height = {};\n\t  var edges = [];\n\t  traverseRevTree(revs, function (isLeaf, pos, id, prnt) {\n\t    var rev = pos + \"-\" + id;\n\t    if (isLeaf) {\n\t      height[rev] = 0;\n\t    }\n\t    if (prnt !== undefined) {\n\t      edges.push({from: prnt, to: rev});\n\t    }\n\t    return rev;\n\t  });\n\t\n\t  edges.reverse();\n\t  edges.forEach(function (edge) {\n\t    if (height[edge.from] === undefined) {\n\t      height[edge.from] = 1 + height[edge.to];\n\t    } else {\n\t      height[edge.from] = Math.min(height[edge.from], 1 + height[edge.to]);\n\t    }\n\t  });\n\t  return height;\n\t}\n\t\n\tfunction allDocsKeysQuery(api, opts, callback) {\n\t  var keys =  ('limit' in opts) ?\n\t      opts.keys.slice(opts.skip, opts.limit + opts.skip) :\n\t      (opts.skip > 0) ? opts.keys.slice(opts.skip) : opts.keys;\n\t  if (opts.descending) {\n\t    keys.reverse();\n\t  }\n\t  if (!keys.length) {\n\t    return api._allDocs({limit: 0}, callback);\n\t  }\n\t  var finalResults = {\n\t    offset: opts.skip\n\t  };\n\t  return PouchPromise.all(keys.map(function (key) {\n\t    var subOpts = jsExtend.extend({key: key, deleted: 'ok'}, opts);\n\t    ['limit', 'skip', 'keys'].forEach(function (optKey) {\n\t      delete subOpts[optKey];\n\t    });\n\t    return new PouchPromise(function (resolve, reject) {\n\t      api._allDocs(subOpts, function (err, res) {\n\t        /* istanbul ignore if */\n\t        if (err) {\n\t          return reject(err);\n\t        }\n\t        finalResults.total_rows = res.total_rows;\n\t        resolve(res.rows[0] || {key: key, error: 'not_found'});\n\t      });\n\t    });\n\t  })).then(function (results) {\n\t    finalResults.rows = results;\n\t    return finalResults;\n\t  });\n\t}\n\t\n\t// all compaction is done in a queue, to avoid attaching\n\t// too many listeners at once\n\tfunction doNextCompaction(self) {\n\t  var task = self._compactionQueue[0];\n\t  var opts = task.opts;\n\t  var callback = task.callback;\n\t  self.get('_local/compaction').catch(function () {\n\t    return false;\n\t  }).then(function (doc) {\n\t    if (doc && doc.last_seq) {\n\t      opts.last_seq = doc.last_seq;\n\t    }\n\t    self._compact(opts, function (err, res) {\n\t      /* istanbul ignore if */\n\t      if (err) {\n\t        callback(err);\n\t      } else {\n\t        callback(null, res);\n\t      }\n\t      process.nextTick(function () {\n\t        self._compactionQueue.shift();\n\t        if (self._compactionQueue.length) {\n\t          doNextCompaction(self);\n\t        }\n\t      });\n\t    });\n\t  });\n\t}\n\t\n\tfunction attachmentNameError(name) {\n\t  if (name.charAt(0) === '_') {\n\t    return name + 'is not a valid attachment name, attachment ' +\n\t      'names cannot start with \\'_\\'';\n\t  }\n\t  return false;\n\t}\n\t\n\tinherits(AbstractPouchDB, events.EventEmitter);\n\t\n\tfunction AbstractPouchDB() {\n\t  events.EventEmitter.call(this);\n\t}\n\t\n\tAbstractPouchDB.prototype.post =\n\t  adapterFun('post', function (doc, opts, callback) {\n\t  if (typeof opts === 'function') {\n\t    callback = opts;\n\t    opts = {};\n\t  }\n\t  if (typeof doc !== 'object' || Array.isArray(doc)) {\n\t    return callback(createError(NOT_AN_OBJECT));\n\t  }\n\t  this.bulkDocs({docs: [doc]}, opts, yankError(callback));\n\t});\n\t\n\tAbstractPouchDB.prototype.put = adapterFun('put', function (doc, opts, cb) {\n\t  if (typeof opts === 'function') {\n\t    cb = opts;\n\t    opts = {};\n\t  }\n\t  if (typeof doc !== 'object' || Array.isArray(doc)) {\n\t    return cb(createError(NOT_AN_OBJECT));\n\t  }\n\t  invalidIdError(doc._id);\n\t  if (isLocalId(doc._id) && typeof this._putLocal === 'function') {\n\t    if (doc._deleted) {\n\t      return this._removeLocal(doc, cb);\n\t    } else {\n\t      return this._putLocal(doc, cb);\n\t    }\n\t  }\n\t  if (typeof this._put === 'function' && opts.new_edits !== false) {\n\t    this._put(doc, opts, cb);\n\t  } else {\n\t    this.bulkDocs({docs: [doc]}, opts, yankError(cb));\n\t  }\n\t});\n\t\n\tAbstractPouchDB.prototype.putAttachment =\n\t  adapterFun('putAttachment', function (docId, attachmentId, rev,\n\t                                              blob, type) {\n\t  var api = this;\n\t  if (typeof type === 'function') {\n\t    type = blob;\n\t    blob = rev;\n\t    rev = null;\n\t  }\n\t  // Lets fix in https://github.com/pouchdb/pouchdb/issues/3267\n\t  /* istanbul ignore if */\n\t  if (typeof type === 'undefined') {\n\t    type = blob;\n\t    blob = rev;\n\t    rev = null;\n\t  }\n\t\n\t  function createAttachment(doc) {\n\t    var prevrevpos = '_rev' in doc ? parseInt(doc._rev, 10) : 0;\n\t    doc._attachments = doc._attachments || {};\n\t    doc._attachments[attachmentId] = {\n\t      content_type: type,\n\t      data: blob,\n\t      revpos: ++prevrevpos\n\t    };\n\t    return api.put(doc);\n\t  }\n\t\n\t  return api.get(docId).then(function (doc) {\n\t    if (doc._rev !== rev) {\n\t      throw createError(REV_CONFLICT);\n\t    }\n\t\n\t    return createAttachment(doc);\n\t  }, function (err) {\n\t     // create new doc\n\t    /* istanbul ignore else */\n\t    if (err.reason === MISSING_DOC.message) {\n\t      return createAttachment({_id: docId});\n\t    } else {\n\t      throw err;\n\t    }\n\t  });\n\t});\n\t\n\tAbstractPouchDB.prototype.removeAttachment =\n\t  adapterFun('removeAttachment', function (docId, attachmentId, rev,\n\t                                                 callback) {\n\t  var self = this;\n\t  self.get(docId, function (err, obj) {\n\t    /* istanbul ignore if */\n\t    if (err) {\n\t      callback(err);\n\t      return;\n\t    }\n\t    if (obj._rev !== rev) {\n\t      callback(createError(REV_CONFLICT));\n\t      return;\n\t    }\n\t    /* istanbul ignore if */\n\t    if (!obj._attachments) {\n\t      return callback();\n\t    }\n\t    delete obj._attachments[attachmentId];\n\t    if (Object.keys(obj._attachments).length === 0) {\n\t      delete obj._attachments;\n\t    }\n\t    self.put(obj, callback);\n\t  });\n\t});\n\t\n\tAbstractPouchDB.prototype.remove =\n\t  adapterFun('remove', function (docOrId, optsOrRev, opts, callback) {\n\t  var doc;\n\t  if (typeof optsOrRev === 'string') {\n\t    // id, rev, opts, callback style\n\t    doc = {\n\t      _id: docOrId,\n\t      _rev: optsOrRev\n\t    };\n\t    if (typeof opts === 'function') {\n\t      callback = opts;\n\t      opts = {};\n\t    }\n\t  } else {\n\t    // doc, opts, callback style\n\t    doc = docOrId;\n\t    if (typeof optsOrRev === 'function') {\n\t      callback = optsOrRev;\n\t      opts = {};\n\t    } else {\n\t      callback = opts;\n\t      opts = optsOrRev;\n\t    }\n\t  }\n\t  opts = opts || {};\n\t  opts.was_delete = true;\n\t  var newDoc = {_id: doc._id, _rev: (doc._rev || opts.rev)};\n\t  newDoc._deleted = true;\n\t  if (isLocalId(newDoc._id) && typeof this._removeLocal === 'function') {\n\t    return this._removeLocal(doc, callback);\n\t  }\n\t  this.bulkDocs({docs: [newDoc]}, opts, yankError(callback));\n\t});\n\t\n\tAbstractPouchDB.prototype.revsDiff =\n\t  adapterFun('revsDiff', function (req, opts, callback) {\n\t  if (typeof opts === 'function') {\n\t    callback = opts;\n\t    opts = {};\n\t  }\n\t  var ids = Object.keys(req);\n\t\n\t  if (!ids.length) {\n\t    return callback(null, {});\n\t  }\n\t\n\t  var count = 0;\n\t  var missing = new _Map();\n\t\n\t  function addToMissing(id, revId) {\n\t    if (!missing.has(id)) {\n\t      missing.set(id, {missing: []});\n\t    }\n\t    missing.get(id).missing.push(revId);\n\t  }\n\t\n\t  function processDoc(id, rev_tree) {\n\t    // Is this fast enough? Maybe we should switch to a set simulated by a map\n\t    var missingForId = req[id].slice(0);\n\t    traverseRevTree(rev_tree, function (isLeaf, pos, revHash, ctx,\n\t      opts) {\n\t        var rev = pos + '-' + revHash;\n\t        var idx = missingForId.indexOf(rev);\n\t        if (idx === -1) {\n\t          return;\n\t        }\n\t\n\t        missingForId.splice(idx, 1);\n\t        /* istanbul ignore if */\n\t        if (opts.status !== 'available') {\n\t          addToMissing(id, rev);\n\t        }\n\t      });\n\t\n\t    // Traversing the tree is synchronous, so now `missingForId` contains\n\t    // revisions that were not found in the tree\n\t    missingForId.forEach(function (rev) {\n\t      addToMissing(id, rev);\n\t    });\n\t  }\n\t\n\t  ids.map(function (id) {\n\t    this._getRevisionTree(id, function (err, rev_tree) {\n\t      if (err && err.status === 404 && err.message === 'missing') {\n\t        missing.set(id, {missing: req[id]});\n\t      } else if (err) {\n\t        /* istanbul ignore next */\n\t        return callback(err);\n\t      } else {\n\t        processDoc(id, rev_tree);\n\t      }\n\t\n\t      if (++count === ids.length) {\n\t        // convert LazyMap to object\n\t        var missingObj = {};\n\t        missing.forEach(function (value, key) {\n\t          missingObj[key] = value;\n\t        });\n\t        return callback(null, missingObj);\n\t      }\n\t    });\n\t  }, this);\n\t});\n\t\n\t// _bulk_get API for faster replication, as described in\n\t// https://github.com/apache/couchdb-chttpd/pull/33\n\t// At the \"abstract\" level, it will just run multiple get()s in\n\t// parallel, because this isn't much of a performance cost\n\t// for local databases (except the cost of multiple transactions, which is\n\t// small). The http adapter overrides this in order\n\t// to do a more efficient single HTTP request.\n\tAbstractPouchDB.prototype.bulkGet =\n\t  adapterFun('bulkGet', function (opts, callback) {\n\t  bulkGet(this, opts, callback);\n\t});\n\t\n\t// compact one document and fire callback\n\t// by compacting we mean removing all revisions which\n\t// are further from the leaf in revision tree than max_height\n\tAbstractPouchDB.prototype.compactDocument =\n\t  adapterFun('compactDocument', function (docId, maxHeight, callback) {\n\t  var self = this;\n\t  this._getRevisionTree(docId, function (err, revTree) {\n\t    /* istanbul ignore if */\n\t    if (err) {\n\t      return callback(err);\n\t    }\n\t    var height = computeHeight(revTree);\n\t    var candidates = [];\n\t    var revs = [];\n\t    Object.keys(height).forEach(function (rev) {\n\t      if (height[rev] > maxHeight) {\n\t        candidates.push(rev);\n\t      }\n\t    });\n\t\n\t    traverseRevTree(revTree, function (isLeaf, pos, revHash, ctx, opts) {\n\t      var rev = pos + '-' + revHash;\n\t      if (opts.status === 'available' && candidates.indexOf(rev) !== -1) {\n\t        revs.push(rev);\n\t      }\n\t    });\n\t    self._doCompaction(docId, revs, callback);\n\t  });\n\t});\n\t\n\t// compact the whole database using single document\n\t// compaction\n\tAbstractPouchDB.prototype.compact =\n\t  adapterFun('compact', function (opts, callback) {\n\t  if (typeof opts === 'function') {\n\t    callback = opts;\n\t    opts = {};\n\t  }\n\t\n\t  var self = this;\n\t  opts = opts || {};\n\t\n\t  self._compactionQueue = self._compactionQueue || [];\n\t  self._compactionQueue.push({opts: opts, callback: callback});\n\t  if (self._compactionQueue.length === 1) {\n\t    doNextCompaction(self);\n\t  }\n\t});\n\tAbstractPouchDB.prototype._compact = function (opts, callback) {\n\t  var self = this;\n\t  var changesOpts = {\n\t    return_docs: false,\n\t    last_seq: opts.last_seq || 0\n\t  };\n\t  var promises = [];\n\t\n\t  function onChange(row) {\n\t    promises.push(self.compactDocument(row.id, 0));\n\t  }\n\t  function onComplete(resp) {\n\t    var lastSeq = resp.last_seq;\n\t    PouchPromise.all(promises).then(function () {\n\t      return upsert(self, '_local/compaction', function deltaFunc(doc) {\n\t        if (!doc.last_seq || doc.last_seq < lastSeq) {\n\t          doc.last_seq = lastSeq;\n\t          return doc;\n\t        }\n\t        return false; // somebody else got here first, don't update\n\t      });\n\t    }).then(function () {\n\t      callback(null, {ok: true});\n\t    }).catch(callback);\n\t  }\n\t  self.changes(changesOpts)\n\t    .on('change', onChange)\n\t    .on('complete', onComplete)\n\t    .on('error', callback);\n\t};\n\t\n\t/* Begin api wrappers. Specific functionality to storage belongs in the\n\t   _[method] */\n\tAbstractPouchDB.prototype.get = adapterFun('get', function (id, opts, cb) {\n\t  if (typeof opts === 'function') {\n\t    cb = opts;\n\t    opts = {};\n\t  }\n\t  if (typeof id !== 'string') {\n\t    return cb(createError(INVALID_ID));\n\t  }\n\t  if (isLocalId(id) && typeof this._getLocal === 'function') {\n\t    return this._getLocal(id, cb);\n\t  }\n\t  var leaves = [], self = this;\n\t\n\t  function finishOpenRevs() {\n\t    var result = [];\n\t    var count = leaves.length;\n\t    /* istanbul ignore if */\n\t    if (!count) {\n\t      return cb(null, result);\n\t    }\n\t    // order with open_revs is unspecified\n\t    leaves.forEach(function (leaf) {\n\t      self.get(id, {\n\t        rev: leaf,\n\t        revs: opts.revs,\n\t        attachments: opts.attachments\n\t      }, function (err, doc) {\n\t        if (!err) {\n\t          result.push({ok: doc});\n\t        } else {\n\t          result.push({missing: leaf});\n\t        }\n\t        count--;\n\t        if (!count) {\n\t          cb(null, result);\n\t        }\n\t      });\n\t    });\n\t  }\n\t\n\t  if (opts.open_revs) {\n\t    if (opts.open_revs === \"all\") {\n\t      this._getRevisionTree(id, function (err, rev_tree) {\n\t        if (err) {\n\t          return cb(err);\n\t        }\n\t        leaves = collectLeaves(rev_tree).map(function (leaf) {\n\t          return leaf.rev;\n\t        });\n\t        finishOpenRevs();\n\t      });\n\t    } else {\n\t      if (Array.isArray(opts.open_revs)) {\n\t        leaves = opts.open_revs;\n\t        for (var i = 0; i < leaves.length; i++) {\n\t          var l = leaves[i];\n\t          // looks like it's the only thing couchdb checks\n\t          if (!(typeof (l) === \"string\" && /^\\d+-/.test(l))) {\n\t            return cb(createError(INVALID_REV));\n\t          }\n\t        }\n\t        finishOpenRevs();\n\t      } else {\n\t        return cb(createError(UNKNOWN_ERROR, 'function_clause'));\n\t      }\n\t    }\n\t    return; // open_revs does not like other options\n\t  }\n\t\n\t  return this._get(id, opts, function (err, result) {\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    var doc = result.doc;\n\t    var metadata = result.metadata;\n\t    var ctx = result.ctx;\n\t\n\t    if (opts.conflicts) {\n\t      var conflicts = collectConflicts(metadata);\n\t      if (conflicts.length) {\n\t        doc._conflicts = conflicts;\n\t      }\n\t    }\n\t\n\t    if (isDeleted(metadata, doc._rev)) {\n\t      doc._deleted = true;\n\t    }\n\t\n\t    if (opts.revs || opts.revs_info) {\n\t      var paths = rootToLeaf(metadata.rev_tree);\n\t      var path = arrayFirst(paths, function (arr) {\n\t        return arr.ids.map(function (x) { return x.id; })\n\t          .indexOf(doc._rev.split('-')[1]) !== -1;\n\t      });\n\t\n\t      var indexOfRev = path.ids.map(function (x) {return x.id; })\n\t        .indexOf(doc._rev.split('-')[1]) + 1;\n\t      var howMany = path.ids.length - indexOfRev;\n\t      path.ids.splice(indexOfRev, howMany);\n\t      path.ids.reverse();\n\t\n\t      if (opts.revs) {\n\t        doc._revisions = {\n\t          start: (path.pos + path.ids.length) - 1,\n\t          ids: path.ids.map(function (rev) {\n\t            return rev.id;\n\t          })\n\t        };\n\t      }\n\t      if (opts.revs_info) {\n\t        var pos =  path.pos + path.ids.length;\n\t        doc._revs_info = path.ids.map(function (rev) {\n\t          pos--;\n\t          return {\n\t            rev: pos + '-' + rev.id,\n\t            status: rev.opts.status\n\t          };\n\t        });\n\t      }\n\t    }\n\t\n\t    if (opts.attachments && doc._attachments) {\n\t      var attachments = doc._attachments;\n\t      var count = Object.keys(attachments).length;\n\t      if (count === 0) {\n\t        return cb(null, doc);\n\t      }\n\t      Object.keys(attachments).forEach(function (key) {\n\t        this._getAttachment(doc._id, key, attachments[key], {\n\t          // Previously the revision handling was done in adapter.js\n\t          // getAttachment, however since idb-next doesnt we need to\n\t          // pass the rev through\n\t          rev: doc._rev,\n\t          binary: opts.binary,\n\t          ctx: ctx\n\t        }, function (err, data) {\n\t          var att = doc._attachments[key];\n\t          att.data = data;\n\t          delete att.stub;\n\t          delete att.length;\n\t          if (!--count) {\n\t            cb(null, doc);\n\t          }\n\t        });\n\t      }, self);\n\t    } else {\n\t      if (doc._attachments) {\n\t        for (var key in doc._attachments) {\n\t          /* istanbul ignore else */\n\t          if (doc._attachments.hasOwnProperty(key)) {\n\t            doc._attachments[key].stub = true;\n\t          }\n\t        }\n\t      }\n\t      cb(null, doc);\n\t    }\n\t  });\n\t});\n\t\n\t// TODO: I dont like this, it forces an extra read for every\n\t// attachment read and enforces a confusing api between\n\t// adapter.js and the adapter implementation\n\tAbstractPouchDB.prototype.getAttachment =\n\t  adapterFun('getAttachment', function (docId, attachmentId, opts, callback) {\n\t  var self = this;\n\t  if (opts instanceof Function) {\n\t    callback = opts;\n\t    opts = {};\n\t  }\n\t  this._get(docId, opts, function (err, res) {\n\t    if (err) {\n\t      return callback(err);\n\t    }\n\t    if (res.doc._attachments && res.doc._attachments[attachmentId]) {\n\t      opts.ctx = res.ctx;\n\t      opts.binary = true;\n\t      self._getAttachment(docId, attachmentId,\n\t                          res.doc._attachments[attachmentId], opts, callback);\n\t    } else {\n\t      return callback(createError(MISSING_DOC));\n\t    }\n\t  });\n\t});\n\t\n\tAbstractPouchDB.prototype.allDocs =\n\t  adapterFun('allDocs', function (opts, callback) {\n\t  if (typeof opts === 'function') {\n\t    callback = opts;\n\t    opts = {};\n\t  }\n\t  opts.skip = typeof opts.skip !== 'undefined' ? opts.skip : 0;\n\t  if (opts.start_key) {\n\t    opts.startkey = opts.start_key;\n\t  }\n\t  if (opts.end_key) {\n\t    opts.endkey = opts.end_key;\n\t  }\n\t  if ('keys' in opts) {\n\t    if (!Array.isArray(opts.keys)) {\n\t      return callback(new TypeError('options.keys must be an array'));\n\t    }\n\t    var incompatibleOpt =\n\t      ['startkey', 'endkey', 'key'].filter(function (incompatibleOpt) {\n\t      return incompatibleOpt in opts;\n\t    })[0];\n\t    if (incompatibleOpt) {\n\t      callback(createError(QUERY_PARSE_ERROR,\n\t        'Query parameter `' + incompatibleOpt +\n\t        '` is not compatible with multi-get'\n\t      ));\n\t      return;\n\t    }\n\t    if (this.type() !== 'http') {\n\t      return allDocsKeysQuery(this, opts, callback);\n\t    }\n\t  }\n\t\n\t  return this._allDocs(opts, callback);\n\t});\n\t\n\tAbstractPouchDB.prototype.changes = function (opts, callback) {\n\t  if (typeof opts === 'function') {\n\t    callback = opts;\n\t    opts = {};\n\t  }\n\t  return new Changes(this, opts, callback);\n\t};\n\t\n\tAbstractPouchDB.prototype.close = adapterFun('close', function (callback) {\n\t  this._closed = true;\n\t  return this._close(callback);\n\t});\n\t\n\tAbstractPouchDB.prototype.info = adapterFun('info', function (callback) {\n\t  var self = this;\n\t  this._info(function (err, info) {\n\t    if (err) {\n\t      return callback(err);\n\t    }\n\t    // assume we know better than the adapter, unless it informs us\n\t    info.db_name = info.db_name || self.name;\n\t    info.auto_compaction = !!(self.auto_compaction && self.type() !== 'http');\n\t    info.adapter = self.type();\n\t    callback(null, info);\n\t  });\n\t});\n\t\n\tAbstractPouchDB.prototype.id = adapterFun('id', function (callback) {\n\t  return this._id(callback);\n\t});\n\t\n\t/* istanbul ignore next */\n\tAbstractPouchDB.prototype.type = function () {\n\t  return (typeof this._type === 'function') ? this._type() : this.adapter;\n\t};\n\t\n\tAbstractPouchDB.prototype.bulkDocs =\n\t  adapterFun('bulkDocs', function (req, opts, callback) {\n\t  if (typeof opts === 'function') {\n\t    callback = opts;\n\t    opts = {};\n\t  }\n\t\n\t  opts = opts || {};\n\t\n\t  if (Array.isArray(req)) {\n\t    req = {\n\t      docs: req\n\t    };\n\t  }\n\t\n\t  if (!req || !req.docs || !Array.isArray(req.docs)) {\n\t    return callback(createError(MISSING_BULK_DOCS));\n\t  }\n\t\n\t  for (var i = 0; i < req.docs.length; ++i) {\n\t    if (typeof req.docs[i] !== 'object' || Array.isArray(req.docs[i])) {\n\t      return callback(createError(NOT_AN_OBJECT));\n\t    }\n\t  }\n\t\n\t  var attachmentError;\n\t  req.docs.forEach(function (doc) {\n\t    if (doc._attachments) {\n\t      Object.keys(doc._attachments).forEach(function (name) {\n\t        attachmentError = attachmentError || attachmentNameError(name);\n\t      });\n\t    }\n\t  });\n\t\n\t  if (attachmentError) {\n\t    return callback(createError(BAD_REQUEST, attachmentError));\n\t  }\n\t\n\t  if (!('new_edits' in opts)) {\n\t    if ('new_edits' in req) {\n\t      opts.new_edits = req.new_edits;\n\t    } else {\n\t      opts.new_edits = true;\n\t    }\n\t  }\n\t\n\t  if (!opts.new_edits && this.type() !== 'http') {\n\t    // ensure revisions of the same doc are sorted, so that\n\t    // the local adapter processes them correctly (#2935)\n\t    req.docs.sort(compareByIdThenRev);\n\t  }\n\t\n\t  cleanDocs(req.docs);\n\t\n\t  return this._bulkDocs(req, opts, function (err, res) {\n\t    if (err) {\n\t      return callback(err);\n\t    }\n\t    if (!opts.new_edits) {\n\t      // this is what couch does when new_edits is false\n\t      res = res.filter(function (x) {\n\t        return x.error;\n\t      });\n\t    }\n\t    callback(null, res);\n\t  });\n\t});\n\t\n\tAbstractPouchDB.prototype.registerDependentDatabase =\n\t  adapterFun('registerDependentDatabase', function (dependentDb,\n\t                                                          callback) {\n\t  var depDB = new this.constructor(dependentDb, this.__opts);\n\t\n\t  function diffFun(doc) {\n\t    doc.dependentDbs = doc.dependentDbs || {};\n\t    if (doc.dependentDbs[dependentDb]) {\n\t      return false; // no update required\n\t    }\n\t    doc.dependentDbs[dependentDb] = true;\n\t    return doc;\n\t  }\n\t  upsert(this, '_local/_pouch_dependentDbs', diffFun)\n\t    .then(function () {\n\t      callback(null, {db: depDB});\n\t    }).catch(callback);\n\t});\n\t\n\tAbstractPouchDB.prototype.destroy =\n\t  adapterFun('destroy', function (opts, callback) {\n\t\n\t  if (typeof opts === 'function') {\n\t    callback = opts;\n\t    opts = {};\n\t  }\n\t\n\t  var self = this;\n\t  var usePrefix = 'use_prefix' in self ? self.use_prefix : true;\n\t\n\t  function destroyDb() {\n\t    // call destroy method of the particular adaptor\n\t    self._destroy(opts, function (err, resp) {\n\t      if (err) {\n\t        return callback(err);\n\t      }\n\t      self._destroyed = true;\n\t      self.emit('destroyed');\n\t      callback(null, resp || { 'ok': true });\n\t    });\n\t  }\n\t\n\t  if (self.type() === 'http') {\n\t    // no need to check for dependent DBs if it's a remote DB\n\t    return destroyDb();\n\t  }\n\t\n\t  self.get('_local/_pouch_dependentDbs', function (err, localDoc) {\n\t    if (err) {\n\t      /* istanbul ignore if */\n\t      if (err.status !== 404) {\n\t        return callback(err);\n\t      } else { // no dependencies\n\t        return destroyDb();\n\t      }\n\t    }\n\t    var dependentDbs = localDoc.dependentDbs;\n\t    var PouchDB = self.constructor;\n\t    var deletedMap = Object.keys(dependentDbs).map(function (name) {\n\t      // use_prefix is only false in the browser\n\t      /* istanbul ignore next */\n\t      var trueName = usePrefix ?\n\t        name.replace(new RegExp('^' + PouchDB.prefix), '') : name;\n\t      return new PouchDB(trueName, self.__opts).destroy();\n\t    });\n\t    PouchPromise.all(deletedMap).then(destroyDb, callback);\n\t  });\n\t});\n\t\n\tfunction TaskQueue() {\n\t  this.isReady = false;\n\t  this.failed = false;\n\t  this.queue = [];\n\t}\n\t\n\tTaskQueue.prototype.execute = function () {\n\t  var fun;\n\t  if (this.failed) {\n\t    while ((fun = this.queue.shift())) {\n\t      fun(this.failed);\n\t    }\n\t  } else {\n\t    while ((fun = this.queue.shift())) {\n\t      fun();\n\t    }\n\t  }\n\t};\n\t\n\tTaskQueue.prototype.fail = function (err) {\n\t  this.failed = err;\n\t  this.execute();\n\t};\n\t\n\tTaskQueue.prototype.ready = function (db) {\n\t  this.isReady = true;\n\t  this.db = db;\n\t  this.execute();\n\t};\n\t\n\tTaskQueue.prototype.addTask = function (fun) {\n\t  this.queue.push(fun);\n\t  if (this.failed) {\n\t    this.execute();\n\t  }\n\t};\n\t\n\tfunction parseAdapter(name, opts) {\n\t  var match = name.match(/([a-z\\-]*):\\/\\/(.*)/);\n\t  if (match) {\n\t    // the http adapter expects the fully qualified name\n\t    name = /http(s?)/.test(match[1]) ? match[1] + '://' + match[2] : match[2];\n\t    return {name: name, adapter: match[1]};\n\t  }\n\t\n\t  // check for browsers that have been upgraded from websql-only to websql+idb\n\t  var skipIdb = 'idb' in PouchDB.adapters && 'websql' in PouchDB.adapters &&\n\t    hasLocalStorage() &&\n\t    localStorage['_pouch__websqldb_' + PouchDB.prefix + name];\n\t\n\t  var adapterName;\n\t\n\t  if (opts.adapter) {\n\t    adapterName = opts.adapter;\n\t  } else if (typeof opts !== 'undefined' && opts.db) {\n\t    adapterName = 'leveldb';\n\t  } else { // automatically determine adapter\n\t    for (var i = 0; i < PouchDB.preferredAdapters.length; ++i) {\n\t      adapterName = PouchDB.preferredAdapters[i];\n\t      /* istanbul ignore if */\n\t      if (skipIdb && adapterName === 'idb') {\n\t        // log it, because this can be confusing during development\n\t        guardedConsole('log', 'PouchDB is downgrading \"' + name + '\" to WebSQL to' +\n\t          ' avoid data loss, because it was already opened with WebSQL.');\n\t        continue; // keep using websql to avoid user data loss\n\t      }\n\t      break;\n\t    }\n\t  }\n\t\n\t  var adapter = PouchDB.adapters[adapterName];\n\t\n\t  // if adapter is invalid, then an error will be thrown later\n\t  var usePrefix = (adapter && 'use_prefix' in adapter) ?\n\t    adapter.use_prefix : true;\n\t\n\t  return {\n\t    name: usePrefix ? (PouchDB.prefix + name) : name,\n\t    adapter: adapterName\n\t  };\n\t}\n\t\n\t// OK, so here's the deal. Consider this code:\n\t//     var db1 = new PouchDB('foo');\n\t//     var db2 = new PouchDB('foo');\n\t//     db1.destroy();\n\t// ^ these two both need to emit 'destroyed' events,\n\t// as well as the PouchDB constructor itself.\n\t// So we have one db object (whichever one got destroy() called on it)\n\t// responsible for emitting the initial event, which then gets emitted\n\t// by the constructor, which then broadcasts it to any other dbs\n\t// that may have been created with the same name.\n\tfunction prepareForDestruction(self) {\n\t\n\t  var destructionListeners = self.constructor._destructionListeners;\n\t\n\t  function onDestroyed() {\n\t    self.constructor.emit('destroyed', self.name);\n\t  }\n\t\n\t  function onConstructorDestroyed() {\n\t    self.removeListener('destroyed', onDestroyed);\n\t    self.emit('destroyed', self);\n\t  }\n\t\n\t  self.once('destroyed', onDestroyed);\n\t\n\t  // in setup.js, the constructor is primed to listen for destroy events\n\t  if (!destructionListeners.has(self.name)) {\n\t    destructionListeners.set(self.name, []);\n\t  }\n\t  destructionListeners.get(self.name).push(onConstructorDestroyed);\n\t}\n\t\n\tinherits(PouchDB, AbstractPouchDB);\n\tfunction PouchDB(name, opts) {\n\t  // In Node our test suite only tests this for PouchAlt unfortunately\n\t  /* istanbul ignore if */\n\t  if (!(this instanceof PouchDB)) {\n\t    return new PouchDB(name, opts);\n\t  }\n\t\n\t  var self = this;\n\t  opts = opts || {};\n\t\n\t  if (name && typeof name === 'object') {\n\t    opts = name;\n\t    name = opts.name;\n\t    delete opts.name;\n\t  }\n\t\n\t  this.__opts = opts = clone(opts);\n\t\n\t  self.auto_compaction = opts.auto_compaction;\n\t  self.prefix = PouchDB.prefix;\n\t\n\t  if (typeof name !== 'string') {\n\t    throw new Error('Missing/invalid DB name');\n\t  }\n\t\n\t  var prefixedName = (opts.prefix || '') + name;\n\t  var backend = parseAdapter(prefixedName, opts);\n\t\n\t  opts.name = backend.name;\n\t  opts.adapter = opts.adapter || backend.adapter;\n\t\n\t  self.name = name;\n\t  self._adapter = opts.adapter;\n\t  debug('pouchdb:adapter')('Picked adapter: ' + opts.adapter);\n\t\n\t  if (!PouchDB.adapters[opts.adapter] ||\n\t      !PouchDB.adapters[opts.adapter].valid()) {\n\t    throw new Error('Invalid Adapter: ' + opts.adapter);\n\t  }\n\t\n\t  AbstractPouchDB.call(self);\n\t  self.taskqueue = new TaskQueue();\n\t\n\t  self.adapter = opts.adapter;\n\t\n\t  PouchDB.adapters[opts.adapter].call(self, opts, function (err) {\n\t    if (err) {\n\t      return self.taskqueue.fail(err);\n\t    }\n\t    prepareForDestruction(self);\n\t\n\t    self.emit('created', self);\n\t    PouchDB.emit('created', self.name);\n\t    self.taskqueue.ready(self);\n\t  });\n\t\n\t}\n\t\n\tPouchDB.debug = debug;\n\t\n\tPouchDB.adapters = {};\n\tPouchDB.preferredAdapters = [];\n\t\n\tPouchDB.prefix = '_pouch_';\n\t\n\tvar eventEmitter = new events.EventEmitter();\n\t\n\tfunction setUpEventEmitter(Pouch) {\n\t  Object.keys(events.EventEmitter.prototype).forEach(function (key) {\n\t    if (typeof events.EventEmitter.prototype[key] === 'function') {\n\t      Pouch[key] = eventEmitter[key].bind(eventEmitter);\n\t    }\n\t  });\n\t\n\t  // these are created in constructor.js, and allow us to notify each DB with\n\t  // the same name that it was destroyed, via the constructor object\n\t  var destructListeners = Pouch._destructionListeners = new _Map();\n\t  Pouch.on('destroyed', function onConstructorDestroyed(name) {\n\t    destructListeners.get(name).forEach(function (callback) {\n\t      callback();\n\t    });\n\t    destructListeners.delete(name);\n\t  });\n\t}\n\t\n\tsetUpEventEmitter(PouchDB);\n\t\n\tPouchDB.adapter = function (id, obj, addToPreferredAdapters) {\n\t  /* istanbul ignore else */\n\t  if (obj.valid()) {\n\t    PouchDB.adapters[id] = obj;\n\t    if (addToPreferredAdapters) {\n\t      PouchDB.preferredAdapters.push(id);\n\t    }\n\t  }\n\t};\n\t\n\tPouchDB.plugin = function (obj) {\n\t  if (typeof obj === 'function') { // function style for plugins\n\t    obj(PouchDB);\n\t  } else if (typeof obj !== 'object' || Object.keys(obj).length === 0){\n\t    throw new Error('Invalid plugin: object passed in is empty or not an object');\n\t  } else {\n\t    Object.keys(obj).forEach(function (id) { // object style for plugins\n\t      PouchDB.prototype[id] = obj[id];\n\t    });\n\t  }\n\t  return PouchDB;\n\t};\n\t\n\tPouchDB.defaults = function (defaultOpts) {\n\t  function PouchAlt(name, opts) {\n\t    if (!(this instanceof PouchAlt)) {\n\t      return new PouchAlt(name, opts);\n\t    }\n\t\n\t    opts = opts || {};\n\t\n\t    if (name && typeof name === 'object') {\n\t      opts = name;\n\t      name = opts.name;\n\t      delete opts.name;\n\t    }\n\t\n\t    opts = jsExtend.extend({}, defaultOpts, opts);\n\t    PouchDB.call(this, name, opts);\n\t  }\n\t\n\t  inherits(PouchAlt, PouchDB);\n\t\n\t  PouchAlt.preferredAdapters = PouchDB.preferredAdapters.slice();\n\t  Object.keys(PouchDB).forEach(function (key) {\n\t    if (!(key in PouchAlt)) {\n\t      PouchAlt[key] = PouchDB[key];\n\t    }\n\t  });\n\t\n\t  return PouchAlt;\n\t};\n\t\n\t// managed automatically by set-version.js\n\tvar version = \"6.0.6\";\n\t\n\tPouchDB.version = version;\n\t\n\tfunction toObject(array) {\n\t  return array.reduce(function (obj, item) {\n\t    obj[item] = true;\n\t    return obj;\n\t  }, {});\n\t}\n\t// List of top level reserved words for doc\n\tvar reservedWords = toObject([\n\t  '_id',\n\t  '_rev',\n\t  '_attachments',\n\t  '_deleted',\n\t  '_revisions',\n\t  '_revs_info',\n\t  '_conflicts',\n\t  '_deleted_conflicts',\n\t  '_local_seq',\n\t  '_rev_tree',\n\t  //replication documents\n\t  '_replication_id',\n\t  '_replication_state',\n\t  '_replication_state_time',\n\t  '_replication_state_reason',\n\t  '_replication_stats',\n\t  // Specific to Couchbase Sync Gateway\n\t  '_removed'\n\t]);\n\t\n\t// List of reserved words that should end up the document\n\tvar dataWords = toObject([\n\t  '_attachments',\n\t  //replication documents\n\t  '_replication_id',\n\t  '_replication_state',\n\t  '_replication_state_time',\n\t  '_replication_state_reason',\n\t  '_replication_stats'\n\t]);\n\t\n\tfunction parseRevisionInfo(rev) {\n\t  if (!/^\\d+\\-./.test(rev)) {\n\t    return createError(INVALID_REV);\n\t  }\n\t  var idx = rev.indexOf('-');\n\t  var left = rev.substring(0, idx);\n\t  var right = rev.substring(idx + 1);\n\t  return {\n\t    prefix: parseInt(left, 10),\n\t    id: right\n\t  };\n\t}\n\t\n\tfunction makeRevTreeFromRevisions(revisions, opts) {\n\t  var pos = revisions.start - revisions.ids.length + 1;\n\t\n\t  var revisionIds = revisions.ids;\n\t  var ids = [revisionIds[0], opts, []];\n\t\n\t  for (var i = 1, len = revisionIds.length; i < len; i++) {\n\t    ids = [revisionIds[i], {status: 'missing'}, [ids]];\n\t  }\n\t\n\t  return [{\n\t    pos: pos,\n\t    ids: ids\n\t  }];\n\t}\n\t\n\t// Preprocess documents, parse their revisions, assign an id and a\n\t// revision for new writes that are missing them, etc\n\tfunction parseDoc(doc, newEdits) {\n\t\n\t  var nRevNum;\n\t  var newRevId;\n\t  var revInfo;\n\t  var opts = {status: 'available'};\n\t  if (doc._deleted) {\n\t    opts.deleted = true;\n\t  }\n\t\n\t  if (newEdits) {\n\t    if (!doc._id) {\n\t      doc._id = uuid();\n\t    }\n\t    newRevId = uuid(32, 16).toLowerCase();\n\t    if (doc._rev) {\n\t      revInfo = parseRevisionInfo(doc._rev);\n\t      if (revInfo.error) {\n\t        return revInfo;\n\t      }\n\t      doc._rev_tree = [{\n\t        pos: revInfo.prefix,\n\t        ids: [revInfo.id, {status: 'missing'}, [[newRevId, opts, []]]]\n\t      }];\n\t      nRevNum = revInfo.prefix + 1;\n\t    } else {\n\t      doc._rev_tree = [{\n\t        pos: 1,\n\t        ids : [newRevId, opts, []]\n\t      }];\n\t      nRevNum = 1;\n\t    }\n\t  } else {\n\t    if (doc._revisions) {\n\t      doc._rev_tree = makeRevTreeFromRevisions(doc._revisions, opts);\n\t      nRevNum = doc._revisions.start;\n\t      newRevId = doc._revisions.ids[0];\n\t    }\n\t    if (!doc._rev_tree) {\n\t      revInfo = parseRevisionInfo(doc._rev);\n\t      if (revInfo.error) {\n\t        return revInfo;\n\t      }\n\t      nRevNum = revInfo.prefix;\n\t      newRevId = revInfo.id;\n\t      doc._rev_tree = [{\n\t        pos: nRevNum,\n\t        ids: [newRevId, opts, []]\n\t      }];\n\t    }\n\t  }\n\t\n\t  invalidIdError(doc._id);\n\t\n\t  doc._rev = nRevNum + '-' + newRevId;\n\t\n\t  var result = {metadata : {}, data : {}};\n\t  for (var key in doc) {\n\t    /* istanbul ignore else */\n\t    if (Object.prototype.hasOwnProperty.call(doc, key)) {\n\t      var specialKey = key[0] === '_';\n\t      if (specialKey && !reservedWords[key]) {\n\t        var error = createError(DOC_VALIDATION, key);\n\t        error.message = DOC_VALIDATION.message + ': ' + key;\n\t        throw error;\n\t      } else if (specialKey && !dataWords[key]) {\n\t        result.metadata[key.slice(1)] = doc[key];\n\t      } else {\n\t        result.data[key] = doc[key];\n\t      }\n\t    }\n\t  }\n\t  return result;\n\t}\n\t\n\tvar atob$1 = function (str) {\n\t  return atob(str);\n\t};\n\t\n\tvar btoa$1 = function (str) {\n\t  return btoa(str);\n\t};\n\t\n\t// Abstracts constructing a Blob object, so it also works in older\n\t// browsers that don't support the native Blob constructor (e.g.\n\t// old QtWebKit versions, Android < 4.4).\n\tfunction createBlob(parts, properties) {\n\t  /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n\t  parts = parts || [];\n\t  properties = properties || {};\n\t  try {\n\t    return new Blob(parts, properties);\n\t  } catch (e) {\n\t    if (e.name !== \"TypeError\") {\n\t      throw e;\n\t    }\n\t    var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder :\n\t                  typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder :\n\t                  typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder :\n\t                  WebKitBlobBuilder;\n\t    var builder = new Builder();\n\t    for (var i = 0; i < parts.length; i += 1) {\n\t      builder.append(parts[i]);\n\t    }\n\t    return builder.getBlob(properties.type);\n\t  }\n\t}\n\t\n\t// From http://stackoverflow.com/questions/14967647/ (continues on next line)\n\t// encode-decode-image-with-base64-breaks-image (2013-04-21)\n\tfunction binaryStringToArrayBuffer(bin) {\n\t  var length = bin.length;\n\t  var buf = new ArrayBuffer(length);\n\t  var arr = new Uint8Array(buf);\n\t  for (var i = 0; i < length; i++) {\n\t    arr[i] = bin.charCodeAt(i);\n\t  }\n\t  return buf;\n\t}\n\t\n\tfunction binStringToBluffer(binString, type) {\n\t  return createBlob([binaryStringToArrayBuffer(binString)], {type: type});\n\t}\n\t\n\tfunction b64ToBluffer(b64, type) {\n\t  return binStringToBluffer(atob$1(b64), type);\n\t}\n\t\n\t//Can't find original post, but this is close\n\t//http://stackoverflow.com/questions/6965107/ (continues on next line)\n\t//converting-between-strings-and-arraybuffers\n\tfunction arrayBufferToBinaryString(buffer) {\n\t  var binary = '';\n\t  var bytes = new Uint8Array(buffer);\n\t  var length = bytes.byteLength;\n\t  for (var i = 0; i < length; i++) {\n\t    binary += String.fromCharCode(bytes[i]);\n\t  }\n\t  return binary;\n\t}\n\t\n\t// shim for browsers that don't support it\n\tfunction readAsBinaryString(blob, callback) {\n\t  if (typeof FileReader === 'undefined') {\n\t    // fix for Firefox in a web worker\n\t    // https://bugzilla.mozilla.org/show_bug.cgi?id=901097\n\t    return callback(arrayBufferToBinaryString(\n\t      new FileReaderSync().readAsArrayBuffer(blob)));\n\t  }\n\t\n\t  var reader = new FileReader();\n\t  var hasBinaryString = typeof reader.readAsBinaryString === 'function';\n\t  reader.onloadend = function (e) {\n\t    var result = e.target.result || '';\n\t    if (hasBinaryString) {\n\t      return callback(result);\n\t    }\n\t    callback(arrayBufferToBinaryString(result));\n\t  };\n\t  if (hasBinaryString) {\n\t    reader.readAsBinaryString(blob);\n\t  } else {\n\t    reader.readAsArrayBuffer(blob);\n\t  }\n\t}\n\t\n\tfunction blobToBinaryString(blobOrBuffer, callback) {\n\t  readAsBinaryString(blobOrBuffer, function (bin) {\n\t    callback(bin);\n\t  });\n\t}\n\t\n\tfunction blobToBase64(blobOrBuffer, callback) {\n\t  blobToBinaryString(blobOrBuffer, function (base64) {\n\t    callback(btoa$1(base64));\n\t  });\n\t}\n\t\n\t// simplified API. universal browser support is assumed\n\tfunction readAsArrayBuffer(blob, callback) {\n\t  if (typeof FileReader === 'undefined') {\n\t    // fix for Firefox in a web worker:\n\t    // https://bugzilla.mozilla.org/show_bug.cgi?id=901097\n\t    return callback(new FileReaderSync().readAsArrayBuffer(blob));\n\t  }\n\t\n\t  var reader = new FileReader();\n\t  reader.onloadend = function (e) {\n\t    var result = e.target.result || new ArrayBuffer(0);\n\t    callback(result);\n\t  };\n\t  reader.readAsArrayBuffer(blob);\n\t}\n\t\n\tvar setImmediateShim = global.setImmediate || global.setTimeout;\n\tvar MD5_CHUNK_SIZE = 32768;\n\t\n\tfunction rawToBase64(raw) {\n\t  return btoa$1(raw);\n\t}\n\t\n\tfunction sliceBlob(blob, start, end) {\n\t  if (blob.webkitSlice) {\n\t    return blob.webkitSlice(start, end);\n\t  }\n\t  return blob.slice(start, end);\n\t}\n\t\n\tfunction appendBlob(buffer, blob, start, end, callback) {\n\t  if (start > 0 || end < blob.size) {\n\t    // only slice blob if we really need to\n\t    blob = sliceBlob(blob, start, end);\n\t  }\n\t  readAsArrayBuffer(blob, function (arrayBuffer) {\n\t    buffer.append(arrayBuffer);\n\t    callback();\n\t  });\n\t}\n\t\n\tfunction appendString(buffer, string, start, end, callback) {\n\t  if (start > 0 || end < string.length) {\n\t    // only create a substring if we really need to\n\t    string = string.substring(start, end);\n\t  }\n\t  buffer.appendBinary(string);\n\t  callback();\n\t}\n\t\n\tfunction binaryMd5(data, callback) {\n\t  var inputIsString = typeof data === 'string';\n\t  var len = inputIsString ? data.length : data.size;\n\t  var chunkSize = Math.min(MD5_CHUNK_SIZE, len);\n\t  var chunks = Math.ceil(len / chunkSize);\n\t  var currentChunk = 0;\n\t  var buffer = inputIsString ? new Md5() : new Md5.ArrayBuffer();\n\t\n\t  var append = inputIsString ? appendString : appendBlob;\n\t\n\t  function next() {\n\t    setImmediateShim(loadNextChunk);\n\t  }\n\t\n\t  function done() {\n\t    var raw = buffer.end(true);\n\t    var base64 = rawToBase64(raw);\n\t    callback(base64);\n\t    buffer.destroy();\n\t  }\n\t\n\t  function loadNextChunk() {\n\t    var start = currentChunk * chunkSize;\n\t    var end = start + chunkSize;\n\t    currentChunk++;\n\t    if (currentChunk < chunks) {\n\t      append(buffer, data, start, end, next);\n\t    } else {\n\t      append(buffer, data, start, end, done);\n\t    }\n\t  }\n\t  loadNextChunk();\n\t}\n\t\n\tfunction stringMd5(string) {\n\t  return Md5.hash(string);\n\t}\n\t\n\tfunction parseBase64(data) {\n\t  try {\n\t    return atob$1(data);\n\t  } catch (e) {\n\t    var err = createError(BAD_ARG,\n\t      'Attachment is not a valid base64 string');\n\t    return {error: err};\n\t  }\n\t}\n\t\n\tfunction preprocessString(att, blobType, callback) {\n\t  var asBinary = parseBase64(att.data);\n\t  if (asBinary.error) {\n\t    return callback(asBinary.error);\n\t  }\n\t\n\t  att.length = asBinary.length;\n\t  if (blobType === 'blob') {\n\t    att.data = binStringToBluffer(asBinary, att.content_type);\n\t  } else if (blobType === 'base64') {\n\t    att.data = btoa$1(asBinary);\n\t  } else { // binary\n\t    att.data = asBinary;\n\t  }\n\t  binaryMd5(asBinary, function (result) {\n\t    att.digest = 'md5-' + result;\n\t    callback();\n\t  });\n\t}\n\t\n\tfunction preprocessBlob(att, blobType, callback) {\n\t  binaryMd5(att.data, function (md5) {\n\t    att.digest = 'md5-' + md5;\n\t    // size is for blobs (browser), length is for buffers (node)\n\t    att.length = att.data.size || att.data.length || 0;\n\t    if (blobType === 'binary') {\n\t      blobToBinaryString(att.data, function (binString) {\n\t        att.data = binString;\n\t        callback();\n\t      });\n\t    } else if (blobType === 'base64') {\n\t      blobToBase64(att.data, function (b64) {\n\t        att.data = b64;\n\t        callback();\n\t      });\n\t    } else {\n\t      callback();\n\t    }\n\t  });\n\t}\n\t\n\tfunction preprocessAttachment(att, blobType, callback) {\n\t  if (att.stub) {\n\t    return callback();\n\t  }\n\t  if (typeof att.data === 'string') { // input is a base64 string\n\t    preprocessString(att, blobType, callback);\n\t  } else { // input is a blob\n\t    preprocessBlob(att, blobType, callback);\n\t  }\n\t}\n\t\n\tfunction preprocessAttachments(docInfos, blobType, callback) {\n\t\n\t  if (!docInfos.length) {\n\t    return callback();\n\t  }\n\t\n\t  var docv = 0;\n\t  var overallErr;\n\t\n\t  docInfos.forEach(function (docInfo) {\n\t    var attachments = docInfo.data && docInfo.data._attachments ?\n\t      Object.keys(docInfo.data._attachments) : [];\n\t    var recv = 0;\n\t\n\t    if (!attachments.length) {\n\t      return done();\n\t    }\n\t\n\t    function processedAttachment(err) {\n\t      overallErr = err;\n\t      recv++;\n\t      if (recv === attachments.length) {\n\t        done();\n\t      }\n\t    }\n\t\n\t    for (var key in docInfo.data._attachments) {\n\t      if (docInfo.data._attachments.hasOwnProperty(key)) {\n\t        preprocessAttachment(docInfo.data._attachments[key],\n\t          blobType, processedAttachment);\n\t      }\n\t    }\n\t  });\n\t\n\t  function done() {\n\t    docv++;\n\t    if (docInfos.length === docv) {\n\t      if (overallErr) {\n\t        callback(overallErr);\n\t      } else {\n\t        callback();\n\t      }\n\t    }\n\t  }\n\t}\n\t\n\tfunction updateDoc(revLimit, prev, docInfo, results,\n\t                   i, cb, writeDoc, newEdits) {\n\t\n\t  if (revExists(prev.rev_tree, docInfo.metadata.rev)) {\n\t    results[i] = docInfo;\n\t    return cb();\n\t  }\n\t\n\t  // sometimes this is pre-calculated. historically not always\n\t  var previousWinningRev = prev.winningRev || winningRev(prev);\n\t  var previouslyDeleted = 'deleted' in prev ? prev.deleted :\n\t    isDeleted(prev, previousWinningRev);\n\t  var deleted = 'deleted' in docInfo.metadata ? docInfo.metadata.deleted :\n\t    isDeleted(docInfo.metadata);\n\t  var isRoot = /^1-/.test(docInfo.metadata.rev);\n\t\n\t  if (previouslyDeleted && !deleted && newEdits && isRoot) {\n\t    var newDoc = docInfo.data;\n\t    newDoc._rev = previousWinningRev;\n\t    newDoc._id = docInfo.metadata.id;\n\t    docInfo = parseDoc(newDoc, newEdits);\n\t  }\n\t\n\t  var merged = merge(prev.rev_tree, docInfo.metadata.rev_tree[0], revLimit);\n\t\n\t  var inConflict = newEdits && (((previouslyDeleted && deleted) ||\n\t    (!previouslyDeleted && merged.conflicts !== 'new_leaf') ||\n\t    (previouslyDeleted && !deleted && merged.conflicts === 'new_branch')));\n\t\n\t  if (inConflict) {\n\t    var err = createError(REV_CONFLICT);\n\t    results[i] = err;\n\t    return cb();\n\t  }\n\t\n\t  var newRev = docInfo.metadata.rev;\n\t  docInfo.metadata.rev_tree = merged.tree;\n\t  docInfo.stemmedRevs = merged.stemmedRevs || [];\n\t  /* istanbul ignore else */\n\t  if (prev.rev_map) {\n\t    docInfo.metadata.rev_map = prev.rev_map; // used only by leveldb\n\t  }\n\t\n\t  // recalculate\n\t  var winningRev$$ = winningRev(docInfo.metadata);\n\t  var winningRevIsDeleted = isDeleted(docInfo.metadata, winningRev$$);\n\t\n\t  // calculate the total number of documents that were added/removed,\n\t  // from the perspective of total_rows/doc_count\n\t  var delta = (previouslyDeleted === winningRevIsDeleted) ? 0 :\n\t    previouslyDeleted < winningRevIsDeleted ? -1 : 1;\n\t\n\t  var newRevIsDeleted;\n\t  if (newRev === winningRev$$) {\n\t    // if the new rev is the same as the winning rev, we can reuse that value\n\t    newRevIsDeleted = winningRevIsDeleted;\n\t  } else {\n\t    // if they're not the same, then we need to recalculate\n\t    newRevIsDeleted = isDeleted(docInfo.metadata, newRev);\n\t  }\n\t\n\t  writeDoc(docInfo, winningRev$$, winningRevIsDeleted, newRevIsDeleted,\n\t    true, delta, i, cb);\n\t}\n\t\n\tfunction rootIsMissing(docInfo) {\n\t  return docInfo.metadata.rev_tree[0].ids[1].status === 'missing';\n\t}\n\t\n\tfunction processDocs(revLimit, docInfos, api, fetchedDocs, tx, results,\n\t                     writeDoc, opts, overallCallback) {\n\t\n\t  // Default to 1000 locally\n\t  revLimit = revLimit || 1000;\n\t\n\t  function insertDoc(docInfo, resultsIdx, callback) {\n\t    // Cant insert new deleted documents\n\t    var winningRev$$ = winningRev(docInfo.metadata);\n\t    var deleted = isDeleted(docInfo.metadata, winningRev$$);\n\t    if ('was_delete' in opts && deleted) {\n\t      results[resultsIdx] = createError(MISSING_DOC, 'deleted');\n\t      return callback();\n\t    }\n\t\n\t    // 4712 - detect whether a new document was inserted with a _rev\n\t    var inConflict = newEdits && rootIsMissing(docInfo);\n\t\n\t    if (inConflict) {\n\t      var err = createError(REV_CONFLICT);\n\t      results[resultsIdx] = err;\n\t      return callback();\n\t    }\n\t\n\t    var delta = deleted ? 0 : 1;\n\t\n\t    writeDoc(docInfo, winningRev$$, deleted, deleted, false,\n\t      delta, resultsIdx, callback);\n\t  }\n\t\n\t  var newEdits = opts.new_edits;\n\t  var idsToDocs = new _Map();\n\t\n\t  var docsDone = 0;\n\t  var docsToDo = docInfos.length;\n\t\n\t  function checkAllDocsDone() {\n\t    if (++docsDone === docsToDo && overallCallback) {\n\t      overallCallback();\n\t    }\n\t  }\n\t\n\t  docInfos.forEach(function (currentDoc, resultsIdx) {\n\t\n\t    if (currentDoc._id && isLocalId(currentDoc._id)) {\n\t      var fun = currentDoc._deleted ? '_removeLocal' : '_putLocal';\n\t      api[fun](currentDoc, {ctx: tx}, function (err, res) {\n\t        results[resultsIdx] = err || res;\n\t        checkAllDocsDone();\n\t      });\n\t      return;\n\t    }\n\t\n\t    var id = currentDoc.metadata.id;\n\t    if (idsToDocs.has(id)) {\n\t      docsToDo--; // duplicate\n\t      idsToDocs.get(id).push([currentDoc, resultsIdx]);\n\t    } else {\n\t      idsToDocs.set(id, [[currentDoc, resultsIdx]]);\n\t    }\n\t  });\n\t\n\t  // in the case of new_edits, the user can provide multiple docs\n\t  // with the same id. these need to be processed sequentially\n\t  idsToDocs.forEach(function (docs, id) {\n\t    var numDone = 0;\n\t\n\t    function docWritten() {\n\t      if (++numDone < docs.length) {\n\t        nextDoc();\n\t      } else {\n\t        checkAllDocsDone();\n\t      }\n\t    }\n\t    function nextDoc() {\n\t      var value = docs[numDone];\n\t      var currentDoc = value[0];\n\t      var resultsIdx = value[1];\n\t\n\t      if (fetchedDocs.has(id)) {\n\t        updateDoc(revLimit, fetchedDocs.get(id), currentDoc, results,\n\t          resultsIdx, docWritten, writeDoc, newEdits);\n\t      } else {\n\t        // Ensure stemming applies to new writes as well\n\t        var merged = merge([], currentDoc.metadata.rev_tree[0], revLimit);\n\t        currentDoc.metadata.rev_tree = merged.tree;\n\t        currentDoc.stemmedRevs = merged.stemmedRevs || [];\n\t        insertDoc(currentDoc, resultsIdx, docWritten);\n\t      }\n\t    }\n\t    nextDoc();\n\t  });\n\t}\n\t\n\t// IndexedDB requires a versioned database structure, so we use the\n\t// version here to manage migrations.\n\tvar ADAPTER_VERSION = 5;\n\t\n\t// The object stores created for each database\n\t// DOC_STORE stores the document meta data, its revision history and state\n\t// Keyed by document id\n\tvar DOC_STORE = 'document-store';\n\t// BY_SEQ_STORE stores a particular version of a document, keyed by its\n\t// sequence id\n\tvar BY_SEQ_STORE = 'by-sequence';\n\t// Where we store attachments\n\tvar ATTACH_STORE = 'attach-store';\n\t// Where we store many-to-many relations\n\t// between attachment digests and seqs\n\tvar ATTACH_AND_SEQ_STORE = 'attach-seq-store';\n\t\n\t// Where we store database-wide meta data in a single record\n\t// keyed by id: META_STORE\n\tvar META_STORE = 'meta-store';\n\t// Where we store local documents\n\tvar LOCAL_STORE = 'local-store';\n\t// Where we detect blob support\n\tvar DETECT_BLOB_SUPPORT_STORE = 'detect-blob-support';\n\t\n\tfunction slowJsonParse(str) {\n\t  try {\n\t    return JSON.parse(str);\n\t  } catch (e) {\n\t    /* istanbul ignore next */\n\t    return vuvuzela.parse(str);\n\t  }\n\t}\n\t\n\tfunction safeJsonParse(str) {\n\t  // try/catch is deoptimized in V8, leading to slower\n\t  // times than we'd like to have. Most documents are _not_\n\t  // huge, and do not require a slower code path just to parse them.\n\t  // We can be pretty sure that a document under 50000 characters\n\t  // will not be so deeply nested as to throw a stack overflow error\n\t  // (depends on the engine and available memory, though, so this is\n\t  // just a hunch). 50000 was chosen based on the average length\n\t  // of this string in our test suite, to try to find a number that covers\n\t  // most of our test cases (26 over this size, 26378 under it).\n\t  if (str.length < 50000) {\n\t    return JSON.parse(str);\n\t  }\n\t  return slowJsonParse(str);\n\t}\n\t\n\tfunction safeJsonStringify(json) {\n\t  try {\n\t    return JSON.stringify(json);\n\t  } catch (e) {\n\t    /* istanbul ignore next */\n\t    return vuvuzela.stringify(json);\n\t  }\n\t}\n\t\n\tfunction tryCode(fun, that, args, PouchDB) {\n\t  try {\n\t    fun.apply(that, args);\n\t  } catch (err) {\n\t    // Shouldn't happen, but in some odd cases\n\t    // IndexedDB implementations might throw a sync\n\t    // error, in which case this will at least log it.\n\t    PouchDB.emit('error', err);\n\t  }\n\t}\n\t\n\tvar taskQueue = {\n\t  running: false,\n\t  queue: []\n\t};\n\t\n\tfunction applyNext(PouchDB) {\n\t  if (taskQueue.running || !taskQueue.queue.length) {\n\t    return;\n\t  }\n\t  taskQueue.running = true;\n\t  var item = taskQueue.queue.shift();\n\t  item.action(function (err, res) {\n\t    tryCode(item.callback, this, [err, res], PouchDB);\n\t    taskQueue.running = false;\n\t    process.nextTick(function () {\n\t      applyNext(PouchDB);\n\t    });\n\t  });\n\t}\n\t\n\tfunction idbError(callback) {\n\t  return function (evt) {\n\t    var message = 'unknown_error';\n\t    if (evt.target && evt.target.error) {\n\t      message = evt.target.error.name || evt.target.error.message;\n\t    }\n\t    callback(createError(IDB_ERROR, message, evt.type));\n\t  };\n\t}\n\t\n\t// Unfortunately, the metadata has to be stringified\n\t// when it is put into the database, because otherwise\n\t// IndexedDB can throw errors for deeply-nested objects.\n\t// Originally we just used JSON.parse/JSON.stringify; now\n\t// we use this custom vuvuzela library that avoids recursion.\n\t// If we could do it all over again, we'd probably use a\n\t// format for the revision trees other than JSON.\n\tfunction encodeMetadata(metadata, winningRev, deleted) {\n\t  return {\n\t    data: safeJsonStringify(metadata),\n\t    winningRev: winningRev,\n\t    deletedOrLocal: deleted ? '1' : '0',\n\t    seq: metadata.seq, // highest seq for this doc\n\t    id: metadata.id\n\t  };\n\t}\n\t\n\tfunction decodeMetadata(storedObject) {\n\t  if (!storedObject) {\n\t    return null;\n\t  }\n\t  var metadata = safeJsonParse(storedObject.data);\n\t  metadata.winningRev = storedObject.winningRev;\n\t  metadata.deleted = storedObject.deletedOrLocal === '1';\n\t  metadata.seq = storedObject.seq;\n\t  return metadata;\n\t}\n\t\n\t// read the doc back out from the database. we don't store the\n\t// _id or _rev because we already have _doc_id_rev.\n\tfunction decodeDoc(doc) {\n\t  if (!doc) {\n\t    return doc;\n\t  }\n\t  var idx = doc._doc_id_rev.lastIndexOf(':');\n\t  doc._id = doc._doc_id_rev.substring(0, idx - 1);\n\t  doc._rev = doc._doc_id_rev.substring(idx + 1);\n\t  delete doc._doc_id_rev;\n\t  return doc;\n\t}\n\t\n\t// Read a blob from the database, encoding as necessary\n\t// and translating from base64 if the IDB doesn't support\n\t// native Blobs\n\tfunction readBlobData(body, type, asBlob, callback) {\n\t  if (asBlob) {\n\t    if (!body) {\n\t      callback(createBlob([''], {type: type}));\n\t    } else if (typeof body !== 'string') { // we have blob support\n\t      callback(body);\n\t    } else { // no blob support\n\t      callback(b64ToBluffer(body, type));\n\t    }\n\t  } else { // as base64 string\n\t    if (!body) {\n\t      callback('');\n\t    } else if (typeof body !== 'string') { // we have blob support\n\t      readAsBinaryString(body, function (binary) {\n\t        callback(btoa$1(binary));\n\t      });\n\t    } else { // no blob support\n\t      callback(body);\n\t    }\n\t  }\n\t}\n\t\n\tfunction fetchAttachmentsIfNecessary(doc, opts, txn, cb) {\n\t  var attachments = Object.keys(doc._attachments || {});\n\t  if (!attachments.length) {\n\t    return cb && cb();\n\t  }\n\t  var numDone = 0;\n\t\n\t  function checkDone() {\n\t    if (++numDone === attachments.length && cb) {\n\t      cb();\n\t    }\n\t  }\n\t\n\t  function fetchAttachment(doc, att) {\n\t    var attObj = doc._attachments[att];\n\t    var digest = attObj.digest;\n\t    var req = txn.objectStore(ATTACH_STORE).get(digest);\n\t    req.onsuccess = function (e) {\n\t      attObj.body = e.target.result.body;\n\t      checkDone();\n\t    };\n\t  }\n\t\n\t  attachments.forEach(function (att) {\n\t    if (opts.attachments && opts.include_docs) {\n\t      fetchAttachment(doc, att);\n\t    } else {\n\t      doc._attachments[att].stub = true;\n\t      checkDone();\n\t    }\n\t  });\n\t}\n\t\n\t// IDB-specific postprocessing necessary because\n\t// we don't know whether we stored a true Blob or\n\t// a base64-encoded string, and if it's a Blob it\n\t// needs to be read outside of the transaction context\n\tfunction postProcessAttachments(results, asBlob) {\n\t  return PouchPromise.all(results.map(function (row) {\n\t    if (row.doc && row.doc._attachments) {\n\t      var attNames = Object.keys(row.doc._attachments);\n\t      return PouchPromise.all(attNames.map(function (att) {\n\t        var attObj = row.doc._attachments[att];\n\t        if (!('body' in attObj)) { // already processed\n\t          return;\n\t        }\n\t        var body = attObj.body;\n\t        var type = attObj.content_type;\n\t        return new PouchPromise(function (resolve) {\n\t          readBlobData(body, type, asBlob, function (data) {\n\t            row.doc._attachments[att] = jsExtend.extend(\n\t              pick(attObj, ['digest', 'content_type']),\n\t              {data: data}\n\t            );\n\t            resolve();\n\t          });\n\t        });\n\t      }));\n\t    }\n\t  }));\n\t}\n\t\n\tfunction compactRevs(revs, docId, txn) {\n\t\n\t  var possiblyOrphanedDigests = [];\n\t  var seqStore = txn.objectStore(BY_SEQ_STORE);\n\t  var attStore = txn.objectStore(ATTACH_STORE);\n\t  var attAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE);\n\t  var count = revs.length;\n\t\n\t  function checkDone() {\n\t    count--;\n\t    if (!count) { // done processing all revs\n\t      deleteOrphanedAttachments();\n\t    }\n\t  }\n\t\n\t  function deleteOrphanedAttachments() {\n\t    if (!possiblyOrphanedDigests.length) {\n\t      return;\n\t    }\n\t    possiblyOrphanedDigests.forEach(function (digest) {\n\t      var countReq = attAndSeqStore.index('digestSeq').count(\n\t        IDBKeyRange.bound(\n\t          digest + '::', digest + '::\\uffff', false, false));\n\t      countReq.onsuccess = function (e) {\n\t        var count = e.target.result;\n\t        if (!count) {\n\t          // orphaned\n\t          attStore.delete(digest);\n\t        }\n\t      };\n\t    });\n\t  }\n\t\n\t  revs.forEach(function (rev) {\n\t    var index = seqStore.index('_doc_id_rev');\n\t    var key = docId + \"::\" + rev;\n\t    index.getKey(key).onsuccess = function (e) {\n\t      var seq = e.target.result;\n\t      if (typeof seq !== 'number') {\n\t        return checkDone();\n\t      }\n\t      seqStore.delete(seq);\n\t\n\t      var cursor = attAndSeqStore.index('seq')\n\t        .openCursor(IDBKeyRange.only(seq));\n\t\n\t      cursor.onsuccess = function (event) {\n\t        var cursor = event.target.result;\n\t        if (cursor) {\n\t          var digest = cursor.value.digestSeq.split('::')[0];\n\t          possiblyOrphanedDigests.push(digest);\n\t          attAndSeqStore.delete(cursor.primaryKey);\n\t          cursor.continue();\n\t        } else { // done\n\t          checkDone();\n\t        }\n\t      };\n\t    };\n\t  });\n\t}\n\t\n\tfunction openTransactionSafely(idb, stores, mode) {\n\t  try {\n\t    return {\n\t      txn: idb.transaction(stores, mode)\n\t    };\n\t  } catch (err) {\n\t    return {\n\t      error: err\n\t    };\n\t  }\n\t}\n\t\n\tfunction idbBulkDocs(dbOpts, req, opts, api, idb, idbChanges, callback) {\n\t  var docInfos = req.docs;\n\t  var txn;\n\t  var docStore;\n\t  var bySeqStore;\n\t  var attachStore;\n\t  var attachAndSeqStore;\n\t  var docInfoError;\n\t  var docCountDelta = 0;\n\t\n\t  for (var i = 0, len = docInfos.length; i < len; i++) {\n\t    var doc = docInfos[i];\n\t    if (doc._id && isLocalId(doc._id)) {\n\t      continue;\n\t    }\n\t    doc = docInfos[i] = parseDoc(doc, opts.new_edits);\n\t    if (doc.error && !docInfoError) {\n\t      docInfoError = doc;\n\t    }\n\t  }\n\t\n\t  if (docInfoError) {\n\t    return callback(docInfoError);\n\t  }\n\t\n\t  var results = new Array(docInfos.length);\n\t  var fetchedDocs = new _Map();\n\t  var preconditionErrored = false;\n\t  var blobType = api._meta.blobSupport ? 'blob' : 'base64';\n\t\n\t  preprocessAttachments(docInfos, blobType, function (err) {\n\t    if (err) {\n\t      return callback(err);\n\t    }\n\t    startTransaction();\n\t  });\n\t\n\t  function startTransaction() {\n\t\n\t    var stores = [\n\t      DOC_STORE, BY_SEQ_STORE,\n\t      ATTACH_STORE,\n\t      LOCAL_STORE, ATTACH_AND_SEQ_STORE\n\t    ];\n\t    var txnResult = openTransactionSafely(idb, stores, 'readwrite');\n\t    if (txnResult.error) {\n\t      return callback(txnResult.error);\n\t    }\n\t    txn = txnResult.txn;\n\t    txn.onabort = idbError(callback);\n\t    txn.ontimeout = idbError(callback);\n\t    txn.oncomplete = complete;\n\t    docStore = txn.objectStore(DOC_STORE);\n\t    bySeqStore = txn.objectStore(BY_SEQ_STORE);\n\t    attachStore = txn.objectStore(ATTACH_STORE);\n\t    attachAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE);\n\t\n\t    verifyAttachments(function (err) {\n\t      if (err) {\n\t        preconditionErrored = true;\n\t        return callback(err);\n\t      }\n\t      fetchExistingDocs();\n\t    });\n\t  }\n\t\n\t  function idbProcessDocs() {\n\t    processDocs(dbOpts.revs_limit, docInfos, api, fetchedDocs,\n\t                txn, results, writeDoc, opts);\n\t  }\n\t\n\t  function fetchExistingDocs() {\n\t\n\t    if (!docInfos.length) {\n\t      return;\n\t    }\n\t\n\t    var numFetched = 0;\n\t\n\t    function checkDone() {\n\t      if (++numFetched === docInfos.length) {\n\t        idbProcessDocs();\n\t      }\n\t    }\n\t\n\t    function readMetadata(event) {\n\t      var metadata = decodeMetadata(event.target.result);\n\t\n\t      if (metadata) {\n\t        fetchedDocs.set(metadata.id, metadata);\n\t      }\n\t      checkDone();\n\t    }\n\t\n\t    for (var i = 0, len = docInfos.length; i < len; i++) {\n\t      var docInfo = docInfos[i];\n\t      if (docInfo._id && isLocalId(docInfo._id)) {\n\t        checkDone(); // skip local docs\n\t        continue;\n\t      }\n\t      var req = docStore.get(docInfo.metadata.id);\n\t      req.onsuccess = readMetadata;\n\t    }\n\t  }\n\t\n\t  function complete() {\n\t    if (preconditionErrored) {\n\t      return;\n\t    }\n\t\n\t    idbChanges.notify(api._meta.name);\n\t    api._meta.docCount += docCountDelta;\n\t    callback(null, results);\n\t  }\n\t\n\t  function verifyAttachment(digest, callback) {\n\t\n\t    var req = attachStore.get(digest);\n\t    req.onsuccess = function (e) {\n\t      if (!e.target.result) {\n\t        var err = createError(MISSING_STUB,\n\t          'unknown stub attachment with digest ' +\n\t          digest);\n\t        err.status = 412;\n\t        callback(err);\n\t      } else {\n\t        callback();\n\t      }\n\t    };\n\t  }\n\t\n\t  function verifyAttachments(finish) {\n\t\n\t\n\t    var digests = [];\n\t    docInfos.forEach(function (docInfo) {\n\t      if (docInfo.data && docInfo.data._attachments) {\n\t        Object.keys(docInfo.data._attachments).forEach(function (filename) {\n\t          var att = docInfo.data._attachments[filename];\n\t          if (att.stub) {\n\t            digests.push(att.digest);\n\t          }\n\t        });\n\t      }\n\t    });\n\t    if (!digests.length) {\n\t      return finish();\n\t    }\n\t    var numDone = 0;\n\t    var err;\n\t\n\t    function checkDone() {\n\t      if (++numDone === digests.length) {\n\t        finish(err);\n\t      }\n\t    }\n\t    digests.forEach(function (digest) {\n\t      verifyAttachment(digest, function (attErr) {\n\t        if (attErr && !err) {\n\t          err = attErr;\n\t        }\n\t        checkDone();\n\t      });\n\t    });\n\t  }\n\t\n\t  function writeDoc(docInfo, winningRev, winningRevIsDeleted, newRevIsDeleted,\n\t                    isUpdate, delta, resultsIdx, callback) {\n\t\n\t    docCountDelta += delta;\n\t\n\t    docInfo.metadata.winningRev = winningRev;\n\t    docInfo.metadata.deleted = winningRevIsDeleted;\n\t\n\t    var doc = docInfo.data;\n\t    doc._id = docInfo.metadata.id;\n\t    doc._rev = docInfo.metadata.rev;\n\t\n\t    if (newRevIsDeleted) {\n\t      doc._deleted = true;\n\t    }\n\t\n\t    var hasAttachments = doc._attachments &&\n\t      Object.keys(doc._attachments).length;\n\t    if (hasAttachments) {\n\t      return writeAttachments(docInfo, winningRev, winningRevIsDeleted,\n\t        isUpdate, resultsIdx, callback);\n\t    }\n\t\n\t    finishDoc(docInfo, winningRev, winningRevIsDeleted,\n\t      isUpdate, resultsIdx, callback);\n\t  }\n\t\n\t  function finishDoc(docInfo, winningRev, winningRevIsDeleted,\n\t                     isUpdate, resultsIdx, callback) {\n\t\n\t    var doc = docInfo.data;\n\t    var metadata = docInfo.metadata;\n\t\n\t    doc._doc_id_rev = metadata.id + '::' + metadata.rev;\n\t    delete doc._id;\n\t    delete doc._rev;\n\t\n\t    function afterPutDoc(e) {\n\t      var revsToDelete = docInfo.stemmedRevs || [];\n\t\n\t      if (isUpdate && api.auto_compaction) {\n\t        revsToDelete = revsToDelete.concat(compactTree(docInfo.metadata));\n\t      }\n\t\n\t      if (revsToDelete && revsToDelete.length) {\n\t        compactRevs(revsToDelete, docInfo.metadata.id, txn);\n\t      }\n\t\n\t      metadata.seq = e.target.result;\n\t      // Current _rev is calculated from _rev_tree on read\n\t      delete metadata.rev;\n\t      var metadataToStore = encodeMetadata(metadata, winningRev,\n\t        winningRevIsDeleted);\n\t      var metaDataReq = docStore.put(metadataToStore);\n\t      metaDataReq.onsuccess = afterPutMetadata;\n\t    }\n\t\n\t    function afterPutDocError(e) {\n\t      // ConstraintError, need to update, not put (see #1638 for details)\n\t      e.preventDefault(); // avoid transaction abort\n\t      e.stopPropagation(); // avoid transaction onerror\n\t      var index = bySeqStore.index('_doc_id_rev');\n\t      var getKeyReq = index.getKey(doc._doc_id_rev);\n\t      getKeyReq.onsuccess = function (e) {\n\t        var putReq = bySeqStore.put(doc, e.target.result);\n\t        putReq.onsuccess = afterPutDoc;\n\t      };\n\t    }\n\t\n\t    function afterPutMetadata() {\n\t      results[resultsIdx] = {\n\t        ok: true,\n\t        id: metadata.id,\n\t        rev: winningRev\n\t      };\n\t      fetchedDocs.set(docInfo.metadata.id, docInfo.metadata);\n\t      insertAttachmentMappings(docInfo, metadata.seq, callback);\n\t    }\n\t\n\t    var putReq = bySeqStore.put(doc);\n\t\n\t    putReq.onsuccess = afterPutDoc;\n\t    putReq.onerror = afterPutDocError;\n\t  }\n\t\n\t  function writeAttachments(docInfo, winningRev, winningRevIsDeleted,\n\t                            isUpdate, resultsIdx, callback) {\n\t\n\t\n\t    var doc = docInfo.data;\n\t\n\t    var numDone = 0;\n\t    var attachments = Object.keys(doc._attachments);\n\t\n\t    function collectResults() {\n\t      if (numDone === attachments.length) {\n\t        finishDoc(docInfo, winningRev, winningRevIsDeleted,\n\t          isUpdate, resultsIdx, callback);\n\t      }\n\t    }\n\t\n\t    function attachmentSaved() {\n\t      numDone++;\n\t      collectResults();\n\t    }\n\t\n\t    attachments.forEach(function (key) {\n\t      var att = docInfo.data._attachments[key];\n\t      if (!att.stub) {\n\t        var data = att.data;\n\t        delete att.data;\n\t        att.revpos = parseInt(winningRev, 10);\n\t        var digest = att.digest;\n\t        saveAttachment(digest, data, attachmentSaved);\n\t      } else {\n\t        numDone++;\n\t        collectResults();\n\t      }\n\t    });\n\t  }\n\t\n\t  // map seqs to attachment digests, which\n\t  // we will need later during compaction\n\t  function insertAttachmentMappings(docInfo, seq, callback) {\n\t\n\t    var attsAdded = 0;\n\t    var attsToAdd = Object.keys(docInfo.data._attachments || {});\n\t\n\t    if (!attsToAdd.length) {\n\t      return callback();\n\t    }\n\t\n\t    function checkDone() {\n\t      if (++attsAdded === attsToAdd.length) {\n\t        callback();\n\t      }\n\t    }\n\t\n\t    function add(att) {\n\t      var digest = docInfo.data._attachments[att].digest;\n\t      var req = attachAndSeqStore.put({\n\t        seq: seq,\n\t        digestSeq: digest + '::' + seq\n\t      });\n\t\n\t      req.onsuccess = checkDone;\n\t      req.onerror = function (e) {\n\t        // this callback is for a constaint error, which we ignore\n\t        // because this docid/rev has already been associated with\n\t        // the digest (e.g. when new_edits == false)\n\t        e.preventDefault(); // avoid transaction abort\n\t        e.stopPropagation(); // avoid transaction onerror\n\t        checkDone();\n\t      };\n\t    }\n\t    for (var i = 0; i < attsToAdd.length; i++) {\n\t      add(attsToAdd[i]); // do in parallel\n\t    }\n\t  }\n\t\n\t  function saveAttachment(digest, data, callback) {\n\t\n\t\n\t    var getKeyReq = attachStore.count(digest);\n\t    getKeyReq.onsuccess = function (e) {\n\t      var count = e.target.result;\n\t      if (count) {\n\t        return callback(); // already exists\n\t      }\n\t      var newAtt = {\n\t        digest: digest,\n\t        body: data\n\t      };\n\t      var putReq = attachStore.put(newAtt);\n\t      putReq.onsuccess = callback;\n\t    };\n\t  }\n\t}\n\t\n\tfunction createKeyRange(start, end, inclusiveEnd, key, descending) {\n\t  try {\n\t    if (start && end) {\n\t      if (descending) {\n\t        return IDBKeyRange.bound(end, start, !inclusiveEnd, false);\n\t      } else {\n\t        return IDBKeyRange.bound(start, end, false, !inclusiveEnd);\n\t      }\n\t    } else if (start) {\n\t      if (descending) {\n\t        return IDBKeyRange.upperBound(start);\n\t      } else {\n\t        return IDBKeyRange.lowerBound(start);\n\t      }\n\t    } else if (end) {\n\t      if (descending) {\n\t        return IDBKeyRange.lowerBound(end, !inclusiveEnd);\n\t      } else {\n\t        return IDBKeyRange.upperBound(end, !inclusiveEnd);\n\t      }\n\t    } else if (key) {\n\t      return IDBKeyRange.only(key);\n\t    }\n\t  } catch (e) {\n\t    return {error: e};\n\t  }\n\t  return null;\n\t}\n\t\n\tfunction handleKeyRangeError(api, opts, err, callback) {\n\t  if (err.name === \"DataError\" && err.code === 0) {\n\t    // data error, start is less than end\n\t    return callback(null, {\n\t      total_rows: api._meta.docCount,\n\t      offset: opts.skip,\n\t      rows: []\n\t    });\n\t  }\n\t  callback(createError(IDB_ERROR, err.name, err.message));\n\t}\n\t\n\tfunction idbAllDocs(opts, api, idb, callback) {\n\t\n\t  function allDocsQuery(opts, callback) {\n\t    var start = 'startkey' in opts ? opts.startkey : false;\n\t    var end = 'endkey' in opts ? opts.endkey : false;\n\t    var key = 'key' in opts ? opts.key : false;\n\t    var skip = opts.skip || 0;\n\t    var limit = typeof opts.limit === 'number' ? opts.limit : -1;\n\t    var inclusiveEnd = opts.inclusive_end !== false;\n\t    var descending = 'descending' in opts && opts.descending ? 'prev' : null;\n\t\n\t    var keyRange = createKeyRange(start, end, inclusiveEnd, key, descending);\n\t    if (keyRange && keyRange.error) {\n\t      return handleKeyRangeError(api, opts, keyRange.error, callback);\n\t    }\n\t\n\t    var stores = [DOC_STORE, BY_SEQ_STORE];\n\t\n\t    if (opts.attachments) {\n\t      stores.push(ATTACH_STORE);\n\t    }\n\t    var txnResult = openTransactionSafely(idb, stores, 'readonly');\n\t    if (txnResult.error) {\n\t      return callback(txnResult.error);\n\t    }\n\t    var txn = txnResult.txn;\n\t    var docStore = txn.objectStore(DOC_STORE);\n\t    var seqStore = txn.objectStore(BY_SEQ_STORE);\n\t    var cursor = descending ?\n\t      docStore.openCursor(keyRange, descending) :\n\t      docStore.openCursor(keyRange);\n\t    var docIdRevIndex = seqStore.index('_doc_id_rev');\n\t    var results = [];\n\t    var docCount = 0;\n\t\n\t    // if the user specifies include_docs=true, then we don't\n\t    // want to block the main cursor while we're fetching the doc\n\t    function fetchDocAsynchronously(metadata, row, winningRev) {\n\t      var key = metadata.id + \"::\" + winningRev;\n\t      docIdRevIndex.get(key).onsuccess =  function onGetDoc(e) {\n\t        row.doc = decodeDoc(e.target.result);\n\t        if (opts.conflicts) {\n\t          row.doc._conflicts = collectConflicts(metadata);\n\t        }\n\t        fetchAttachmentsIfNecessary(row.doc, opts, txn);\n\t      };\n\t    }\n\t\n\t    function allDocsInner(cursor, winningRev, metadata) {\n\t      var row = {\n\t        id: metadata.id,\n\t        key: metadata.id,\n\t        value: {\n\t          rev: winningRev\n\t        }\n\t      };\n\t      var deleted = metadata.deleted;\n\t      if (opts.deleted === 'ok') {\n\t        results.push(row);\n\t        // deleted docs are okay with \"keys\" requests\n\t        if (deleted) {\n\t          row.value.deleted = true;\n\t          row.doc = null;\n\t        } else if (opts.include_docs) {\n\t          fetchDocAsynchronously(metadata, row, winningRev);\n\t        }\n\t      } else if (!deleted && skip-- <= 0) {\n\t        results.push(row);\n\t        if (opts.include_docs) {\n\t          fetchDocAsynchronously(metadata, row, winningRev);\n\t        }\n\t        if (--limit === 0) {\n\t          return;\n\t        }\n\t      }\n\t      cursor.continue();\n\t    }\n\t\n\t    function onGetCursor(e) {\n\t      docCount = api._meta.docCount; // do this within the txn for consistency\n\t      var cursor = e.target.result;\n\t      if (!cursor) {\n\t        return;\n\t      }\n\t      var metadata = decodeMetadata(cursor.value);\n\t      var winningRev = metadata.winningRev;\n\t\n\t      allDocsInner(cursor, winningRev, metadata);\n\t    }\n\t\n\t    function onResultsReady() {\n\t      callback(null, {\n\t        total_rows: docCount,\n\t        offset: opts.skip,\n\t        rows: results\n\t      });\n\t    }\n\t\n\t    function onTxnComplete() {\n\t      if (opts.attachments) {\n\t        postProcessAttachments(results, opts.binary).then(onResultsReady);\n\t      } else {\n\t        onResultsReady();\n\t      }\n\t    }\n\t\n\t    txn.oncomplete = onTxnComplete;\n\t    cursor.onsuccess = onGetCursor;\n\t  }\n\t\n\t  function allDocs(opts, callback) {\n\t\n\t    if (opts.limit === 0) {\n\t      return callback(null, {\n\t        total_rows: api._meta.docCount,\n\t        offset: opts.skip,\n\t        rows: []\n\t      });\n\t    }\n\t    allDocsQuery(opts, callback);\n\t  }\n\t\n\t  allDocs(opts, callback);\n\t}\n\t\n\t//\n\t// Blobs are not supported in all versions of IndexedDB, notably\n\t// Chrome <37 and Android <5. In those versions, storing a blob will throw.\n\t//\n\t// Various other blob bugs exist in Chrome v37-42 (inclusive).\n\t// Detecting them is expensive and confusing to users, and Chrome 37-42\n\t// is at very low usage worldwide, so we do a hacky userAgent check instead.\n\t//\n\t// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\n\t// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\n\t// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\n\t//\n\tfunction checkBlobSupport(txn) {\n\t  return new PouchPromise(function (resolve) {\n\t    var blob = createBlob(['']);\n\t    txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');\n\t\n\t    txn.onabort = function (e) {\n\t      // If the transaction aborts now its due to not being able to\n\t      // write to the database, likely due to the disk being full\n\t      e.preventDefault();\n\t      e.stopPropagation();\n\t      resolve(false);\n\t    };\n\t\n\t    txn.oncomplete = function () {\n\t      var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\n\t      var matchedEdge = navigator.userAgent.match(/Edge\\//);\n\t      // MS Edge pretends to be Chrome 42:\n\t      // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\n\t      resolve(matchedEdge || !matchedChrome ||\n\t        parseInt(matchedChrome[1], 10) >= 43);\n\t    };\n\t  }).catch(function () {\n\t    return false; // error, so assume unsupported\n\t  });\n\t}\n\t\n\tvar cachedDBs = new _Map();\n\tvar blobSupportPromise;\n\tvar idbChanges = new Changes$1();\n\tvar openReqList = new _Map();\n\t\n\tfunction IdbPouch(opts, callback) {\n\t  var api = this;\n\t\n\t  taskQueue.queue.push({\n\t    action: function (thisCallback) {\n\t      init(api, opts, thisCallback);\n\t    },\n\t    callback: callback\n\t  });\n\t  applyNext(api.constructor);\n\t}\n\t\n\tfunction init(api, opts, callback) {\n\t\n\t  var dbName = opts.name;\n\t\n\t  var idb = null;\n\t  api._meta = null;\n\t\n\t  // called when creating a fresh new database\n\t  function createSchema(db) {\n\t    var docStore = db.createObjectStore(DOC_STORE, {keyPath : 'id'});\n\t    db.createObjectStore(BY_SEQ_STORE, {autoIncrement: true})\n\t      .createIndex('_doc_id_rev', '_doc_id_rev', {unique: true});\n\t    db.createObjectStore(ATTACH_STORE, {keyPath: 'digest'});\n\t    db.createObjectStore(META_STORE, {keyPath: 'id', autoIncrement: false});\n\t    db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\n\t\n\t    // added in v2\n\t    docStore.createIndex('deletedOrLocal', 'deletedOrLocal', {unique : false});\n\t\n\t    // added in v3\n\t    db.createObjectStore(LOCAL_STORE, {keyPath: '_id'});\n\t\n\t    // added in v4\n\t    var attAndSeqStore = db.createObjectStore(ATTACH_AND_SEQ_STORE,\n\t      {autoIncrement: true});\n\t    attAndSeqStore.createIndex('seq', 'seq');\n\t    attAndSeqStore.createIndex('digestSeq', 'digestSeq', {unique: true});\n\t  }\n\t\n\t  // migration to version 2\n\t  // unfortunately \"deletedOrLocal\" is a misnomer now that we no longer\n\t  // store local docs in the main doc-store, but whaddyagonnado\n\t  function addDeletedOrLocalIndex(txn, callback) {\n\t    var docStore = txn.objectStore(DOC_STORE);\n\t    docStore.createIndex('deletedOrLocal', 'deletedOrLocal', {unique : false});\n\t\n\t    docStore.openCursor().onsuccess = function (event) {\n\t      var cursor = event.target.result;\n\t      if (cursor) {\n\t        var metadata = cursor.value;\n\t        var deleted = isDeleted(metadata);\n\t        metadata.deletedOrLocal = deleted ? \"1\" : \"0\";\n\t        docStore.put(metadata);\n\t        cursor.continue();\n\t      } else {\n\t        callback();\n\t      }\n\t    };\n\t  }\n\t\n\t  // migration to version 3 (part 1)\n\t  function createLocalStoreSchema(db) {\n\t    db.createObjectStore(LOCAL_STORE, {keyPath: '_id'})\n\t      .createIndex('_doc_id_rev', '_doc_id_rev', {unique: true});\n\t  }\n\t\n\t  // migration to version 3 (part 2)\n\t  function migrateLocalStore(txn, cb) {\n\t    var localStore = txn.objectStore(LOCAL_STORE);\n\t    var docStore = txn.objectStore(DOC_STORE);\n\t    var seqStore = txn.objectStore(BY_SEQ_STORE);\n\t\n\t    var cursor = docStore.openCursor();\n\t    cursor.onsuccess = function (event) {\n\t      var cursor = event.target.result;\n\t      if (cursor) {\n\t        var metadata = cursor.value;\n\t        var docId = metadata.id;\n\t        var local = isLocalId(docId);\n\t        var rev = winningRev(metadata);\n\t        if (local) {\n\t          var docIdRev = docId + \"::\" + rev;\n\t          // remove all seq entries\n\t          // associated with this docId\n\t          var start = docId + \"::\";\n\t          var end = docId + \"::~\";\n\t          var index = seqStore.index('_doc_id_rev');\n\t          var range = IDBKeyRange.bound(start, end, false, false);\n\t          var seqCursor = index.openCursor(range);\n\t          seqCursor.onsuccess = function (e) {\n\t            seqCursor = e.target.result;\n\t            if (!seqCursor) {\n\t              // done\n\t              docStore.delete(cursor.primaryKey);\n\t              cursor.continue();\n\t            } else {\n\t              var data = seqCursor.value;\n\t              if (data._doc_id_rev === docIdRev) {\n\t                localStore.put(data);\n\t              }\n\t              seqStore.delete(seqCursor.primaryKey);\n\t              seqCursor.continue();\n\t            }\n\t          };\n\t        } else {\n\t          cursor.continue();\n\t        }\n\t      } else if (cb) {\n\t        cb();\n\t      }\n\t    };\n\t  }\n\t\n\t  // migration to version 4 (part 1)\n\t  function addAttachAndSeqStore(db) {\n\t    var attAndSeqStore = db.createObjectStore(ATTACH_AND_SEQ_STORE,\n\t      {autoIncrement: true});\n\t    attAndSeqStore.createIndex('seq', 'seq');\n\t    attAndSeqStore.createIndex('digestSeq', 'digestSeq', {unique: true});\n\t  }\n\t\n\t  // migration to version 4 (part 2)\n\t  function migrateAttsAndSeqs(txn, callback) {\n\t    var seqStore = txn.objectStore(BY_SEQ_STORE);\n\t    var attStore = txn.objectStore(ATTACH_STORE);\n\t    var attAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE);\n\t\n\t    // need to actually populate the table. this is the expensive part,\n\t    // so as an optimization, check first that this database even\n\t    // contains attachments\n\t    var req = attStore.count();\n\t    req.onsuccess = function (e) {\n\t      var count = e.target.result;\n\t      if (!count) {\n\t        return callback(); // done\n\t      }\n\t\n\t      seqStore.openCursor().onsuccess = function (e) {\n\t        var cursor = e.target.result;\n\t        if (!cursor) {\n\t          return callback(); // done\n\t        }\n\t        var doc = cursor.value;\n\t        var seq = cursor.primaryKey;\n\t        var atts = Object.keys(doc._attachments || {});\n\t        var digestMap = {};\n\t        for (var j = 0; j < atts.length; j++) {\n\t          var att = doc._attachments[atts[j]];\n\t          digestMap[att.digest] = true; // uniq digests, just in case\n\t        }\n\t        var digests = Object.keys(digestMap);\n\t        for (j = 0; j < digests.length; j++) {\n\t          var digest = digests[j];\n\t          attAndSeqStore.put({\n\t            seq: seq,\n\t            digestSeq: digest + '::' + seq\n\t          });\n\t        }\n\t        cursor.continue();\n\t      };\n\t    };\n\t  }\n\t\n\t  // migration to version 5\n\t  // Instead of relying on on-the-fly migration of metadata,\n\t  // this brings the doc-store to its modern form:\n\t  // - metadata.winningrev\n\t  // - metadata.seq\n\t  // - stringify the metadata when storing it\n\t  function migrateMetadata(txn) {\n\t\n\t    function decodeMetadataCompat(storedObject) {\n\t      if (!storedObject.data) {\n\t        // old format, when we didn't store it stringified\n\t        storedObject.deleted = storedObject.deletedOrLocal === '1';\n\t        return storedObject;\n\t      }\n\t      return decodeMetadata(storedObject);\n\t    }\n\t\n\t    // ensure that every metadata has a winningRev and seq,\n\t    // which was previously created on-the-fly but better to migrate\n\t    var bySeqStore = txn.objectStore(BY_SEQ_STORE);\n\t    var docStore = txn.objectStore(DOC_STORE);\n\t    var cursor = docStore.openCursor();\n\t    cursor.onsuccess = function (e) {\n\t      var cursor = e.target.result;\n\t      if (!cursor) {\n\t        return; // done\n\t      }\n\t      var metadata = decodeMetadataCompat(cursor.value);\n\t\n\t      metadata.winningRev = metadata.winningRev ||\n\t        winningRev(metadata);\n\t\n\t      function fetchMetadataSeq() {\n\t        // metadata.seq was added post-3.2.0, so if it's missing,\n\t        // we need to fetch it manually\n\t        var start = metadata.id + '::';\n\t        var end = metadata.id + '::\\uffff';\n\t        var req = bySeqStore.index('_doc_id_rev').openCursor(\n\t          IDBKeyRange.bound(start, end));\n\t\n\t        var metadataSeq = 0;\n\t        req.onsuccess = function (e) {\n\t          var cursor = e.target.result;\n\t          if (!cursor) {\n\t            metadata.seq = metadataSeq;\n\t            return onGetMetadataSeq();\n\t          }\n\t          var seq = cursor.primaryKey;\n\t          if (seq > metadataSeq) {\n\t            metadataSeq = seq;\n\t          }\n\t          cursor.continue();\n\t        };\n\t      }\n\t\n\t      function onGetMetadataSeq() {\n\t        var metadataToStore = encodeMetadata(metadata,\n\t          metadata.winningRev, metadata.deleted);\n\t\n\t        var req = docStore.put(metadataToStore);\n\t        req.onsuccess = function () {\n\t          cursor.continue();\n\t        };\n\t      }\n\t\n\t      if (metadata.seq) {\n\t        return onGetMetadataSeq();\n\t      }\n\t\n\t      fetchMetadataSeq();\n\t    };\n\t\n\t  }\n\t\n\t  api.type = function () {\n\t    return 'idb';\n\t  };\n\t\n\t  api._id = toPromise(function (callback) {\n\t    callback(null, api._meta.instanceId);\n\t  });\n\t\n\t  api._bulkDocs = function idb_bulkDocs(req, reqOpts, callback) {\n\t    idbBulkDocs(opts, req, reqOpts, api, idb, idbChanges, callback);\n\t  };\n\t\n\t  // First we look up the metadata in the ids database, then we fetch the\n\t  // current revision(s) from the by sequence store\n\t  api._get = function idb_get(id, opts, callback) {\n\t    var doc;\n\t    var metadata;\n\t    var err;\n\t    var txn = opts.ctx;\n\t    if (!txn) {\n\t      var txnResult = openTransactionSafely(idb,\n\t        [DOC_STORE, BY_SEQ_STORE, ATTACH_STORE], 'readonly');\n\t      if (txnResult.error) {\n\t        return callback(txnResult.error);\n\t      }\n\t      txn = txnResult.txn;\n\t    }\n\t\n\t    function finish() {\n\t      callback(err, {doc: doc, metadata: metadata, ctx: txn});\n\t    }\n\t\n\t    txn.objectStore(DOC_STORE).get(id).onsuccess = function (e) {\n\t      metadata = decodeMetadata(e.target.result);\n\t      // we can determine the result here if:\n\t      // 1. there is no such document\n\t      // 2. the document is deleted and we don't ask about specific rev\n\t      // When we ask with opts.rev we expect the answer to be either\n\t      // doc (possibly with _deleted=true) or missing error\n\t      if (!metadata) {\n\t        err = createError(MISSING_DOC, 'missing');\n\t        return finish();\n\t      }\n\t      if (isDeleted(metadata) && !opts.rev) {\n\t        err = createError(MISSING_DOC, \"deleted\");\n\t        return finish();\n\t      }\n\t      var objectStore = txn.objectStore(BY_SEQ_STORE);\n\t\n\t      var rev = opts.rev || metadata.winningRev;\n\t      var key = metadata.id + '::' + rev;\n\t\n\t      objectStore.index('_doc_id_rev').get(key).onsuccess = function (e) {\n\t        doc = e.target.result;\n\t        if (doc) {\n\t          doc = decodeDoc(doc);\n\t        }\n\t        if (!doc) {\n\t          err = createError(MISSING_DOC, 'missing');\n\t          return finish();\n\t        }\n\t        finish();\n\t      };\n\t    };\n\t  };\n\t\n\t  api._getAttachment = function (docId, attachId, attachment, opts, callback) {\n\t    var txn;\n\t    if (opts.ctx) {\n\t      txn = opts.ctx;\n\t    } else {\n\t      var txnResult = openTransactionSafely(idb,\n\t        [DOC_STORE, BY_SEQ_STORE, ATTACH_STORE], 'readonly');\n\t      if (txnResult.error) {\n\t        return callback(txnResult.error);\n\t      }\n\t      txn = txnResult.txn;\n\t    }\n\t    var digest = attachment.digest;\n\t    var type = attachment.content_type;\n\t\n\t    txn.objectStore(ATTACH_STORE).get(digest).onsuccess = function (e) {\n\t      var body = e.target.result.body;\n\t      readBlobData(body, type, opts.binary, function (blobData) {\n\t        callback(null, blobData);\n\t      });\n\t    };\n\t  };\n\t\n\t  api._info = function idb_info(callback) {\n\t\n\t    if (idb === null || !cachedDBs.has(dbName)) {\n\t      var error = new Error('db isn\\'t open');\n\t      error.id = 'idbNull';\n\t      return callback(error);\n\t    }\n\t    var updateSeq;\n\t    var docCount;\n\t\n\t    var txnResult = openTransactionSafely(idb, [BY_SEQ_STORE], 'readonly');\n\t    if (txnResult.error) {\n\t      return callback(txnResult.error);\n\t    }\n\t    var txn = txnResult.txn;\n\t    var cursor = txn.objectStore(BY_SEQ_STORE).openCursor(null, 'prev');\n\t    cursor.onsuccess = function (event) {\n\t      var cursor = event.target.result;\n\t      updateSeq = cursor ? cursor.key : 0;\n\t      // count within the same txn for consistency\n\t      docCount = api._meta.docCount;\n\t    };\n\t\n\t    txn.oncomplete = function () {\n\t      callback(null, {\n\t        doc_count: docCount,\n\t        update_seq: updateSeq,\n\t        // for debugging\n\t        idb_attachment_format: (api._meta.blobSupport ? 'binary' : 'base64')\n\t      });\n\t    };\n\t  };\n\t\n\t  api._allDocs = function idb_allDocs(opts, callback) {\n\t    idbAllDocs(opts, api, idb, callback);\n\t  };\n\t\n\t  api._changes = function (opts) {\n\t    opts = clone(opts);\n\t\n\t    if (opts.continuous) {\n\t      var id = dbName + ':' + uuid();\n\t      idbChanges.addListener(dbName, id, api, opts);\n\t      idbChanges.notify(dbName);\n\t      return {\n\t        cancel: function () {\n\t          idbChanges.removeListener(dbName, id);\n\t        }\n\t      };\n\t    }\n\t\n\t    var docIds = opts.doc_ids && new _Set(opts.doc_ids);\n\t\n\t    opts.since = opts.since || 0;\n\t    var lastSeq = opts.since;\n\t\n\t    var limit = 'limit' in opts ? opts.limit : -1;\n\t    if (limit === 0) {\n\t      limit = 1; // per CouchDB _changes spec\n\t    }\n\t    var returnDocs;\n\t    if ('return_docs' in opts) {\n\t      returnDocs = opts.return_docs;\n\t    } else if ('returnDocs' in opts) {\n\t      // TODO: Remove 'returnDocs' in favor of 'return_docs' in a future release\n\t      returnDocs = opts.returnDocs;\n\t    } else {\n\t      returnDocs = true;\n\t    }\n\t\n\t    var results = [];\n\t    var numResults = 0;\n\t    var filter = filterChange(opts);\n\t    var docIdsToMetadata = new _Map();\n\t\n\t    var txn;\n\t    var bySeqStore;\n\t    var docStore;\n\t    var docIdRevIndex;\n\t\n\t    function onGetCursor(cursor) {\n\t\n\t      var doc = decodeDoc(cursor.value);\n\t      var seq = cursor.key;\n\t\n\t      if (docIds && !docIds.has(doc._id)) {\n\t        return cursor.continue();\n\t      }\n\t\n\t      var metadata;\n\t\n\t      function onGetMetadata() {\n\t        if (metadata.seq !== seq) {\n\t          // some other seq is later\n\t          return cursor.continue();\n\t        }\n\t\n\t        lastSeq = seq;\n\t\n\t        if (metadata.winningRev === doc._rev) {\n\t          return onGetWinningDoc(doc);\n\t        }\n\t\n\t        fetchWinningDoc();\n\t      }\n\t\n\t      function fetchWinningDoc() {\n\t        var docIdRev = doc._id + '::' + metadata.winningRev;\n\t        var req = docIdRevIndex.get(docIdRev);\n\t        req.onsuccess = function (e) {\n\t          onGetWinningDoc(decodeDoc(e.target.result));\n\t        };\n\t      }\n\t\n\t      function onGetWinningDoc(winningDoc) {\n\t\n\t        var change = opts.processChange(winningDoc, metadata, opts);\n\t        change.seq = metadata.seq;\n\t\n\t        var filtered = filter(change);\n\t        if (typeof filtered === 'object') {\n\t          return opts.complete(filtered);\n\t        }\n\t\n\t        if (filtered) {\n\t          numResults++;\n\t          if (returnDocs) {\n\t            results.push(change);\n\t          }\n\t          // process the attachment immediately\n\t          // for the benefit of live listeners\n\t          if (opts.attachments && opts.include_docs) {\n\t            fetchAttachmentsIfNecessary(winningDoc, opts, txn, function () {\n\t              postProcessAttachments([change], opts.binary).then(function () {\n\t                opts.onChange(change);\n\t              });\n\t            });\n\t          } else {\n\t            opts.onChange(change);\n\t          }\n\t        }\n\t        if (numResults !== limit) {\n\t          cursor.continue();\n\t        }\n\t      }\n\t\n\t      metadata = docIdsToMetadata.get(doc._id);\n\t      if (metadata) { // cached\n\t        return onGetMetadata();\n\t      }\n\t      // metadata not cached, have to go fetch it\n\t      docStore.get(doc._id).onsuccess = function (event) {\n\t        metadata = decodeMetadata(event.target.result);\n\t        docIdsToMetadata.set(doc._id, metadata);\n\t        onGetMetadata();\n\t      };\n\t    }\n\t\n\t    function onsuccess(event) {\n\t      var cursor = event.target.result;\n\t\n\t      if (!cursor) {\n\t        return;\n\t      }\n\t      onGetCursor(cursor);\n\t    }\n\t\n\t    function fetchChanges() {\n\t      var objectStores = [DOC_STORE, BY_SEQ_STORE];\n\t      if (opts.attachments) {\n\t        objectStores.push(ATTACH_STORE);\n\t      }\n\t      var txnResult = openTransactionSafely(idb, objectStores, 'readonly');\n\t      if (txnResult.error) {\n\t        return opts.complete(txnResult.error);\n\t      }\n\t      txn = txnResult.txn;\n\t      txn.onabort = idbError(opts.complete);\n\t      txn.oncomplete = onTxnComplete;\n\t\n\t      bySeqStore = txn.objectStore(BY_SEQ_STORE);\n\t      docStore = txn.objectStore(DOC_STORE);\n\t      docIdRevIndex = bySeqStore.index('_doc_id_rev');\n\t\n\t      var req;\n\t\n\t      if (opts.descending) {\n\t        req = bySeqStore.openCursor(null, 'prev');\n\t      } else {\n\t        req = bySeqStore.openCursor(IDBKeyRange.lowerBound(opts.since, true));\n\t      }\n\t\n\t      req.onsuccess = onsuccess;\n\t    }\n\t\n\t    fetchChanges();\n\t\n\t    function onTxnComplete() {\n\t\n\t      function finish() {\n\t        opts.complete(null, {\n\t          results: results,\n\t          last_seq: lastSeq\n\t        });\n\t      }\n\t\n\t      if (!opts.continuous && opts.attachments) {\n\t        // cannot guarantee that postProcessing was already done,\n\t        // so do it again\n\t        postProcessAttachments(results).then(finish);\n\t      } else {\n\t        finish();\n\t      }\n\t    }\n\t  };\n\t\n\t  api._close = function (callback) {\n\t    if (idb === null) {\n\t      return callback(createError(NOT_OPEN));\n\t    }\n\t\n\t    // https://developer.mozilla.org/en-US/docs/IndexedDB/IDBDatabase#close\n\t    // \"Returns immediately and closes the connection in a separate thread...\"\n\t    idb.close();\n\t    cachedDBs.delete(dbName);\n\t    idb = null;\n\t    callback();\n\t  };\n\t\n\t  api._getRevisionTree = function (docId, callback) {\n\t    var txnResult = openTransactionSafely(idb, [DOC_STORE], 'readonly');\n\t    if (txnResult.error) {\n\t      return callback(txnResult.error);\n\t    }\n\t    var txn = txnResult.txn;\n\t    var req = txn.objectStore(DOC_STORE).get(docId);\n\t    req.onsuccess = function (event) {\n\t      var doc = decodeMetadata(event.target.result);\n\t      if (!doc) {\n\t        callback(createError(MISSING_DOC));\n\t      } else {\n\t        callback(null, doc.rev_tree);\n\t      }\n\t    };\n\t  };\n\t\n\t  // This function removes revisions of document docId\n\t  // which are listed in revs and sets this document\n\t  // revision to to rev_tree\n\t  api._doCompaction = function (docId, revs, callback) {\n\t    var stores = [\n\t      DOC_STORE,\n\t      BY_SEQ_STORE,\n\t      ATTACH_STORE,\n\t      ATTACH_AND_SEQ_STORE\n\t    ];\n\t    var txnResult = openTransactionSafely(idb, stores, 'readwrite');\n\t    if (txnResult.error) {\n\t      return callback(txnResult.error);\n\t    }\n\t    var txn = txnResult.txn;\n\t\n\t    var docStore = txn.objectStore(DOC_STORE);\n\t\n\t    docStore.get(docId).onsuccess = function (event) {\n\t      var metadata = decodeMetadata(event.target.result);\n\t      traverseRevTree(metadata.rev_tree, function (isLeaf, pos,\n\t                                                         revHash, ctx, opts) {\n\t        var rev = pos + '-' + revHash;\n\t        if (revs.indexOf(rev) !== -1) {\n\t          opts.status = 'missing';\n\t        }\n\t      });\n\t      compactRevs(revs, docId, txn);\n\t      var winningRev = metadata.winningRev;\n\t      var deleted = metadata.deleted;\n\t      txn.objectStore(DOC_STORE).put(\n\t        encodeMetadata(metadata, winningRev, deleted));\n\t    };\n\t    txn.onabort = idbError(callback);\n\t    txn.oncomplete = function () {\n\t      callback();\n\t    };\n\t  };\n\t\n\t\n\t  api._getLocal = function (id, callback) {\n\t    var txnResult = openTransactionSafely(idb, [LOCAL_STORE], 'readonly');\n\t    if (txnResult.error) {\n\t      return callback(txnResult.error);\n\t    }\n\t    var tx = txnResult.txn;\n\t    var req = tx.objectStore(LOCAL_STORE).get(id);\n\t\n\t    req.onerror = idbError(callback);\n\t    req.onsuccess = function (e) {\n\t      var doc = e.target.result;\n\t      if (!doc) {\n\t        callback(createError(MISSING_DOC));\n\t      } else {\n\t        delete doc['_doc_id_rev']; // for backwards compat\n\t        callback(null, doc);\n\t      }\n\t    };\n\t  };\n\t\n\t  api._putLocal = function (doc, opts, callback) {\n\t    if (typeof opts === 'function') {\n\t      callback = opts;\n\t      opts = {};\n\t    }\n\t    delete doc._revisions; // ignore this, trust the rev\n\t    var oldRev = doc._rev;\n\t    var id = doc._id;\n\t    if (!oldRev) {\n\t      doc._rev = '0-1';\n\t    } else {\n\t      doc._rev = '0-' + (parseInt(oldRev.split('-')[1], 10) + 1);\n\t    }\n\t\n\t    var tx = opts.ctx;\n\t    var ret;\n\t    if (!tx) {\n\t      var txnResult = openTransactionSafely(idb, [LOCAL_STORE], 'readwrite');\n\t      if (txnResult.error) {\n\t        return callback(txnResult.error);\n\t      }\n\t      tx = txnResult.txn;\n\t      tx.onerror = idbError(callback);\n\t      tx.oncomplete = function () {\n\t        if (ret) {\n\t          callback(null, ret);\n\t        }\n\t      };\n\t    }\n\t\n\t    var oStore = tx.objectStore(LOCAL_STORE);\n\t    var req;\n\t    if (oldRev) {\n\t      req = oStore.get(id);\n\t      req.onsuccess = function (e) {\n\t        var oldDoc = e.target.result;\n\t        if (!oldDoc || oldDoc._rev !== oldRev) {\n\t          callback(createError(REV_CONFLICT));\n\t        } else { // update\n\t          var req = oStore.put(doc);\n\t          req.onsuccess = function () {\n\t            ret = {ok: true, id: doc._id, rev: doc._rev};\n\t            if (opts.ctx) { // return immediately\n\t              callback(null, ret);\n\t            }\n\t          };\n\t        }\n\t      };\n\t    } else { // new doc\n\t      req = oStore.add(doc);\n\t      req.onerror = function (e) {\n\t        // constraint error, already exists\n\t        callback(createError(REV_CONFLICT));\n\t        e.preventDefault(); // avoid transaction abort\n\t        e.stopPropagation(); // avoid transaction onerror\n\t      };\n\t      req.onsuccess = function () {\n\t        ret = {ok: true, id: doc._id, rev: doc._rev};\n\t        if (opts.ctx) { // return immediately\n\t          callback(null, ret);\n\t        }\n\t      };\n\t    }\n\t  };\n\t\n\t  api._removeLocal = function (doc, opts, callback) {\n\t    if (typeof opts === 'function') {\n\t      callback = opts;\n\t      opts = {};\n\t    }\n\t    var tx = opts.ctx;\n\t    if (!tx) {\n\t      var txnResult = openTransactionSafely(idb, [LOCAL_STORE], 'readwrite');\n\t      if (txnResult.error) {\n\t        return callback(txnResult.error);\n\t      }\n\t      tx = txnResult.txn;\n\t      tx.oncomplete = function () {\n\t        if (ret) {\n\t          callback(null, ret);\n\t        }\n\t      };\n\t    }\n\t    var ret;\n\t    var id = doc._id;\n\t    var oStore = tx.objectStore(LOCAL_STORE);\n\t    var req = oStore.get(id);\n\t\n\t    req.onerror = idbError(callback);\n\t    req.onsuccess = function (e) {\n\t      var oldDoc = e.target.result;\n\t      if (!oldDoc || oldDoc._rev !== doc._rev) {\n\t        callback(createError(MISSING_DOC));\n\t      } else {\n\t        oStore.delete(id);\n\t        ret = {ok: true, id: id, rev: '0-0'};\n\t        if (opts.ctx) { // return immediately\n\t          callback(null, ret);\n\t        }\n\t      }\n\t    };\n\t  };\n\t\n\t  api._destroy = function (opts, callback) {\n\t    idbChanges.removeAllListeners(dbName);\n\t\n\t    //Close open request for \"dbName\" database to fix ie delay.\n\t    var openReq = openReqList.get(dbName);\n\t    if (openReq && openReq.result) {\n\t      openReq.result.close();\n\t      cachedDBs.delete(dbName);\n\t    }\n\t    var req = indexedDB.deleteDatabase(dbName);\n\t\n\t    req.onsuccess = function () {\n\t      //Remove open request from the list.\n\t      openReqList.delete(dbName);\n\t      if (hasLocalStorage() && (dbName in localStorage)) {\n\t        delete localStorage[dbName];\n\t      }\n\t      callback(null, { 'ok': true });\n\t    };\n\t\n\t    req.onerror = idbError(callback);\n\t  };\n\t\n\t  var cached = cachedDBs.get(dbName);\n\t\n\t  if (cached) {\n\t    idb = cached.idb;\n\t    api._meta = cached.global;\n\t    process.nextTick(function () {\n\t      callback(null, api);\n\t    });\n\t    return;\n\t  }\n\t\n\t  var req;\n\t  if (opts.storage) {\n\t    req = tryStorageOption(dbName, opts.storage);\n\t  } else {\n\t    req = indexedDB.open(dbName, ADAPTER_VERSION);\n\t  }\n\t\n\t  openReqList.set(dbName, req);\n\t\n\t  req.onupgradeneeded = function (e) {\n\t    var db = e.target.result;\n\t    if (e.oldVersion < 1) {\n\t      return createSchema(db); // new db, initial schema\n\t    }\n\t    // do migrations\n\t\n\t    var txn = e.currentTarget.transaction;\n\t    // these migrations have to be done in this function, before\n\t    // control is returned to the event loop, because IndexedDB\n\t\n\t    if (e.oldVersion < 3) {\n\t      createLocalStoreSchema(db); // v2 -> v3\n\t    }\n\t    if (e.oldVersion < 4) {\n\t      addAttachAndSeqStore(db); // v3 -> v4\n\t    }\n\t\n\t    var migrations = [\n\t      addDeletedOrLocalIndex, // v1 -> v2\n\t      migrateLocalStore,      // v2 -> v3\n\t      migrateAttsAndSeqs,     // v3 -> v4\n\t      migrateMetadata         // v4 -> v5\n\t    ];\n\t\n\t    var i = e.oldVersion;\n\t\n\t    function next() {\n\t      var migration = migrations[i - 1];\n\t      i++;\n\t      if (migration) {\n\t        migration(txn, next);\n\t      }\n\t    }\n\t\n\t    next();\n\t  };\n\t\n\t  req.onsuccess = function (e) {\n\t\n\t    idb = e.target.result;\n\t\n\t    idb.onversionchange = function () {\n\t      idb.close();\n\t      cachedDBs.delete(dbName);\n\t    };\n\t\n\t    idb.onabort = function (e) {\n\t      guardedConsole('error', 'Database has a global failure', e.target.error);\n\t      idb.close();\n\t      cachedDBs.delete(dbName);\n\t    };\n\t\n\t    var txn = idb.transaction([\n\t      META_STORE,\n\t      DETECT_BLOB_SUPPORT_STORE,\n\t      DOC_STORE\n\t    ], 'readwrite');\n\t\n\t    var req = txn.objectStore(META_STORE).get(META_STORE);\n\t\n\t    var blobSupport = null;\n\t    var docCount = null;\n\t    var instanceId = null;\n\t\n\t    req.onsuccess = function (e) {\n\t\n\t      var checkSetupComplete = function () {\n\t        if (blobSupport === null || docCount === null ||\n\t            instanceId === null) {\n\t          return;\n\t        } else {\n\t          api._meta = {\n\t            name: dbName,\n\t            instanceId: instanceId,\n\t            blobSupport: blobSupport,\n\t            docCount: docCount\n\t          };\n\t\n\t          cachedDBs.set(dbName, {\n\t            idb: idb,\n\t            global: api._meta\n\t          });\n\t          callback(null, api);\n\t        }\n\t      };\n\t\n\t      //\n\t      // fetch/store the id\n\t      //\n\t\n\t      var meta = e.target.result || {id: META_STORE};\n\t      if (dbName  + '_id' in meta) {\n\t        instanceId = meta[dbName + '_id'];\n\t        checkSetupComplete();\n\t      } else {\n\t        instanceId = uuid();\n\t        meta[dbName + '_id'] = instanceId;\n\t        txn.objectStore(META_STORE).put(meta).onsuccess = function () {\n\t          checkSetupComplete();\n\t        };\n\t      }\n\t\n\t      //\n\t      // check blob support\n\t      //\n\t\n\t      if (!blobSupportPromise) {\n\t        // make sure blob support is only checked once\n\t        blobSupportPromise = checkBlobSupport(txn);\n\t      }\n\t\n\t      blobSupportPromise.then(function (val) {\n\t        blobSupport = val;\n\t        checkSetupComplete();\n\t      });\n\t\n\t      //\n\t      // count docs\n\t      //\n\t\n\t      var index = txn.objectStore(DOC_STORE).index('deletedOrLocal');\n\t      index.count(IDBKeyRange.only('0')).onsuccess = function (e) {\n\t        docCount = e.target.result;\n\t        checkSetupComplete();\n\t      };\n\t\n\t    };\n\t  };\n\t\n\t  req.onerror = function () {\n\t    var msg = 'Failed to open indexedDB, are you in private browsing mode?';\n\t    guardedConsole('error', msg);\n\t    callback(createError(IDB_ERROR, msg));\n\t  };\n\t}\n\t\n\tIdbPouch.valid = function () {\n\t  // Issue #2533, we finally gave up on doing bug\n\t  // detection instead of browser sniffing. Safari brought us\n\t  // to our knees.\n\t  var isSafari = typeof openDatabase !== 'undefined' &&\n\t    /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) &&\n\t    !/Chrome/.test(navigator.userAgent) &&\n\t    !/BlackBerry/.test(navigator.platform);\n\t\n\t  // some outdated implementations of IDB that appear on Samsung\n\t  // and HTC Android devices <4.4 are missing IDBKeyRange\n\t  return !isSafari && typeof indexedDB !== 'undefined' &&\n\t    typeof IDBKeyRange !== 'undefined';\n\t};\n\t\n\tfunction tryStorageOption(dbName, storage) {\n\t  try { // option only available in Firefox 26+\n\t    return indexedDB.open(dbName, {\n\t      version: ADAPTER_VERSION,\n\t      storage: storage\n\t    });\n\t  } catch(err) {\n\t      return indexedDB.open(dbName, ADAPTER_VERSION);\n\t  }\n\t}\n\t\n\tfunction IDBPouch (PouchDB) {\n\t  PouchDB.adapter('idb', IdbPouch, true);\n\t}\n\t\n\t//\n\t// Parsing hex strings. Yeah.\n\t//\n\t// So basically we need this because of a bug in WebSQL:\n\t// https://code.google.com/p/chromium/issues/detail?id=422690\n\t// https://bugs.webkit.org/show_bug.cgi?id=137637\n\t//\n\t// UTF-8 and UTF-16 are provided as separate functions\n\t// for meager performance improvements\n\t//\n\t\n\tfunction decodeUtf8(str) {\n\t  return decodeURIComponent(escape(str));\n\t}\n\t\n\tfunction hexToInt(charCode) {\n\t  // '0'-'9' is 48-57\n\t  // 'A'-'F' is 65-70\n\t  // SQLite will only give us uppercase hex\n\t  return charCode < 65 ? (charCode - 48) : (charCode - 55);\n\t}\n\t\n\t\n\t// Example:\n\t// pragma encoding=utf8;\n\t// select hex('A');\n\t// returns '41'\n\tfunction parseHexUtf8(str, start, end) {\n\t  var result = '';\n\t  while (start < end) {\n\t    result += String.fromCharCode(\n\t      (hexToInt(str.charCodeAt(start++)) << 4) |\n\t        hexToInt(str.charCodeAt(start++)));\n\t  }\n\t  return result;\n\t}\n\t\n\t// Example:\n\t// pragma encoding=utf16;\n\t// select hex('A');\n\t// returns '4100'\n\t// notice that the 00 comes after the 41 (i.e. it's swizzled)\n\tfunction parseHexUtf16(str, start, end) {\n\t  var result = '';\n\t  while (start < end) {\n\t    // UTF-16, so swizzle the bytes\n\t    result += String.fromCharCode(\n\t      (hexToInt(str.charCodeAt(start + 2)) << 12) |\n\t        (hexToInt(str.charCodeAt(start + 3)) << 8) |\n\t        (hexToInt(str.charCodeAt(start)) << 4) |\n\t        hexToInt(str.charCodeAt(start + 1)));\n\t    start += 4;\n\t  }\n\t  return result;\n\t}\n\t\n\tfunction parseHexString(str, encoding) {\n\t  if (encoding === 'UTF-8') {\n\t    return decodeUtf8(parseHexUtf8(str, 0, str.length));\n\t  } else {\n\t    return parseHexUtf16(str, 0, str.length);\n\t  }\n\t}\n\t\n\tfunction quote(str) {\n\t  return \"'\" + str + \"'\";\n\t}\n\t\n\tvar ADAPTER_VERSION$1 = 7; // used to manage migrations\n\t\n\t// The object stores created for each database\n\t// DOC_STORE stores the document meta data, its revision history and state\n\tvar DOC_STORE$1 = quote('document-store');\n\t// BY_SEQ_STORE stores a particular version of a document, keyed by its\n\t// sequence id\n\tvar BY_SEQ_STORE$1 = quote('by-sequence');\n\t// Where we store attachments\n\tvar ATTACH_STORE$1 = quote('attach-store');\n\tvar LOCAL_STORE$1 = quote('local-store');\n\tvar META_STORE$1 = quote('metadata-store');\n\t// where we store many-to-many relations between attachment\n\t// digests and seqs\n\tvar ATTACH_AND_SEQ_STORE$1 = quote('attach-seq-store');\n\t\n\t// escapeBlob and unescapeBlob are workarounds for a websql bug:\n\t// https://code.google.com/p/chromium/issues/detail?id=422690\n\t// https://bugs.webkit.org/show_bug.cgi?id=137637\n\t// The goal is to never actually insert the \\u0000 character\n\t// in the database.\n\tfunction escapeBlob(str) {\n\t  return str\n\t    .replace(/\\u0002/g, '\\u0002\\u0002')\n\t    .replace(/\\u0001/g, '\\u0001\\u0002')\n\t    .replace(/\\u0000/g, '\\u0001\\u0001');\n\t}\n\t\n\tfunction unescapeBlob(str) {\n\t  return str\n\t    .replace(/\\u0001\\u0001/g, '\\u0000')\n\t    .replace(/\\u0001\\u0002/g, '\\u0001')\n\t    .replace(/\\u0002\\u0002/g, '\\u0002');\n\t}\n\t\n\tfunction stringifyDoc(doc) {\n\t  // don't bother storing the id/rev. it uses lots of space,\n\t  // in persistent map/reduce especially\n\t  delete doc._id;\n\t  delete doc._rev;\n\t  return JSON.stringify(doc);\n\t}\n\t\n\tfunction unstringifyDoc(doc, id, rev) {\n\t  doc = JSON.parse(doc);\n\t  doc._id = id;\n\t  doc._rev = rev;\n\t  return doc;\n\t}\n\t\n\t// question mark groups IN queries, e.g. 3 -> '(?,?,?)'\n\tfunction qMarks(num) {\n\t  var s = '(';\n\t  while (num--) {\n\t    s += '?';\n\t    if (num) {\n\t      s += ',';\n\t    }\n\t  }\n\t  return s + ')';\n\t}\n\t\n\tfunction select(selector, table, joiner, where, orderBy) {\n\t  return 'SELECT ' + selector + ' FROM ' +\n\t    (typeof table === 'string' ? table : table.join(' JOIN ')) +\n\t    (joiner ? (' ON ' + joiner) : '') +\n\t    (where ? (' WHERE ' +\n\t    (typeof where === 'string' ? where : where.join(' AND '))) : '') +\n\t    (orderBy ? (' ORDER BY ' + orderBy) : '');\n\t}\n\t\n\tfunction compactRevs$1(revs, docId, tx) {\n\t\n\t  if (!revs.length) {\n\t    return;\n\t  }\n\t\n\t  var numDone = 0;\n\t  var seqs = [];\n\t\n\t  function checkDone() {\n\t    if (++numDone === revs.length) { // done\n\t      deleteOrphans();\n\t    }\n\t  }\n\t\n\t  function deleteOrphans() {\n\t    // find orphaned attachment digests\n\t\n\t    if (!seqs.length) {\n\t      return;\n\t    }\n\t\n\t    var sql = 'SELECT DISTINCT digest AS digest FROM ' +\n\t      ATTACH_AND_SEQ_STORE$1 + ' WHERE seq IN ' + qMarks(seqs.length);\n\t\n\t    tx.executeSql(sql, seqs, function (tx, res) {\n\t\n\t      var digestsToCheck = [];\n\t      for (var i = 0; i < res.rows.length; i++) {\n\t        digestsToCheck.push(res.rows.item(i).digest);\n\t      }\n\t      if (!digestsToCheck.length) {\n\t        return;\n\t      }\n\t\n\t      var sql = 'DELETE FROM ' + ATTACH_AND_SEQ_STORE$1 +\n\t        ' WHERE seq IN (' +\n\t        seqs.map(function () { return '?'; }).join(',') +\n\t        ')';\n\t      tx.executeSql(sql, seqs, function (tx) {\n\t\n\t        var sql = 'SELECT digest FROM ' + ATTACH_AND_SEQ_STORE$1 +\n\t          ' WHERE digest IN (' +\n\t          digestsToCheck.map(function () { return '?'; }).join(',') +\n\t          ')';\n\t        tx.executeSql(sql, digestsToCheck, function (tx, res) {\n\t          var nonOrphanedDigests = new _Set();\n\t          for (var i = 0; i < res.rows.length; i++) {\n\t            nonOrphanedDigests.add(res.rows.item(i).digest);\n\t          }\n\t          digestsToCheck.forEach(function (digest) {\n\t            if (nonOrphanedDigests.has(digest)) {\n\t              return;\n\t            }\n\t            tx.executeSql(\n\t              'DELETE FROM ' + ATTACH_AND_SEQ_STORE$1 + ' WHERE digest=?',\n\t              [digest]);\n\t            tx.executeSql(\n\t              'DELETE FROM ' + ATTACH_STORE$1 + ' WHERE digest=?', [digest]);\n\t          });\n\t        });\n\t      });\n\t    });\n\t  }\n\t\n\t  // update by-seq and attach stores in parallel\n\t  revs.forEach(function (rev) {\n\t    var sql = 'SELECT seq FROM ' + BY_SEQ_STORE$1 +\n\t      ' WHERE doc_id=? AND rev=?';\n\t\n\t    tx.executeSql(sql, [docId, rev], function (tx, res) {\n\t      if (!res.rows.length) { // already deleted\n\t        return checkDone();\n\t      }\n\t      var seq = res.rows.item(0).seq;\n\t      seqs.push(seq);\n\t\n\t      tx.executeSql(\n\t        'DELETE FROM ' + BY_SEQ_STORE$1 + ' WHERE seq=?', [seq], checkDone);\n\t    });\n\t  });\n\t}\n\t\n\tfunction websqlError(callback) {\n\t  return function (event) {\n\t    guardedConsole('error', 'WebSQL threw an error', event);\n\t    // event may actually be a SQLError object, so report is as such\n\t    var errorNameMatch = event && event.constructor.toString()\n\t        .match(/function ([^\\(]+)/);\n\t    var errorName = (errorNameMatch && errorNameMatch[1]) || event.type;\n\t    var errorReason = event.target || event.message;\n\t    callback(createError(WSQ_ERROR, errorReason, errorName));\n\t  };\n\t}\n\t\n\tfunction getSize(opts) {\n\t  if ('size' in opts) {\n\t    // triggers immediate popup in iOS, fixes #2347\n\t    // e.g. 5000001 asks for 5 MB, 10000001 asks for 10 MB,\n\t    return opts.size * 1000000;\n\t  }\n\t  // In iOS, doesn't matter as long as it's <= 5000000.\n\t  // Except that if you request too much, our tests fail\n\t  // because of the native \"do you accept?\" popup.\n\t  // In Android <=4.3, this value is actually used as an\n\t  // honest-to-god ceiling for data, so we need to\n\t  // set it to a decently high number.\n\t  var isAndroid = typeof navigator !== 'undefined' &&\n\t    /Android/.test(navigator.userAgent);\n\t  return isAndroid ? 5000000 : 1; // in PhantomJS, if you use 0 it will crash\n\t}\n\t\n\tfunction websqlBulkDocs(dbOpts, req, opts, api, db, websqlChanges, callback) {\n\t  var newEdits = opts.new_edits;\n\t  var userDocs = req.docs;\n\t\n\t  // Parse the docs, give them a sequence number for the result\n\t  var docInfos = userDocs.map(function (doc) {\n\t    if (doc._id && isLocalId(doc._id)) {\n\t      return doc;\n\t    }\n\t    var newDoc = parseDoc(doc, newEdits);\n\t    return newDoc;\n\t  });\n\t\n\t  var docInfoErrors = docInfos.filter(function (docInfo) {\n\t    return docInfo.error;\n\t  });\n\t  if (docInfoErrors.length) {\n\t    return callback(docInfoErrors[0]);\n\t  }\n\t\n\t  var tx;\n\t  var results = new Array(docInfos.length);\n\t  var fetchedDocs = new _Map();\n\t\n\t  var preconditionErrored;\n\t  function complete() {\n\t    if (preconditionErrored) {\n\t      return callback(preconditionErrored);\n\t    }\n\t    websqlChanges.notify(api._name);\n\t    api._docCount = -1; // invalidate\n\t    callback(null, results);\n\t  }\n\t\n\t  function verifyAttachment(digest, callback) {\n\t    var sql = 'SELECT count(*) as cnt FROM ' + ATTACH_STORE$1 +\n\t      ' WHERE digest=?';\n\t    tx.executeSql(sql, [digest], function (tx, result) {\n\t      if (result.rows.item(0).cnt === 0) {\n\t        var err = createError(MISSING_STUB,\n\t          'unknown stub attachment with digest ' +\n\t          digest);\n\t        callback(err);\n\t      } else {\n\t        callback();\n\t      }\n\t    });\n\t  }\n\t\n\t  function verifyAttachments(finish) {\n\t    var digests = [];\n\t    docInfos.forEach(function (docInfo) {\n\t      if (docInfo.data && docInfo.data._attachments) {\n\t        Object.keys(docInfo.data._attachments).forEach(function (filename) {\n\t          var att = docInfo.data._attachments[filename];\n\t          if (att.stub) {\n\t            digests.push(att.digest);\n\t          }\n\t        });\n\t      }\n\t    });\n\t    if (!digests.length) {\n\t      return finish();\n\t    }\n\t    var numDone = 0;\n\t    var err;\n\t\n\t    function checkDone() {\n\t      if (++numDone === digests.length) {\n\t        finish(err);\n\t      }\n\t    }\n\t    digests.forEach(function (digest) {\n\t      verifyAttachment(digest, function (attErr) {\n\t        if (attErr && !err) {\n\t          err = attErr;\n\t        }\n\t        checkDone();\n\t      });\n\t    });\n\t  }\n\t\n\t  function writeDoc(docInfo, winningRev, winningRevIsDeleted, newRevIsDeleted,\n\t                    isUpdate, delta, resultsIdx, callback) {\n\t\n\t    function finish() {\n\t      var data = docInfo.data;\n\t      var deletedInt = newRevIsDeleted ? 1 : 0;\n\t\n\t      var id = data._id;\n\t      var rev = data._rev;\n\t      var json = stringifyDoc(data);\n\t      var sql = 'INSERT INTO ' + BY_SEQ_STORE$1 +\n\t        ' (doc_id, rev, json, deleted) VALUES (?, ?, ?, ?);';\n\t      var sqlArgs = [id, rev, json, deletedInt];\n\t\n\t      // map seqs to attachment digests, which\n\t      // we will need later during compaction\n\t      function insertAttachmentMappings(seq, callback) {\n\t        var attsAdded = 0;\n\t        var attsToAdd = Object.keys(data._attachments || {});\n\t\n\t        if (!attsToAdd.length) {\n\t          return callback();\n\t        }\n\t        function checkDone() {\n\t          if (++attsAdded === attsToAdd.length) {\n\t            callback();\n\t          }\n\t          return false; // ack handling a constraint error\n\t        }\n\t        function add(att) {\n\t          var sql = 'INSERT INTO ' + ATTACH_AND_SEQ_STORE$1 +\n\t            ' (digest, seq) VALUES (?,?)';\n\t          var sqlArgs = [data._attachments[att].digest, seq];\n\t          tx.executeSql(sql, sqlArgs, checkDone, checkDone);\n\t          // second callback is for a constaint error, which we ignore\n\t          // because this docid/rev has already been associated with\n\t          // the digest (e.g. when new_edits == false)\n\t        }\n\t        for (var i = 0; i < attsToAdd.length; i++) {\n\t          add(attsToAdd[i]); // do in parallel\n\t        }\n\t      }\n\t\n\t      tx.executeSql(sql, sqlArgs, function (tx, result) {\n\t        var seq = result.insertId;\n\t        insertAttachmentMappings(seq, function () {\n\t          dataWritten(tx, seq);\n\t        });\n\t      }, function () {\n\t        // constraint error, recover by updating instead (see #1638)\n\t        var fetchSql = select('seq', BY_SEQ_STORE$1, null,\n\t          'doc_id=? AND rev=?');\n\t        tx.executeSql(fetchSql, [id, rev], function (tx, res) {\n\t          var seq = res.rows.item(0).seq;\n\t          var sql = 'UPDATE ' + BY_SEQ_STORE$1 +\n\t            ' SET json=?, deleted=? WHERE doc_id=? AND rev=?;';\n\t          var sqlArgs = [json, deletedInt, id, rev];\n\t          tx.executeSql(sql, sqlArgs, function (tx) {\n\t            insertAttachmentMappings(seq, function () {\n\t              dataWritten(tx, seq);\n\t            });\n\t          });\n\t        });\n\t        return false; // ack that we've handled the error\n\t      });\n\t    }\n\t\n\t    function collectResults(attachmentErr) {\n\t      if (!err) {\n\t        if (attachmentErr) {\n\t          err = attachmentErr;\n\t          callback(err);\n\t        } else if (recv === attachments.length) {\n\t          finish();\n\t        }\n\t      }\n\t    }\n\t\n\t    var err = null;\n\t    var recv = 0;\n\t\n\t    docInfo.data._id = docInfo.metadata.id;\n\t    docInfo.data._rev = docInfo.metadata.rev;\n\t    var attachments = Object.keys(docInfo.data._attachments || {});\n\t\n\t\n\t    if (newRevIsDeleted) {\n\t      docInfo.data._deleted = true;\n\t    }\n\t\n\t    function attachmentSaved(err) {\n\t      recv++;\n\t      collectResults(err);\n\t    }\n\t\n\t    attachments.forEach(function (key) {\n\t      var att = docInfo.data._attachments[key];\n\t      if (!att.stub) {\n\t        var data = att.data;\n\t        delete att.data;\n\t        att.revpos = parseInt(winningRev, 10);\n\t        var digest = att.digest;\n\t        saveAttachment(digest, data, attachmentSaved);\n\t      } else {\n\t        recv++;\n\t        collectResults();\n\t      }\n\t    });\n\t\n\t    if (!attachments.length) {\n\t      finish();\n\t    }\n\t\n\t    function dataWritten(tx, seq) {\n\t      var id = docInfo.metadata.id;\n\t\n\t      var revsToCompact = docInfo.stemmedRevs || [];\n\t      if (isUpdate && api.auto_compaction) {\n\t        revsToCompact = compactTree(docInfo.metadata).concat(revsToCompact);\n\t      }\n\t      if (revsToCompact.length) {\n\t        compactRevs$1(revsToCompact, id, tx);\n\t      }\n\t\n\t      docInfo.metadata.seq = seq;\n\t      delete docInfo.metadata.rev;\n\t\n\t      var sql = isUpdate ?\n\t      'UPDATE ' + DOC_STORE$1 +\n\t      ' SET json=?, max_seq=?, winningseq=' +\n\t      '(SELECT seq FROM ' + BY_SEQ_STORE$1 +\n\t      ' WHERE doc_id=' + DOC_STORE$1 + '.id AND rev=?) WHERE id=?'\n\t        : 'INSERT INTO ' + DOC_STORE$1 +\n\t      ' (id, winningseq, max_seq, json) VALUES (?,?,?,?);';\n\t      var metadataStr = safeJsonStringify(docInfo.metadata);\n\t      var params = isUpdate ?\n\t        [metadataStr, seq, winningRev, id] :\n\t        [id, seq, seq, metadataStr];\n\t      tx.executeSql(sql, params, function () {\n\t        results[resultsIdx] = {\n\t          ok: true,\n\t          id: docInfo.metadata.id,\n\t          rev: winningRev\n\t        };\n\t        fetchedDocs.set(id, docInfo.metadata);\n\t        callback();\n\t      });\n\t    }\n\t  }\n\t\n\t  function websqlProcessDocs() {\n\t    processDocs(dbOpts.revs_limit, docInfos, api, fetchedDocs, tx,\n\t                results, writeDoc, opts);\n\t  }\n\t\n\t  function fetchExistingDocs(callback) {\n\t    if (!docInfos.length) {\n\t      return callback();\n\t    }\n\t\n\t    var numFetched = 0;\n\t\n\t    function checkDone() {\n\t      if (++numFetched === docInfos.length) {\n\t        callback();\n\t      }\n\t    }\n\t\n\t    docInfos.forEach(function (docInfo) {\n\t      if (docInfo._id && isLocalId(docInfo._id)) {\n\t        return checkDone(); // skip local docs\n\t      }\n\t      var id = docInfo.metadata.id;\n\t      tx.executeSql('SELECT json FROM ' + DOC_STORE$1 +\n\t      ' WHERE id = ?', [id], function (tx, result) {\n\t        if (result.rows.length) {\n\t          var metadata = safeJsonParse(result.rows.item(0).json);\n\t          fetchedDocs.set(id, metadata);\n\t        }\n\t        checkDone();\n\t      });\n\t    });\n\t  }\n\t\n\t  function saveAttachment(digest, data, callback) {\n\t    var sql = 'SELECT digest FROM ' + ATTACH_STORE$1 + ' WHERE digest=?';\n\t    tx.executeSql(sql, [digest], function (tx, result) {\n\t      if (result.rows.length) { // attachment already exists\n\t        return callback();\n\t      }\n\t      // we could just insert before selecting and catch the error,\n\t      // but my hunch is that it's cheaper not to serialize the blob\n\t      // from JS to C if we don't have to (TODO: confirm this)\n\t      sql = 'INSERT INTO ' + ATTACH_STORE$1 +\n\t      ' (digest, body, escaped) VALUES (?,?,1)';\n\t      tx.executeSql(sql, [digest, escapeBlob(data)], function () {\n\t        callback();\n\t      }, function () {\n\t        // ignore constaint errors, means it already exists\n\t        callback();\n\t        return false; // ack we handled the error\n\t      });\n\t    });\n\t  }\n\t\n\t  preprocessAttachments(docInfos, 'binary', function (err) {\n\t    if (err) {\n\t      return callback(err);\n\t    }\n\t    db.transaction(function (txn) {\n\t      tx = txn;\n\t      verifyAttachments(function (err) {\n\t        if (err) {\n\t          preconditionErrored = err;\n\t        } else {\n\t          fetchExistingDocs(websqlProcessDocs);\n\t        }\n\t      });\n\t    }, websqlError(callback), complete);\n\t  });\n\t}\n\t\n\tvar cachedDatabases = new _Map();\n\t\n\t// openDatabase passed in through opts (e.g. for node-websql)\n\tfunction openDatabaseWithOpts(opts) {\n\t  return opts.websql(opts.name, opts.version, opts.description, opts.size);\n\t}\n\t\n\tfunction openDBSafely(opts) {\n\t  try {\n\t    return {\n\t      db: openDatabaseWithOpts(opts)\n\t    };\n\t  } catch (err) {\n\t    return {\n\t      error: err\n\t    };\n\t  }\n\t}\n\t\n\tfunction openDB$1(opts) {\n\t  var cachedResult = cachedDatabases.get(opts.name);\n\t  if (!cachedResult) {\n\t    cachedResult = openDBSafely(opts);\n\t    cachedDatabases.set(opts.name, cachedResult);\n\t  }\n\t  return cachedResult;\n\t}\n\t\n\tvar websqlChanges = new Changes$1();\n\t\n\tfunction fetchAttachmentsIfNecessary$1(doc, opts, api, txn, cb) {\n\t  var attachments = Object.keys(doc._attachments || {});\n\t  if (!attachments.length) {\n\t    return cb && cb();\n\t  }\n\t  var numDone = 0;\n\t\n\t  function checkDone() {\n\t    if (++numDone === attachments.length && cb) {\n\t      cb();\n\t    }\n\t  }\n\t\n\t  function fetchAttachment(doc, att) {\n\t    var attObj = doc._attachments[att];\n\t    var attOpts = {binary: opts.binary, ctx: txn};\n\t    api._getAttachment(doc._id, att, attObj, attOpts, function (_, data) {\n\t      doc._attachments[att] = jsExtend.extend(\n\t        pick(attObj, ['digest', 'content_type']),\n\t        { data: data }\n\t      );\n\t      checkDone();\n\t    });\n\t  }\n\t\n\t  attachments.forEach(function (att) {\n\t    if (opts.attachments && opts.include_docs) {\n\t      fetchAttachment(doc, att);\n\t    } else {\n\t      doc._attachments[att].stub = true;\n\t      checkDone();\n\t    }\n\t  });\n\t}\n\t\n\tvar POUCH_VERSION = 1;\n\t\n\t// these indexes cover the ground for most allDocs queries\n\tvar BY_SEQ_STORE_DELETED_INDEX_SQL =\n\t  'CREATE INDEX IF NOT EXISTS \\'by-seq-deleted-idx\\' ON ' +\n\t  BY_SEQ_STORE$1 + ' (seq, deleted)';\n\tvar BY_SEQ_STORE_DOC_ID_REV_INDEX_SQL =\n\t  'CREATE UNIQUE INDEX IF NOT EXISTS \\'by-seq-doc-id-rev\\' ON ' +\n\t    BY_SEQ_STORE$1 + ' (doc_id, rev)';\n\tvar DOC_STORE_WINNINGSEQ_INDEX_SQL =\n\t  'CREATE INDEX IF NOT EXISTS \\'doc-winningseq-idx\\' ON ' +\n\t  DOC_STORE$1 + ' (winningseq)';\n\tvar ATTACH_AND_SEQ_STORE_SEQ_INDEX_SQL =\n\t  'CREATE INDEX IF NOT EXISTS \\'attach-seq-seq-idx\\' ON ' +\n\t    ATTACH_AND_SEQ_STORE$1 + ' (seq)';\n\tvar ATTACH_AND_SEQ_STORE_ATTACH_INDEX_SQL =\n\t  'CREATE UNIQUE INDEX IF NOT EXISTS \\'attach-seq-digest-idx\\' ON ' +\n\t    ATTACH_AND_SEQ_STORE$1 + ' (digest, seq)';\n\t\n\tvar DOC_STORE_AND_BY_SEQ_JOINER = BY_SEQ_STORE$1 +\n\t  '.seq = ' + DOC_STORE$1 + '.winningseq';\n\t\n\tvar SELECT_DOCS = BY_SEQ_STORE$1 + '.seq AS seq, ' +\n\t  BY_SEQ_STORE$1 + '.deleted AS deleted, ' +\n\t  BY_SEQ_STORE$1 + '.json AS data, ' +\n\t  BY_SEQ_STORE$1 + '.rev AS rev, ' +\n\t  DOC_STORE$1 + '.json AS metadata';\n\t\n\tfunction WebSqlPouch$1(opts, callback) {\n\t  var api = this;\n\t  var instanceId = null;\n\t  var size = getSize(opts);\n\t  var idRequests = [];\n\t  var encoding;\n\t\n\t  api._docCount = -1; // cache sqlite count(*) for performance\n\t  api._name = opts.name;\n\t\n\t  // extend the options here, because sqlite plugin has a ton of options\n\t  // and they are constantly changing, so it's more prudent to allow anything\n\t  var websqlOpts = jsExtend.extend({}, opts, {\n\t    version: POUCH_VERSION,\n\t    description: opts.name,\n\t    size: size\n\t  });\n\t  var openDBResult = openDB$1(websqlOpts);\n\t  if (openDBResult.error) {\n\t    return websqlError(callback)(openDBResult.error);\n\t  }\n\t  var db = openDBResult.db;\n\t  if (typeof db.readTransaction !== 'function') {\n\t    // doesn't exist in sqlite plugin\n\t    db.readTransaction = db.transaction;\n\t  }\n\t\n\t  function dbCreated() {\n\t    // note the db name in case the browser upgrades to idb\n\t    if (hasLocalStorage()) {\n\t      window.localStorage['_pouch__websqldb_' + api._name] = true;\n\t    }\n\t    callback(null, api);\n\t  }\n\t\n\t  // In this migration, we added the 'deleted' and 'local' columns to the\n\t  // by-seq and doc store tables.\n\t  // To preserve existing user data, we re-process all the existing JSON\n\t  // and add these values.\n\t  // Called migration2 because it corresponds to adapter version (db_version) #2\n\t  function runMigration2(tx, callback) {\n\t    // index used for the join in the allDocs query\n\t    tx.executeSql(DOC_STORE_WINNINGSEQ_INDEX_SQL);\n\t\n\t    tx.executeSql('ALTER TABLE ' + BY_SEQ_STORE$1 +\n\t      ' ADD COLUMN deleted TINYINT(1) DEFAULT 0', [], function () {\n\t      tx.executeSql(BY_SEQ_STORE_DELETED_INDEX_SQL);\n\t      tx.executeSql('ALTER TABLE ' + DOC_STORE$1 +\n\t        ' ADD COLUMN local TINYINT(1) DEFAULT 0', [], function () {\n\t        tx.executeSql('CREATE INDEX IF NOT EXISTS \\'doc-store-local-idx\\' ON ' +\n\t          DOC_STORE$1 + ' (local, id)');\n\t\n\t        var sql = 'SELECT ' + DOC_STORE$1 + '.winningseq AS seq, ' + DOC_STORE$1 +\n\t          '.json AS metadata FROM ' + BY_SEQ_STORE$1 + ' JOIN ' + DOC_STORE$1 +\n\t          ' ON ' + BY_SEQ_STORE$1 + '.seq = ' + DOC_STORE$1 + '.winningseq';\n\t\n\t        tx.executeSql(sql, [], function (tx, result) {\n\t\n\t          var deleted = [];\n\t          var local = [];\n\t\n\t          for (var i = 0; i < result.rows.length; i++) {\n\t            var item = result.rows.item(i);\n\t            var seq = item.seq;\n\t            var metadata = JSON.parse(item.metadata);\n\t            if (isDeleted(metadata)) {\n\t              deleted.push(seq);\n\t            }\n\t            if (isLocalId(metadata.id)) {\n\t              local.push(metadata.id);\n\t            }\n\t          }\n\t          tx.executeSql('UPDATE ' + DOC_STORE$1 + 'SET local = 1 WHERE id IN ' +\n\t            qMarks(local.length), local, function () {\n\t            tx.executeSql('UPDATE ' + BY_SEQ_STORE$1 +\n\t              ' SET deleted = 1 WHERE seq IN ' +\n\t              qMarks(deleted.length), deleted, callback);\n\t          });\n\t        });\n\t      });\n\t    });\n\t  }\n\t\n\t  // in this migration, we make all the local docs unversioned\n\t  function runMigration3(tx, callback) {\n\t    var local = 'CREATE TABLE IF NOT EXISTS ' + LOCAL_STORE$1 +\n\t      ' (id UNIQUE, rev, json)';\n\t    tx.executeSql(local, [], function () {\n\t      var sql = 'SELECT ' + DOC_STORE$1 + '.id AS id, ' +\n\t        BY_SEQ_STORE$1 + '.json AS data ' +\n\t        'FROM ' + BY_SEQ_STORE$1 + ' JOIN ' +\n\t        DOC_STORE$1 + ' ON ' + BY_SEQ_STORE$1 + '.seq = ' +\n\t        DOC_STORE$1 + '.winningseq WHERE local = 1';\n\t      tx.executeSql(sql, [], function (tx, res) {\n\t        var rows = [];\n\t        for (var i = 0; i < res.rows.length; i++) {\n\t          rows.push(res.rows.item(i));\n\t        }\n\t        function doNext() {\n\t          if (!rows.length) {\n\t            return callback(tx);\n\t          }\n\t          var row = rows.shift();\n\t          var rev = JSON.parse(row.data)._rev;\n\t          tx.executeSql('INSERT INTO ' + LOCAL_STORE$1 +\n\t              ' (id, rev, json) VALUES (?,?,?)',\n\t              [row.id, rev, row.data], function (tx) {\n\t            tx.executeSql('DELETE FROM ' + DOC_STORE$1 + ' WHERE id=?',\n\t                [row.id], function (tx) {\n\t              tx.executeSql('DELETE FROM ' + BY_SEQ_STORE$1 + ' WHERE seq=?',\n\t                  [row.seq], function () {\n\t                doNext();\n\t              });\n\t            });\n\t          });\n\t        }\n\t        doNext();\n\t      });\n\t    });\n\t  }\n\t\n\t  // in this migration, we remove doc_id_rev and just use rev\n\t  function runMigration4(tx, callback) {\n\t\n\t    function updateRows(rows) {\n\t      function doNext() {\n\t        if (!rows.length) {\n\t          return callback(tx);\n\t        }\n\t        var row = rows.shift();\n\t        var doc_id_rev = parseHexString(row.hex, encoding);\n\t        var idx = doc_id_rev.lastIndexOf('::');\n\t        var doc_id = doc_id_rev.substring(0, idx);\n\t        var rev = doc_id_rev.substring(idx + 2);\n\t        var sql = 'UPDATE ' + BY_SEQ_STORE$1 +\n\t          ' SET doc_id=?, rev=? WHERE doc_id_rev=?';\n\t        tx.executeSql(sql, [doc_id, rev, doc_id_rev], function () {\n\t          doNext();\n\t        });\n\t      }\n\t      doNext();\n\t    }\n\t\n\t    var sql = 'ALTER TABLE ' + BY_SEQ_STORE$1 + ' ADD COLUMN doc_id';\n\t    tx.executeSql(sql, [], function (tx) {\n\t      var sql = 'ALTER TABLE ' + BY_SEQ_STORE$1 + ' ADD COLUMN rev';\n\t      tx.executeSql(sql, [], function (tx) {\n\t        tx.executeSql(BY_SEQ_STORE_DOC_ID_REV_INDEX_SQL, [], function (tx) {\n\t          var sql = 'SELECT hex(doc_id_rev) as hex FROM ' + BY_SEQ_STORE$1;\n\t          tx.executeSql(sql, [], function (tx, res) {\n\t            var rows = [];\n\t            for (var i = 0; i < res.rows.length; i++) {\n\t              rows.push(res.rows.item(i));\n\t            }\n\t            updateRows(rows);\n\t          });\n\t        });\n\t      });\n\t    });\n\t  }\n\t\n\t  // in this migration, we add the attach_and_seq table\n\t  // for issue #2818\n\t  function runMigration5(tx, callback) {\n\t\n\t    function migrateAttsAndSeqs(tx) {\n\t      // need to actually populate the table. this is the expensive part,\n\t      // so as an optimization, check first that this database even\n\t      // contains attachments\n\t      var sql = 'SELECT COUNT(*) AS cnt FROM ' + ATTACH_STORE$1;\n\t      tx.executeSql(sql, [], function (tx, res) {\n\t        var count = res.rows.item(0).cnt;\n\t        if (!count) {\n\t          return callback(tx);\n\t        }\n\t\n\t        var offset = 0;\n\t        var pageSize = 10;\n\t        function nextPage() {\n\t          var sql = select(\n\t            SELECT_DOCS + ', ' + DOC_STORE$1 + '.id AS id',\n\t            [DOC_STORE$1, BY_SEQ_STORE$1],\n\t            DOC_STORE_AND_BY_SEQ_JOINER,\n\t            null,\n\t            DOC_STORE$1 + '.id '\n\t          );\n\t          sql += ' LIMIT ' + pageSize + ' OFFSET ' + offset;\n\t          offset += pageSize;\n\t          tx.executeSql(sql, [], function (tx, res) {\n\t            if (!res.rows.length) {\n\t              return callback(tx);\n\t            }\n\t            var digestSeqs = {};\n\t            function addDigestSeq(digest, seq) {\n\t              // uniq digest/seq pairs, just in case there are dups\n\t              var seqs = digestSeqs[digest] = (digestSeqs[digest] || []);\n\t              if (seqs.indexOf(seq) === -1) {\n\t                seqs.push(seq);\n\t              }\n\t            }\n\t            for (var i = 0; i < res.rows.length; i++) {\n\t              var row = res.rows.item(i);\n\t              var doc = unstringifyDoc(row.data, row.id, row.rev);\n\t              var atts = Object.keys(doc._attachments || {});\n\t              for (var j = 0; j < atts.length; j++) {\n\t                var att = doc._attachments[atts[j]];\n\t                addDigestSeq(att.digest, row.seq);\n\t              }\n\t            }\n\t            var digestSeqPairs = [];\n\t            Object.keys(digestSeqs).forEach(function (digest) {\n\t              var seqs = digestSeqs[digest];\n\t              seqs.forEach(function (seq) {\n\t                digestSeqPairs.push([digest, seq]);\n\t              });\n\t            });\n\t            if (!digestSeqPairs.length) {\n\t              return nextPage();\n\t            }\n\t            var numDone = 0;\n\t            digestSeqPairs.forEach(function (pair) {\n\t              var sql = 'INSERT INTO ' + ATTACH_AND_SEQ_STORE$1 +\n\t                ' (digest, seq) VALUES (?,?)';\n\t              tx.executeSql(sql, pair, function () {\n\t                if (++numDone === digestSeqPairs.length) {\n\t                  nextPage();\n\t                }\n\t              });\n\t            });\n\t          });\n\t        }\n\t        nextPage();\n\t      });\n\t    }\n\t\n\t    var attachAndRev = 'CREATE TABLE IF NOT EXISTS ' +\n\t      ATTACH_AND_SEQ_STORE$1 + ' (digest, seq INTEGER)';\n\t    tx.executeSql(attachAndRev, [], function (tx) {\n\t      tx.executeSql(\n\t        ATTACH_AND_SEQ_STORE_ATTACH_INDEX_SQL, [], function (tx) {\n\t          tx.executeSql(\n\t            ATTACH_AND_SEQ_STORE_SEQ_INDEX_SQL, [],\n\t            migrateAttsAndSeqs);\n\t        });\n\t    });\n\t  }\n\t\n\t  // in this migration, we use escapeBlob() and unescapeBlob()\n\t  // instead of reading out the binary as HEX, which is slow\n\t  function runMigration6(tx, callback) {\n\t    var sql = 'ALTER TABLE ' + ATTACH_STORE$1 +\n\t      ' ADD COLUMN escaped TINYINT(1) DEFAULT 0';\n\t    tx.executeSql(sql, [], callback);\n\t  }\n\t\n\t  // issue #3136, in this migration we need a \"latest seq\" as well\n\t  // as the \"winning seq\" in the doc store\n\t  function runMigration7(tx, callback) {\n\t    var sql = 'ALTER TABLE ' + DOC_STORE$1 +\n\t      ' ADD COLUMN max_seq INTEGER';\n\t    tx.executeSql(sql, [], function (tx) {\n\t      var sql = 'UPDATE ' + DOC_STORE$1 + ' SET max_seq=(SELECT MAX(seq) FROM ' +\n\t        BY_SEQ_STORE$1 + ' WHERE doc_id=id)';\n\t      tx.executeSql(sql, [], function (tx) {\n\t        // add unique index after filling, else we'll get a constraint\n\t        // error when we do the ALTER TABLE\n\t        var sql =\n\t          'CREATE UNIQUE INDEX IF NOT EXISTS \\'doc-max-seq-idx\\' ON ' +\n\t          DOC_STORE$1 + ' (max_seq)';\n\t        tx.executeSql(sql, [], callback);\n\t      });\n\t    });\n\t  }\n\t\n\t  function checkEncoding(tx, cb) {\n\t    // UTF-8 on chrome/android, UTF-16 on safari < 7.1\n\t    tx.executeSql('SELECT HEX(\"a\") AS hex', [], function (tx, res) {\n\t        var hex = res.rows.item(0).hex;\n\t        encoding = hex.length === 2 ? 'UTF-8' : 'UTF-16';\n\t        cb();\n\t      }\n\t    );\n\t  }\n\t\n\t  function onGetInstanceId() {\n\t    while (idRequests.length > 0) {\n\t      var idCallback = idRequests.pop();\n\t      idCallback(null, instanceId);\n\t    }\n\t  }\n\t\n\t  function onGetVersion(tx, dbVersion) {\n\t    if (dbVersion === 0) {\n\t      // initial schema\n\t\n\t      var meta = 'CREATE TABLE IF NOT EXISTS ' + META_STORE$1 +\n\t        ' (dbid, db_version INTEGER)';\n\t      var attach = 'CREATE TABLE IF NOT EXISTS ' + ATTACH_STORE$1 +\n\t        ' (digest UNIQUE, escaped TINYINT(1), body BLOB)';\n\t      var attachAndRev = 'CREATE TABLE IF NOT EXISTS ' +\n\t        ATTACH_AND_SEQ_STORE$1 + ' (digest, seq INTEGER)';\n\t      // TODO: migrate winningseq to INTEGER\n\t      var doc = 'CREATE TABLE IF NOT EXISTS ' + DOC_STORE$1 +\n\t        ' (id unique, json, winningseq, max_seq INTEGER UNIQUE)';\n\t      var seq = 'CREATE TABLE IF NOT EXISTS ' + BY_SEQ_STORE$1 +\n\t        ' (seq INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, ' +\n\t        'json, deleted TINYINT(1), doc_id, rev)';\n\t      var local = 'CREATE TABLE IF NOT EXISTS ' + LOCAL_STORE$1 +\n\t        ' (id UNIQUE, rev, json)';\n\t\n\t      // creates\n\t      tx.executeSql(attach);\n\t      tx.executeSql(local);\n\t      tx.executeSql(attachAndRev, [], function () {\n\t        tx.executeSql(ATTACH_AND_SEQ_STORE_SEQ_INDEX_SQL);\n\t        tx.executeSql(ATTACH_AND_SEQ_STORE_ATTACH_INDEX_SQL);\n\t      });\n\t      tx.executeSql(doc, [], function () {\n\t        tx.executeSql(DOC_STORE_WINNINGSEQ_INDEX_SQL);\n\t        tx.executeSql(seq, [], function () {\n\t          tx.executeSql(BY_SEQ_STORE_DELETED_INDEX_SQL);\n\t          tx.executeSql(BY_SEQ_STORE_DOC_ID_REV_INDEX_SQL);\n\t          tx.executeSql(meta, [], function () {\n\t            // mark the db version, and new dbid\n\t            var initSeq = 'INSERT INTO ' + META_STORE$1 +\n\t              ' (db_version, dbid) VALUES (?,?)';\n\t            instanceId = uuid();\n\t            var initSeqArgs = [ADAPTER_VERSION$1, instanceId];\n\t            tx.executeSql(initSeq, initSeqArgs, function () {\n\t              onGetInstanceId();\n\t            });\n\t          });\n\t        });\n\t      });\n\t    } else { // version > 0\n\t\n\t      var setupDone = function () {\n\t        var migrated = dbVersion < ADAPTER_VERSION$1;\n\t        if (migrated) {\n\t          // update the db version within this transaction\n\t          tx.executeSql('UPDATE ' + META_STORE$1 + ' SET db_version = ' +\n\t            ADAPTER_VERSION$1);\n\t        }\n\t        // notify db.id() callers\n\t        var sql = 'SELECT dbid FROM ' + META_STORE$1;\n\t        tx.executeSql(sql, [], function (tx, result) {\n\t          instanceId = result.rows.item(0).dbid;\n\t          onGetInstanceId();\n\t        });\n\t      };\n\t\n\t      // would love to use promises here, but then websql\n\t      // ends the transaction early\n\t      var tasks = [\n\t        runMigration2,\n\t        runMigration3,\n\t        runMigration4,\n\t        runMigration5,\n\t        runMigration6,\n\t        runMigration7,\n\t        setupDone\n\t      ];\n\t\n\t      // run each migration sequentially\n\t      var i = dbVersion;\n\t      var nextMigration = function (tx) {\n\t        tasks[i - 1](tx, nextMigration);\n\t        i++;\n\t      };\n\t      nextMigration(tx);\n\t    }\n\t  }\n\t\n\t  function setup() {\n\t    db.transaction(function (tx) {\n\t      // first check the encoding\n\t      checkEncoding(tx, function () {\n\t        // then get the version\n\t        fetchVersion(tx);\n\t      });\n\t    }, websqlError(callback), dbCreated);\n\t  }\n\t\n\t  function fetchVersion(tx) {\n\t    var sql = 'SELECT sql FROM sqlite_master WHERE tbl_name = ' + META_STORE$1;\n\t    tx.executeSql(sql, [], function (tx, result) {\n\t      if (!result.rows.length) {\n\t        // database hasn't even been created yet (version 0)\n\t        onGetVersion(tx, 0);\n\t      } else if (!/db_version/.test(result.rows.item(0).sql)) {\n\t        // table was created, but without the new db_version column,\n\t        // so add it.\n\t        tx.executeSql('ALTER TABLE ' + META_STORE$1 +\n\t          ' ADD COLUMN db_version INTEGER', [], function () {\n\t          // before version 2, this column didn't even exist\n\t          onGetVersion(tx, 1);\n\t        });\n\t      } else { // column exists, we can safely get it\n\t        tx.executeSql('SELECT db_version FROM ' + META_STORE$1,\n\t          [], function (tx, result) {\n\t          var dbVersion = result.rows.item(0).db_version;\n\t          onGetVersion(tx, dbVersion);\n\t        });\n\t      }\n\t    });\n\t  }\n\t\n\t  setup();\n\t\n\t  api.type = function () {\n\t    return 'websql';\n\t  };\n\t\n\t  api._id = toPromise(function (callback) {\n\t    callback(null, instanceId);\n\t  });\n\t\n\t  api._info = function (callback) {\n\t    db.readTransaction(function (tx) {\n\t      countDocs(tx, function (docCount) {\n\t        var sql = 'SELECT MAX(seq) AS seq FROM ' + BY_SEQ_STORE$1;\n\t        tx.executeSql(sql, [], function (tx, res) {\n\t          var updateSeq = res.rows.item(0).seq || 0;\n\t          callback(null, {\n\t            doc_count: docCount,\n\t            update_seq: updateSeq,\n\t            websql_encoding: encoding\n\t          });\n\t        });\n\t      });\n\t    }, websqlError(callback));\n\t  };\n\t\n\t  api._bulkDocs = function (req, reqOpts, callback) {\n\t    websqlBulkDocs(opts, req, reqOpts, api, db, websqlChanges, callback);\n\t  };\n\t\n\t  api._get = function (id, opts, callback) {\n\t    var doc;\n\t    var metadata;\n\t    var err;\n\t    var tx = opts.ctx;\n\t    if (!tx) {\n\t      return db.readTransaction(function (txn) {\n\t        api._get(id, jsExtend.extend({ctx: txn}, opts), callback);\n\t      });\n\t    }\n\t\n\t    function finish() {\n\t      callback(err, {doc: doc, metadata: metadata, ctx: tx});\n\t    }\n\t\n\t    var sql;\n\t    var sqlArgs;\n\t    if (opts.rev) {\n\t      sql = select(\n\t        SELECT_DOCS,\n\t        [DOC_STORE$1, BY_SEQ_STORE$1],\n\t        DOC_STORE$1 + '.id=' + BY_SEQ_STORE$1 + '.doc_id',\n\t        [BY_SEQ_STORE$1 + '.doc_id=?', BY_SEQ_STORE$1 + '.rev=?']);\n\t      sqlArgs = [id, opts.rev];\n\t    } else {\n\t      sql = select(\n\t        SELECT_DOCS,\n\t        [DOC_STORE$1, BY_SEQ_STORE$1],\n\t        DOC_STORE_AND_BY_SEQ_JOINER,\n\t        DOC_STORE$1 + '.id=?');\n\t      sqlArgs = [id];\n\t    }\n\t    tx.executeSql(sql, sqlArgs, function (a, results) {\n\t      if (!results.rows.length) {\n\t        err = createError(MISSING_DOC, 'missing');\n\t        return finish();\n\t      }\n\t      var item = results.rows.item(0);\n\t      metadata = safeJsonParse(item.metadata);\n\t      if (item.deleted && !opts.rev) {\n\t        err = createError(MISSING_DOC, 'deleted');\n\t        return finish();\n\t      }\n\t      doc = unstringifyDoc(item.data, metadata.id, item.rev);\n\t      finish();\n\t    });\n\t  };\n\t\n\t  function countDocs(tx, callback) {\n\t\n\t    if (api._docCount !== -1) {\n\t      return callback(api._docCount);\n\t    }\n\t\n\t    // count the total rows\n\t    var sql = select(\n\t      'COUNT(' + DOC_STORE$1 + '.id) AS \\'num\\'',\n\t      [DOC_STORE$1, BY_SEQ_STORE$1],\n\t      DOC_STORE_AND_BY_SEQ_JOINER,\n\t      BY_SEQ_STORE$1 + '.deleted=0');\n\t\n\t    tx.executeSql(sql, [], function (tx, result) {\n\t      api._docCount = result.rows.item(0).num;\n\t      callback(api._docCount);\n\t    });\n\t  }\n\t\n\t  api._allDocs = function (opts, callback) {\n\t    var results = [];\n\t    var totalRows;\n\t\n\t    var start = 'startkey' in opts ? opts.startkey : false;\n\t    var end = 'endkey' in opts ? opts.endkey : false;\n\t    var key = 'key' in opts ? opts.key : false;\n\t    var descending = 'descending' in opts ? opts.descending : false;\n\t    var limit = 'limit' in opts ? opts.limit : -1;\n\t    var offset = 'skip' in opts ? opts.skip : 0;\n\t    var inclusiveEnd = opts.inclusive_end !== false;\n\t\n\t    var sqlArgs = [];\n\t    var criteria = [];\n\t\n\t    if (key !== false) {\n\t      criteria.push(DOC_STORE$1 + '.id = ?');\n\t      sqlArgs.push(key);\n\t    } else if (start !== false || end !== false) {\n\t      if (start !== false) {\n\t        criteria.push(DOC_STORE$1 + '.id ' + (descending ? '<=' : '>=') + ' ?');\n\t        sqlArgs.push(start);\n\t      }\n\t      if (end !== false) {\n\t        var comparator = descending ? '>' : '<';\n\t        if (inclusiveEnd) {\n\t          comparator += '=';\n\t        }\n\t        criteria.push(DOC_STORE$1 + '.id ' + comparator + ' ?');\n\t        sqlArgs.push(end);\n\t      }\n\t      if (key !== false) {\n\t        criteria.push(DOC_STORE$1 + '.id = ?');\n\t        sqlArgs.push(key);\n\t      }\n\t    }\n\t\n\t    if (opts.deleted !== 'ok') {\n\t      // report deleted if keys are specified\n\t      criteria.push(BY_SEQ_STORE$1 + '.deleted = 0');\n\t    }\n\t\n\t    db.readTransaction(function (tx) {\n\t\n\t      // first count up the total rows\n\t      countDocs(tx, function (count) {\n\t        totalRows = count;\n\t\n\t        if (limit === 0) {\n\t          return;\n\t        }\n\t\n\t        // then actually fetch the documents\n\t        var sql = select(\n\t          SELECT_DOCS,\n\t          [DOC_STORE$1, BY_SEQ_STORE$1],\n\t          DOC_STORE_AND_BY_SEQ_JOINER,\n\t          criteria,\n\t          DOC_STORE$1 + '.id ' + (descending ? 'DESC' : 'ASC')\n\t          );\n\t        sql += ' LIMIT ' + limit + ' OFFSET ' + offset;\n\t\n\t        tx.executeSql(sql, sqlArgs, function (tx, result) {\n\t          for (var i = 0, l = result.rows.length; i < l; i++) {\n\t            var item = result.rows.item(i);\n\t            var metadata = safeJsonParse(item.metadata);\n\t            var id = metadata.id;\n\t            var data = unstringifyDoc(item.data, id, item.rev);\n\t            var winningRev = data._rev;\n\t            var doc = {\n\t              id: id,\n\t              key: id,\n\t              value: {rev: winningRev}\n\t            };\n\t            if (opts.include_docs) {\n\t              doc.doc = data;\n\t              doc.doc._rev = winningRev;\n\t              if (opts.conflicts) {\n\t                doc.doc._conflicts = collectConflicts(metadata);\n\t              }\n\t              fetchAttachmentsIfNecessary$1(doc.doc, opts, api, tx);\n\t            }\n\t            if (item.deleted) {\n\t              if (opts.deleted === 'ok') {\n\t                doc.value.deleted = true;\n\t                doc.doc = null;\n\t              } else {\n\t                continue;\n\t              }\n\t            }\n\t            results.push(doc);\n\t          }\n\t        });\n\t      });\n\t    }, websqlError(callback), function () {\n\t      callback(null, {\n\t        total_rows: totalRows,\n\t        offset: opts.skip,\n\t        rows: results\n\t      });\n\t    });\n\t  };\n\t\n\t  api._changes = function (opts) {\n\t    opts = clone(opts);\n\t\n\t    if (opts.continuous) {\n\t      var id = api._name + ':' + uuid();\n\t      websqlChanges.addListener(api._name, id, api, opts);\n\t      websqlChanges.notify(api._name);\n\t      return {\n\t        cancel: function () {\n\t          websqlChanges.removeListener(api._name, id);\n\t        }\n\t      };\n\t    }\n\t\n\t    var descending = opts.descending;\n\t\n\t    // Ignore the `since` parameter when `descending` is true\n\t    opts.since = opts.since && !descending ? opts.since : 0;\n\t\n\t    var limit = 'limit' in opts ? opts.limit : -1;\n\t    if (limit === 0) {\n\t      limit = 1; // per CouchDB _changes spec\n\t    }\n\t\n\t    var returnDocs;\n\t    if ('return_docs' in opts) {\n\t      returnDocs = opts.return_docs;\n\t    } else if ('returnDocs' in opts) {\n\t      // TODO: Remove 'returnDocs' in favor of 'return_docs' in a future release\n\t      returnDocs = opts.returnDocs;\n\t    } else {\n\t      returnDocs = true;\n\t    }\n\t    var results = [];\n\t    var numResults = 0;\n\t\n\t    function fetchChanges() {\n\t\n\t      var selectStmt =\n\t        DOC_STORE$1 + '.json AS metadata, ' +\n\t        DOC_STORE$1 + '.max_seq AS maxSeq, ' +\n\t        BY_SEQ_STORE$1 + '.json AS winningDoc, ' +\n\t        BY_SEQ_STORE$1 + '.rev AS winningRev ';\n\t\n\t      var from = DOC_STORE$1 + ' JOIN ' + BY_SEQ_STORE$1;\n\t\n\t      var joiner = DOC_STORE$1 + '.id=' + BY_SEQ_STORE$1 + '.doc_id' +\n\t        ' AND ' + DOC_STORE$1 + '.winningseq=' + BY_SEQ_STORE$1 + '.seq';\n\t\n\t      var criteria = ['maxSeq > ?'];\n\t      var sqlArgs = [opts.since];\n\t\n\t      if (opts.doc_ids) {\n\t        criteria.push(DOC_STORE$1 + '.id IN ' + qMarks(opts.doc_ids.length));\n\t        sqlArgs = sqlArgs.concat(opts.doc_ids);\n\t      }\n\t\n\t      var orderBy = 'maxSeq ' + (descending ? 'DESC' : 'ASC');\n\t\n\t      var sql = select(selectStmt, from, joiner, criteria, orderBy);\n\t\n\t      var filter = filterChange(opts);\n\t      if (!opts.view && !opts.filter) {\n\t        // we can just limit in the query\n\t        sql += ' LIMIT ' + limit;\n\t      }\n\t\n\t      var lastSeq = opts.since || 0;\n\t      db.readTransaction(function (tx) {\n\t        tx.executeSql(sql, sqlArgs, function (tx, result) {\n\t          function reportChange(change) {\n\t            return function () {\n\t              opts.onChange(change);\n\t            };\n\t          }\n\t          for (var i = 0, l = result.rows.length; i < l; i++) {\n\t            var item = result.rows.item(i);\n\t            var metadata = safeJsonParse(item.metadata);\n\t            lastSeq = item.maxSeq;\n\t\n\t            var doc = unstringifyDoc(item.winningDoc, metadata.id,\n\t              item.winningRev);\n\t            var change = opts.processChange(doc, metadata, opts);\n\t            change.seq = item.maxSeq;\n\t\n\t            var filtered = filter(change);\n\t            if (typeof filtered === 'object') {\n\t              return opts.complete(filtered);\n\t            }\n\t\n\t            if (filtered) {\n\t              numResults++;\n\t              if (returnDocs) {\n\t                results.push(change);\n\t              }\n\t              // process the attachment immediately\n\t              // for the benefit of live listeners\n\t              if (opts.attachments && opts.include_docs) {\n\t                fetchAttachmentsIfNecessary$1(doc, opts, api, tx,\n\t                  reportChange(change));\n\t              } else {\n\t                reportChange(change)();\n\t              }\n\t            }\n\t            if (numResults === limit) {\n\t              break;\n\t            }\n\t          }\n\t        });\n\t      }, websqlError(opts.complete), function () {\n\t        if (!opts.continuous) {\n\t          opts.complete(null, {\n\t            results: results,\n\t            last_seq: lastSeq\n\t          });\n\t        }\n\t      });\n\t    }\n\t\n\t    fetchChanges();\n\t  };\n\t\n\t  api._close = function (callback) {\n\t    //WebSQL databases do not need to be closed\n\t    callback();\n\t  };\n\t\n\t  api._getAttachment = function (docId, attachId, attachment, opts, callback) {\n\t    var res;\n\t    var tx = opts.ctx;\n\t    var digest = attachment.digest;\n\t    var type = attachment.content_type;\n\t    var sql = 'SELECT escaped, ' +\n\t      'CASE WHEN escaped = 1 THEN body ELSE HEX(body) END AS body FROM ' +\n\t      ATTACH_STORE$1 + ' WHERE digest=?';\n\t    tx.executeSql(sql, [digest], function (tx, result) {\n\t      // websql has a bug where \\u0000 causes early truncation in strings\n\t      // and blobs. to work around this, we used to use the hex() function,\n\t      // but that's not performant. after migration 6, we remove \\u0000\n\t      // and add it back in afterwards\n\t      var item = result.rows.item(0);\n\t      var data = item.escaped ? unescapeBlob(item.body) :\n\t        parseHexString(item.body, encoding);\n\t      if (opts.binary) {\n\t        res = binStringToBluffer(data, type);\n\t      } else {\n\t        res = btoa$1(data);\n\t      }\n\t      callback(null, res);\n\t    });\n\t  };\n\t\n\t  api._getRevisionTree = function (docId, callback) {\n\t    db.readTransaction(function (tx) {\n\t      var sql = 'SELECT json AS metadata FROM ' + DOC_STORE$1 + ' WHERE id = ?';\n\t      tx.executeSql(sql, [docId], function (tx, result) {\n\t        if (!result.rows.length) {\n\t          callback(createError(MISSING_DOC));\n\t        } else {\n\t          var data = safeJsonParse(result.rows.item(0).metadata);\n\t          callback(null, data.rev_tree);\n\t        }\n\t      });\n\t    });\n\t  };\n\t\n\t  api._doCompaction = function (docId, revs, callback) {\n\t    if (!revs.length) {\n\t      return callback();\n\t    }\n\t    db.transaction(function (tx) {\n\t\n\t      // update doc store\n\t      var sql = 'SELECT json AS metadata FROM ' + DOC_STORE$1 + ' WHERE id = ?';\n\t      tx.executeSql(sql, [docId], function (tx, result) {\n\t        var metadata = safeJsonParse(result.rows.item(0).metadata);\n\t        traverseRevTree(metadata.rev_tree, function (isLeaf, pos,\n\t                                                           revHash, ctx, opts) {\n\t          var rev = pos + '-' + revHash;\n\t          if (revs.indexOf(rev) !== -1) {\n\t            opts.status = 'missing';\n\t          }\n\t        });\n\t\n\t        var sql = 'UPDATE ' + DOC_STORE$1 + ' SET json = ? WHERE id = ?';\n\t        tx.executeSql(sql, [safeJsonStringify(metadata), docId]);\n\t      });\n\t\n\t      compactRevs$1(revs, docId, tx);\n\t    }, websqlError(callback), function () {\n\t      callback();\n\t    });\n\t  };\n\t\n\t  api._getLocal = function (id, callback) {\n\t    db.readTransaction(function (tx) {\n\t      var sql = 'SELECT json, rev FROM ' + LOCAL_STORE$1 + ' WHERE id=?';\n\t      tx.executeSql(sql, [id], function (tx, res) {\n\t        if (res.rows.length) {\n\t          var item = res.rows.item(0);\n\t          var doc = unstringifyDoc(item.json, id, item.rev);\n\t          callback(null, doc);\n\t        } else {\n\t          callback(createError(MISSING_DOC));\n\t        }\n\t      });\n\t    });\n\t  };\n\t\n\t  api._putLocal = function (doc, opts, callback) {\n\t    if (typeof opts === 'function') {\n\t      callback = opts;\n\t      opts = {};\n\t    }\n\t    delete doc._revisions; // ignore this, trust the rev\n\t    var oldRev = doc._rev;\n\t    var id = doc._id;\n\t    var newRev;\n\t    if (!oldRev) {\n\t      newRev = doc._rev = '0-1';\n\t    } else {\n\t      newRev = doc._rev = '0-' + (parseInt(oldRev.split('-')[1], 10) + 1);\n\t    }\n\t    var json = stringifyDoc(doc);\n\t\n\t    var ret;\n\t    function putLocal(tx) {\n\t      var sql;\n\t      var values;\n\t      if (oldRev) {\n\t        sql = 'UPDATE ' + LOCAL_STORE$1 + ' SET rev=?, json=? ' +\n\t          'WHERE id=? AND rev=?';\n\t        values = [newRev, json, id, oldRev];\n\t      } else {\n\t        sql = 'INSERT INTO ' + LOCAL_STORE$1 + ' (id, rev, json) VALUES (?,?,?)';\n\t        values = [id, newRev, json];\n\t      }\n\t      tx.executeSql(sql, values, function (tx, res) {\n\t        if (res.rowsAffected) {\n\t          ret = {ok: true, id: id, rev: newRev};\n\t          if (opts.ctx) { // return immediately\n\t            callback(null, ret);\n\t          }\n\t        } else {\n\t          callback(createError(REV_CONFLICT));\n\t        }\n\t      }, function () {\n\t        callback(createError(REV_CONFLICT));\n\t        return false; // ack that we handled the error\n\t      });\n\t    }\n\t\n\t    if (opts.ctx) {\n\t      putLocal(opts.ctx);\n\t    } else {\n\t      db.transaction(putLocal, websqlError(callback), function () {\n\t        if (ret) {\n\t          callback(null, ret);\n\t        }\n\t      });\n\t    }\n\t  };\n\t\n\t  api._removeLocal = function (doc, opts, callback) {\n\t    if (typeof opts === 'function') {\n\t      callback = opts;\n\t      opts = {};\n\t    }\n\t    var ret;\n\t\n\t    function removeLocal(tx) {\n\t      var sql = 'DELETE FROM ' + LOCAL_STORE$1 + ' WHERE id=? AND rev=?';\n\t      var params = [doc._id, doc._rev];\n\t      tx.executeSql(sql, params, function (tx, res) {\n\t        if (!res.rowsAffected) {\n\t          return callback(createError(MISSING_DOC));\n\t        }\n\t        ret = {ok: true, id: doc._id, rev: '0-0'};\n\t        if (opts.ctx) { // return immediately\n\t          callback(null, ret);\n\t        }\n\t      });\n\t    }\n\t\n\t    if (opts.ctx) {\n\t      removeLocal(opts.ctx);\n\t    } else {\n\t      db.transaction(removeLocal, websqlError(callback), function () {\n\t        if (ret) {\n\t          callback(null, ret);\n\t        }\n\t      });\n\t    }\n\t  };\n\t\n\t  api._destroy = function (opts, callback) {\n\t    websqlChanges.removeAllListeners(api._name);\n\t    db.transaction(function (tx) {\n\t      var stores = [DOC_STORE$1, BY_SEQ_STORE$1, ATTACH_STORE$1, META_STORE$1,\n\t        LOCAL_STORE$1, ATTACH_AND_SEQ_STORE$1];\n\t      stores.forEach(function (store) {\n\t        tx.executeSql('DROP TABLE IF EXISTS ' + store, []);\n\t      });\n\t    }, websqlError(callback), function () {\n\t      if (hasLocalStorage()) {\n\t        delete window.localStorage['_pouch__websqldb_' + api._name];\n\t        delete window.localStorage[api._name];\n\t      }\n\t      callback(null, {'ok': true});\n\t    });\n\t  };\n\t}\n\t\n\tfunction canOpenTestDB() {\n\t  try {\n\t    openDatabase('_pouch_validate_websql', 1, '', 1);\n\t    return true;\n\t  } catch (err) {\n\t    return false;\n\t  }\n\t}\n\t\n\t// WKWebView had a bug where WebSQL would throw a DOM Exception 18\n\t// (see https://bugs.webkit.org/show_bug.cgi?id=137760 and\n\t// https://github.com/pouchdb/pouchdb/issues/5079)\n\t// This has been fixed in latest WebKit, so we try to detect it here.\n\tfunction isValidWebSQL() {\n\t  // WKWebView UA:\n\t  //   Mozilla/5.0 (iPhone; CPU iPhone OS 9_2 like Mac OS X)\n\t  //   AppleWebKit/601.1.46 (KHTML, like Gecko) Mobile/13C75\n\t  // Chrome for iOS UA:\n\t  //   Mozilla/5.0 (iPhone; U; CPU iPhone OS 5_1_1 like Mac OS X; en)\n\t  //   AppleWebKit/534.46.0 (KHTML, like Gecko) CriOS/19.0.1084.60\n\t  //   Mobile/9B206 Safari/7534.48.3\n\t  // Firefox for iOS UA:\n\t  //   Mozilla/5.0 (iPhone; CPU iPhone OS 8_3 like Mac OS X) AppleWebKit/600.1.4\n\t  //   (KHTML, like Gecko) FxiOS/1.0 Mobile/12F69 Safari/600.1.4\n\t\n\t  // indexedDB is null on some UIWebViews and undefined in others\n\t  // see: https://bugs.webkit.org/show_bug.cgi?id=137034\n\t  if (typeof indexedDB === 'undefined' || indexedDB === null ||\n\t      !/iP(hone|od|ad)/.test(navigator.userAgent)) {\n\t    // definitely not WKWebView, avoid creating an unnecessary database\n\t    return true;\n\t  }\n\t  // Cache the result in LocalStorage. Reason we do this is because if we\n\t  // call openDatabase() too many times, Safari craps out in SauceLabs and\n\t  // starts throwing DOM Exception 14s.\n\t  var hasLS = hasLocalStorage();\n\t  // Include user agent in the hash, so that if Safari is upgraded, we don't\n\t  // continually think it's broken.\n\t  var localStorageKey = '_pouch__websqldb_valid_' + navigator.userAgent;\n\t  if (hasLS && localStorage[localStorageKey]) {\n\t    return localStorage[localStorageKey] === '1';\n\t  }\n\t  var openedTestDB = canOpenTestDB();\n\t  if (hasLS) {\n\t    localStorage[localStorageKey] = openedTestDB ? '1' : '0';\n\t  }\n\t  return openedTestDB;\n\t}\n\t\n\tfunction valid() {\n\t  if (typeof openDatabase !== 'function') {\n\t    return false;\n\t  }\n\t  return isValidWebSQL();\n\t}\n\t\n\tfunction openDB(name, version, description, size) {\n\t  // Traditional WebSQL API\n\t  return openDatabase(name, version, description, size);\n\t}\n\t\n\tfunction WebSQLPouch(opts, callback) {\n\t  var _opts = jsExtend.extend({\n\t    websql: openDB\n\t  }, opts);\n\t\n\t  WebSqlPouch$1.call(this, _opts, callback);\n\t}\n\t\n\tWebSQLPouch.valid = valid;\n\t\n\tWebSQLPouch.use_prefix = true;\n\t\n\tfunction WebSqlPouch (PouchDB) {\n\t  PouchDB.adapter('websql', WebSQLPouch, true);\n\t}\n\t\n\t/* global fetch */\n\t/* global Headers */\n\tfunction wrappedFetch() {\n\t  var wrappedPromise = {};\n\t\n\t  var promise = new PouchPromise(function (resolve, reject) {\n\t    wrappedPromise.resolve = resolve;\n\t    wrappedPromise.reject = reject;\n\t  });\n\t\n\t  var args = new Array(arguments.length);\n\t\n\t  for (var i = 0; i < args.length; i++) {\n\t    args[i] = arguments[i];\n\t  }\n\t\n\t  wrappedPromise.promise = promise;\n\t\n\t  PouchPromise.resolve().then(function () {\n\t    return fetch.apply(null, args);\n\t  }).then(function (response) {\n\t    wrappedPromise.resolve(response);\n\t  }).catch(function (error) {\n\t    wrappedPromise.reject(error);\n\t  });\n\t\n\t  return wrappedPromise;\n\t}\n\t\n\tfunction fetchRequest(options, callback) {\n\t  var wrappedPromise, timer, response;\n\t\n\t  var headers = new Headers();\n\t\n\t  var fetchOptions = {\n\t    method: options.method,\n\t    credentials: 'include',\n\t    headers: headers\n\t  };\n\t\n\t  if (options.json) {\n\t    headers.set('Accept', 'application/json');\n\t    headers.set('Content-Type', options.headers['Content-Type'] ||\n\t      'application/json');\n\t  }\n\t\n\t  if (options.body && (options.body instanceof Blob)) {\n\t    readAsArrayBuffer(options.body, function (arrayBuffer) {\n\t      fetchOptions.body = arrayBuffer;\n\t    });\n\t  } else if (options.body &&\n\t             options.processData &&\n\t             typeof options.body !== 'string') {\n\t    fetchOptions.body = JSON.stringify(options.body);\n\t  } else if ('body' in options) {\n\t    fetchOptions.body = options.body;\n\t  } else {\n\t    fetchOptions.body = null;\n\t  }\n\t\n\t  Object.keys(options.headers).forEach(function (key) {\n\t    if (options.headers.hasOwnProperty(key)) {\n\t      headers.set(key, options.headers[key]);\n\t    }\n\t  });\n\t\n\t  wrappedPromise = wrappedFetch(options.url, fetchOptions);\n\t\n\t  if (options.timeout > 0) {\n\t    timer = setTimeout(function () {\n\t      wrappedPromise.reject(new Error('Load timeout for resource: ' +\n\t        options.url));\n\t    }, options.timeout);\n\t  }\n\t\n\t  wrappedPromise.promise.then(function (fetchResponse) {\n\t    response = {\n\t      statusCode: fetchResponse.status\n\t    };\n\t\n\t    if (options.timeout > 0) {\n\t      clearTimeout(timer);\n\t    }\n\t\n\t    if (response.statusCode >= 200 && response.statusCode < 300) {\n\t      return options.binary ? fetchResponse.blob() : fetchResponse.text();\n\t    }\n\t\n\t    return fetchResponse.json();\n\t  }).then(function (result) {\n\t    if (response.statusCode >= 200 && response.statusCode < 300) {\n\t      callback(null, response, result);\n\t    } else {\n\t      callback(result, response);\n\t    }\n\t  }).catch(function (error) {\n\t    callback(error, response);\n\t  });\n\t\n\t  return {abort: wrappedPromise.reject};\n\t}\n\t\n\tfunction xhRequest(options, callback) {\n\t\n\t  var xhr, timer;\n\t  var timedout = false;\n\t\n\t  var abortReq = function () {\n\t    xhr.abort();\n\t    cleanUp();\n\t  };\n\t\n\t  var timeoutReq = function () {\n\t    timedout = true;\n\t    xhr.abort();\n\t    cleanUp();\n\t  };\n\t\n\t  var ret = {abort: abortReq};\n\t\n\t  var cleanUp = function () {\n\t    clearTimeout(timer);\n\t    ret.abort = function () {};\n\t    if (xhr) {\n\t      xhr.onprogress = undefined;\n\t      if (xhr.upload) {\n\t        xhr.upload.onprogress = undefined;\n\t      }\n\t      xhr.onreadystatechange = undefined;\n\t      xhr = undefined;\n\t    }\n\t  };\n\t\n\t  if (options.xhr) {\n\t    xhr = new options.xhr();\n\t  } else {\n\t    xhr = new XMLHttpRequest();\n\t  }\n\t\n\t  try {\n\t    xhr.open(options.method, options.url);\n\t  } catch (exception) {\n\t    return callback(new Error(exception.name || 'Url is invalid'));\n\t  }\n\t\n\t  xhr.withCredentials = ('withCredentials' in options) ?\n\t    options.withCredentials : true;\n\t\n\t  if (options.method === 'GET') {\n\t    delete options.headers['Content-Type'];\n\t  } else if (options.json) {\n\t    options.headers.Accept = 'application/json';\n\t    options.headers['Content-Type'] = options.headers['Content-Type'] ||\n\t      'application/json';\n\t    if (options.body &&\n\t        options.processData &&\n\t        typeof options.body !== \"string\") {\n\t      options.body = JSON.stringify(options.body);\n\t    }\n\t  }\n\t\n\t  if (options.binary) {\n\t    xhr.responseType = 'arraybuffer';\n\t  }\n\t\n\t  if (!('body' in options)) {\n\t    options.body = null;\n\t  }\n\t\n\t  for (var key in options.headers) {\n\t    if (options.headers.hasOwnProperty(key)) {\n\t      xhr.setRequestHeader(key, options.headers[key]);\n\t    }\n\t  }\n\t\n\t  if (options.timeout > 0) {\n\t    timer = setTimeout(timeoutReq, options.timeout);\n\t    xhr.onprogress = function () {\n\t      clearTimeout(timer);\n\t      if(xhr.readyState !== 4) {\n\t        timer = setTimeout(timeoutReq, options.timeout);\n\t      }\n\t    };\n\t    if (typeof xhr.upload !== 'undefined') { // does not exist in ie9\n\t      xhr.upload.onprogress = xhr.onprogress;\n\t    }\n\t  }\n\t\n\t  xhr.onreadystatechange = function () {\n\t    if (xhr.readyState !== 4) {\n\t      return;\n\t    }\n\t\n\t    var response = {\n\t      statusCode: xhr.status\n\t    };\n\t\n\t    if (xhr.status >= 200 && xhr.status < 300) {\n\t      var data;\n\t      if (options.binary) {\n\t        data = createBlob([xhr.response || ''], {\n\t          type: xhr.getResponseHeader('Content-Type')\n\t        });\n\t      } else {\n\t        data = xhr.responseText;\n\t      }\n\t      callback(null, response, data);\n\t    } else {\n\t      var err = {};\n\t      if (timedout) {\n\t        err = new Error('ETIMEDOUT');\n\t        err.code = 'ETIMEDOUT';\n\t      } else if (typeof xhr.response === 'string') {\n\t        try {\n\t          err = JSON.parse(xhr.response);\n\t        } catch(e) {}\n\t      }\n\t      err.status = xhr.status;\n\t      callback(err);\n\t    }\n\t    cleanUp();\n\t  };\n\t\n\t  if (options.body && (options.body instanceof Blob)) {\n\t    readAsArrayBuffer(options.body, function (arrayBuffer) {\n\t      xhr.send(arrayBuffer);\n\t    });\n\t  } else {\n\t    xhr.send(options.body);\n\t  }\n\t\n\t  return ret;\n\t}\n\t\n\tfunction testXhr() {\n\t  try {\n\t    new XMLHttpRequest();\n\t    return true;\n\t  } catch (err) {\n\t    return false;\n\t  }\n\t}\n\t\n\tvar hasXhr = testXhr();\n\t\n\tfunction ajax$1(options, callback) {\n\t  if (hasXhr || options.xhr) {\n\t    return xhRequest(options, callback);\n\t  } else {\n\t    return fetchRequest(options, callback);\n\t  }\n\t}\n\t\n\t// the blob already has a type; do nothing\n\tvar res$2 = function () {};\n\t\n\tfunction defaultBody() {\n\t  return '';\n\t}\n\t\n\tfunction ajaxCore(options, callback) {\n\t\n\t  options = clone(options);\n\t\n\t  var defaultOptions = {\n\t    method : \"GET\",\n\t    headers: {},\n\t    json: true,\n\t    processData: true,\n\t    timeout: 10000,\n\t    cache: false\n\t  };\n\t\n\t  options = jsExtend.extend(defaultOptions, options);\n\t\n\t  function onSuccess(obj, resp, cb) {\n\t    if (!options.binary && options.json && typeof obj === 'string') {\n\t      /* istanbul ignore next */\n\t      try {\n\t        obj = JSON.parse(obj);\n\t      } catch (e) {\n\t        // Probably a malformed JSON from server\n\t        return cb(e);\n\t      }\n\t    }\n\t    if (Array.isArray(obj)) {\n\t      obj = obj.map(function (v) {\n\t        if (v.error || v.missing) {\n\t          return generateErrorFromResponse(v);\n\t        } else {\n\t          return v;\n\t        }\n\t      });\n\t    }\n\t    if (options.binary) {\n\t      res$2(obj, resp);\n\t    }\n\t    cb(null, obj, resp);\n\t  }\n\t\n\t  if (options.json) {\n\t    if (!options.binary) {\n\t      options.headers.Accept = 'application/json';\n\t    }\n\t    options.headers['Content-Type'] = options.headers['Content-Type'] ||\n\t      'application/json';\n\t  }\n\t\n\t  if (options.binary) {\n\t    options.encoding = null;\n\t    options.json = false;\n\t  }\n\t\n\t  if (!options.processData) {\n\t    options.json = false;\n\t  }\n\t\n\t  return ajax$1(options, function (err, response, body) {\n\t\n\t    if (err) {\n\t      return callback(generateErrorFromResponse(err));\n\t    }\n\t\n\t    var error;\n\t    var content_type = response.headers && response.headers['content-type'];\n\t    var data = body || defaultBody();\n\t\n\t    // CouchDB doesn't always return the right content-type for JSON data, so\n\t    // we check for ^{ and }$ (ignoring leading/trailing whitespace)\n\t    if (!options.binary && (options.json || !options.processData) &&\n\t        typeof data !== 'object' &&\n\t        (/json/.test(content_type) ||\n\t         (/^[\\s]*\\{/.test(data) && /\\}[\\s]*$/.test(data)))) {\n\t      try {\n\t        data = JSON.parse(data.toString());\n\t      } catch (e) {}\n\t    }\n\t\n\t    if (response.statusCode >= 200 && response.statusCode < 300) {\n\t      onSuccess(data, response, callback);\n\t    } else {\n\t      error = generateErrorFromResponse(data);\n\t      error.status = response.statusCode;\n\t      callback(error);\n\t    }\n\t  });\n\t}\n\t\n\tfunction ajax(opts, callback) {\n\t\n\t  // cache-buster, specifically designed to work around IE's aggressive caching\n\t  // see http://www.dashbay.com/2011/05/internet-explorer-caches-ajax/\n\t  // Also Safari caches POSTs, so we need to cache-bust those too.\n\t  var ua = (navigator && navigator.userAgent) ?\n\t    navigator.userAgent.toLowerCase() : '';\n\t\n\t  var isSafari = ua.indexOf('safari') !== -1 && ua.indexOf('chrome') === -1;\n\t  var isIE = ua.indexOf('msie') !== -1;\n\t  var isEdge = ua.indexOf('edge') !== -1;\n\t\n\t  // it appears the new version of safari also caches GETs,\n\t  // see https://github.com/pouchdb/pouchdb/issues/5010\n\t  var shouldCacheBust = (isSafari ||\n\t    ((isIE || isEdge) && opts.method === 'GET'));\n\t\n\t  var cache = 'cache' in opts ? opts.cache : true;\n\t\n\t  var isBlobUrl = /^blob:/.test(opts.url); // don't append nonces for blob URLs\n\t\n\t  if (!isBlobUrl && (shouldCacheBust || !cache)) {\n\t    var hasArgs = opts.url.indexOf('?') !== -1;\n\t    opts.url += (hasArgs ? '&' : '?') + '_nonce=' + Date.now();\n\t  }\n\t\n\t  return ajaxCore(opts, callback);\n\t}\n\t\n\tvar CHANGES_BATCH_SIZE = 25;\n\tvar MAX_SIMULTANEOUS_REVS = 50;\n\t\n\tvar supportsBulkGetMap = {};\n\t\n\tvar log$1 = debug('pouchdb:http');\n\t\n\tfunction readAttachmentsAsBlobOrBuffer(row) {\n\t  var atts = row.doc && row.doc._attachments;\n\t  if (!atts) {\n\t    return;\n\t  }\n\t  Object.keys(atts).forEach(function (filename) {\n\t    var att = atts[filename];\n\t    att.data = b64ToBluffer(att.data, att.content_type);\n\t  });\n\t}\n\t\n\tfunction encodeDocId(id) {\n\t  if (/^_design/.test(id)) {\n\t    return '_design/' + encodeURIComponent(id.slice(8));\n\t  }\n\t  if (/^_local/.test(id)) {\n\t    return '_local/' + encodeURIComponent(id.slice(7));\n\t  }\n\t  return encodeURIComponent(id);\n\t}\n\t\n\tfunction preprocessAttachments$1(doc) {\n\t  if (!doc._attachments || !Object.keys(doc._attachments)) {\n\t    return PouchPromise.resolve();\n\t  }\n\t\n\t  return PouchPromise.all(Object.keys(doc._attachments).map(function (key) {\n\t    var attachment = doc._attachments[key];\n\t    if (attachment.data && typeof attachment.data !== 'string') {\n\t      return new PouchPromise(function (resolve) {\n\t        blobToBase64(attachment.data, resolve);\n\t      }).then(function (b64) {\n\t        attachment.data = b64;\n\t      });\n\t    }\n\t  }));\n\t}\n\t\n\tfunction hasUrlPrefix(opts) {\n\t  if (!opts.prefix) {\n\t    return false;\n\t  }\n\t\n\t  var protocol = parseUri(opts.prefix).protocol;\n\t\n\t  return protocol === 'http' || protocol === 'https';\n\t}\n\t\n\t// Get all the information you possibly can about the URI given by name and\n\t// return it as a suitable object.\n\tfunction getHost(name, opts) {\n\t\n\t  // encode db name if opts.prefix is a url (#5574)\n\t  if (hasUrlPrefix(opts)) {\n\t    var dbName = opts.name.substr(opts.prefix.length);\n\t    name = opts.prefix + encodeURIComponent(dbName);\n\t  }\n\t\n\t  // Prase the URI into all its little bits\n\t  var uri = parseUri(name);\n\t\n\t  // Store the user and password as a separate auth object\n\t  if (uri.user || uri.password) {\n\t    uri.auth = {username: uri.user, password: uri.password};\n\t  }\n\t\n\t  // Split the path part of the URI into parts using '/' as the delimiter\n\t  // after removing any leading '/' and any trailing '/'\n\t  var parts = uri.path.replace(/(^\\/|\\/$)/g, '').split('/');\n\t\n\t  // Store the first part as the database name and remove it from the parts\n\t  // array\n\t  uri.db = parts.pop();\n\t  // Prevent double encoding of URI component\n\t  if (uri.db.indexOf('%') === -1) {\n\t    uri.db = encodeURIComponent(uri.db);\n\t  }\n\t\n\t  // Restore the path by joining all the remaining parts (all the parts\n\t  // except for the database name) with '/'s\n\t  uri.path = parts.join('/');\n\t\n\t  return uri;\n\t}\n\t\n\t// Generate a URL with the host data given by opts and the given path\n\tfunction genDBUrl(opts, path) {\n\t  return genUrl(opts, opts.db + '/' + path);\n\t}\n\t\n\t// Generate a URL with the host data given by opts and the given path\n\tfunction genUrl(opts, path) {\n\t  // If the host already has a path, then we need to have a path delimiter\n\t  // Otherwise, the path delimiter is the empty string\n\t  var pathDel = !opts.path ? '' : '/';\n\t\n\t  // If the host already has a path, then we need to have a path delimiter\n\t  // Otherwise, the path delimiter is the empty string\n\t  return opts.protocol + '://' + opts.host +\n\t         (opts.port ? (':' + opts.port) : '') +\n\t         '/' + opts.path + pathDel + path;\n\t}\n\t\n\tfunction paramsToStr(params) {\n\t  return '?' + Object.keys(params).map(function (k) {\n\t    return k + '=' + encodeURIComponent(params[k]);\n\t  }).join('&');\n\t}\n\t\n\t// Implements the PouchDB API for dealing with CouchDB instances over HTTP\n\tfunction HttpPouch(opts, callback) {\n\t\n\t  // The functions that will be publicly available for HttpPouch\n\t  var api = this;\n\t\n\t  var host = getHost(opts.name, opts);\n\t  var dbUrl = genDBUrl(host, '');\n\t\n\t  opts = clone(opts);\n\t  var ajaxOpts = opts.ajax || {};\n\t\n\t  if (opts.auth || host.auth) {\n\t    var nAuth = opts.auth || host.auth;\n\t    var str = nAuth.username + ':' + nAuth.password;\n\t    var token = btoa$1(unescape(encodeURIComponent(str)));\n\t    ajaxOpts.headers = ajaxOpts.headers || {};\n\t    ajaxOpts.headers.Authorization = 'Basic ' + token;\n\t  }\n\t\n\t  // Not strictly necessary, but we do this because numerous tests\n\t  // rely on swapping ajax in and out.\n\t  api._ajax = ajax;\n\t\n\t  function ajax$$(userOpts, options, callback) {\n\t    var reqAjax = userOpts.ajax || {};\n\t    var reqOpts = jsExtend.extend(clone(ajaxOpts), reqAjax, options);\n\t    log$1(reqOpts.method + ' ' + reqOpts.url);\n\t    return api._ajax(reqOpts, callback);\n\t  }\n\t\n\t  function ajaxPromise(userOpts, opts) {\n\t    return new PouchPromise(function (resolve, reject) {\n\t      ajax$$(userOpts, opts, function (err, res) {\n\t        /* istanbul ignore if */\n\t        if (err) {\n\t          return reject(err);\n\t        }\n\t        resolve(res);\n\t      });\n\t    });\n\t  }\n\t\n\t  function adapterFun$$(name, fun) {\n\t    return adapterFun(name, getArguments(function (args) {\n\t      setup().then(function () {\n\t        return fun.apply(this, args);\n\t      }).catch(function (e) {\n\t        var callback = args.pop();\n\t        callback(e);\n\t      });\n\t    }));\n\t  }\n\t\n\t  var setupPromise;\n\t\n\t  function setup() {\n\t    // TODO: Remove `skipSetup` in favor of `skip_setup` in a future release\n\t    if (opts.skipSetup || opts.skip_setup) {\n\t      return PouchPromise.resolve();\n\t    }\n\t\n\t    // If there is a setup in process or previous successful setup\n\t    // done then we will use that\n\t    // If previous setups have been rejected we will try again\n\t    if (setupPromise) {\n\t      return setupPromise;\n\t    }\n\t\n\t    var checkExists = {method: 'GET', url: dbUrl};\n\t    setupPromise = ajaxPromise({}, checkExists).catch(function (err) {\n\t      if (err && err.status && err.status === 404) {\n\t        // Doesnt exist, create it\n\t        explainError(404, 'PouchDB is just detecting if the remote exists.');\n\t        return ajaxPromise({}, {method: 'PUT', url: dbUrl});\n\t      } else {\n\t        return PouchPromise.reject(err);\n\t      }\n\t    }).catch(function (err) {\n\t      // If we try to create a database that already exists, skipped in\n\t      // istanbul since its catching a race condition.\n\t      /* istanbul ignore if */\n\t      if (err && err.status && err.status === 412) {\n\t        return true;\n\t      }\n\t      return PouchPromise.reject(err);\n\t    });\n\t\n\t    setupPromise.catch(function () {\n\t      setupPromise = null;\n\t    });\n\t\n\t    return setupPromise;\n\t  }\n\t\n\t  setTimeout(function () {\n\t    callback(null, api);\n\t  });\n\t\n\t  api.type = function () {\n\t    return 'http';\n\t  };\n\t\n\t  api.id = adapterFun$$('id', function (callback) {\n\t    ajax$$({}, {method: 'GET', url: genUrl(host, '')}, function (err, result) {\n\t      var uuid = (result && result.uuid) ?\n\t        (result.uuid + host.db) : genDBUrl(host, '');\n\t      callback(null, uuid);\n\t    });\n\t  });\n\t\n\t  api.request = adapterFun$$('request', function (options, callback) {\n\t    options.url = genDBUrl(host, options.url);\n\t    ajax$$({}, options, callback);\n\t  });\n\t\n\t  // Sends a POST request to the host calling the couchdb _compact function\n\t  //    version: The version of CouchDB it is running\n\t  api.compact = adapterFun$$('compact', function (opts, callback) {\n\t    if (typeof opts === 'function') {\n\t      callback = opts;\n\t      opts = {};\n\t    }\n\t    opts = clone(opts);\n\t    ajax$$(opts, {\n\t      url: genDBUrl(host, '_compact'),\n\t      method: 'POST'\n\t    }, function () {\n\t      function ping() {\n\t        api.info(function (err, res) {\n\t          if (res && !res.compact_running) {\n\t            callback(null, {ok: true});\n\t          } else {\n\t            setTimeout(ping, opts.interval || 200);\n\t          }\n\t        });\n\t      }\n\t      // Ping the http if it's finished compaction\n\t      ping();\n\t    });\n\t  });\n\t\n\t  api.bulkGet = adapterFun('bulkGet', function (opts, callback) {\n\t    var self = this;\n\t\n\t    function doBulkGet(cb) {\n\t      var params = {};\n\t      if (opts.revs) {\n\t        params.revs = true;\n\t      }\n\t      if (opts.attachments) {\n\t        /* istanbul ignore next */\n\t        params.attachments = true;\n\t      }\n\t      ajax$$({}, {\n\t        url: genDBUrl(host, '_bulk_get' + paramsToStr(params)),\n\t        method: 'POST',\n\t        body: { docs: opts.docs}\n\t      }, cb);\n\t    }\n\t\n\t    function doBulkGetShim() {\n\t      // avoid \"url too long error\" by splitting up into multiple requests\n\t      var batchSize = MAX_SIMULTANEOUS_REVS;\n\t      var numBatches = Math.ceil(opts.docs.length / batchSize);\n\t      var numDone = 0;\n\t      var results = new Array(numBatches);\n\t\n\t      function onResult(batchNum) {\n\t        return function (err, res) {\n\t          // err is impossible because shim returns a list of errs in that case\n\t          results[batchNum] = res.results;\n\t          if (++numDone === numBatches) {\n\t            callback(null, {results: flatten(results)});\n\t          }\n\t        };\n\t      }\n\t\n\t      for (var i = 0; i < numBatches; i++) {\n\t        var subOpts = pick(opts, ['revs', 'attachments']);\n\t        subOpts.ajax = ajaxOpts;\n\t        subOpts.docs = opts.docs.slice(i * batchSize,\n\t          Math.min(opts.docs.length, (i + 1) * batchSize));\n\t        bulkGet(self, subOpts, onResult(i));\n\t      }\n\t    }\n\t\n\t    // mark the whole database as either supporting or not supporting _bulk_get\n\t    var dbUrl = genUrl(host, '');\n\t    var supportsBulkGet = supportsBulkGetMap[dbUrl];\n\t\n\t    if (typeof supportsBulkGet !== 'boolean') {\n\t      // check if this database supports _bulk_get\n\t      doBulkGet(function (err, res) {\n\t        /* istanbul ignore else */\n\t        if (err) {\n\t          var status = Math.floor(err.status / 100);\n\t          /* istanbul ignore else */\n\t          if (status === 4 || status === 5) { // 40x or 50x\n\t            supportsBulkGetMap[dbUrl] = false;\n\t            explainError(\n\t              err.status,\n\t              'PouchDB is just detecting if the remote ' +\n\t              'supports the _bulk_get API.'\n\t            );\n\t            doBulkGetShim();\n\t          } else {\n\t            callback(err);\n\t          }\n\t        } else {\n\t          supportsBulkGetMap[dbUrl] = true;\n\t          callback(null, res);\n\t        }\n\t      });\n\t    } else if (supportsBulkGet) {\n\t      /* istanbul ignore next */\n\t      doBulkGet(callback);\n\t    } else {\n\t      doBulkGetShim();\n\t    }\n\t  });\n\t\n\t  // Calls GET on the host, which gets back a JSON string containing\n\t  //    couchdb: A welcome string\n\t  //    version: The version of CouchDB it is running\n\t  api._info = function (callback) {\n\t    setup().then(function () {\n\t      ajax$$({}, {\n\t        method: 'GET',\n\t        url: genDBUrl(host, '')\n\t      }, function (err, res) {\n\t        /* istanbul ignore next */\n\t        if (err) {\n\t        return callback(err);\n\t        }\n\t        res.host = genDBUrl(host, '');\n\t        callback(null, res);\n\t      });\n\t    }).catch(callback);\n\t  };\n\t\n\t  // Get the document with the given id from the database given by host.\n\t  // The id could be solely the _id in the database, or it may be a\n\t  // _design/ID or _local/ID path\n\t  api.get = adapterFun$$('get', function (id, opts, callback) {\n\t    // If no options were given, set the callback to the second parameter\n\t    if (typeof opts === 'function') {\n\t      callback = opts;\n\t      opts = {};\n\t    }\n\t    opts = clone(opts);\n\t\n\t    // List of parameters to add to the GET request\n\t    var params = {};\n\t\n\t    if (opts.revs) {\n\t      params.revs = true;\n\t    }\n\t\n\t    if (opts.revs_info) {\n\t      params.revs_info = true;\n\t    }\n\t\n\t    if (opts.open_revs) {\n\t      if (opts.open_revs !== \"all\") {\n\t        opts.open_revs = JSON.stringify(opts.open_revs);\n\t      }\n\t      params.open_revs = opts.open_revs;\n\t    }\n\t\n\t    if (opts.rev) {\n\t      params.rev = opts.rev;\n\t    }\n\t\n\t    if (opts.conflicts) {\n\t      params.conflicts = opts.conflicts;\n\t    }\n\t\n\t    id = encodeDocId(id);\n\t\n\t    // Set the options for the ajax call\n\t    var options = {\n\t      method: 'GET',\n\t      url: genDBUrl(host, id + paramsToStr(params))\n\t    };\n\t\n\t    function fetchAttachments(doc) {\n\t      var atts = doc._attachments;\n\t      var filenames = atts && Object.keys(atts);\n\t      if (!atts || !filenames.length) {\n\t        return;\n\t      }\n\t      // we fetch these manually in separate XHRs, because\n\t      // Sync Gateway would normally send it back as multipart/mixed,\n\t      // which we cannot parse. Also, this is more efficient than\n\t      // receiving attachments as base64-encoded strings.\n\t      function fetch() {\n\t\n\t        if (!filenames.length) {\n\t          return null;\n\t        }\n\t\n\t        var filename = filenames.pop();\n\t        var att = atts[filename];\n\t        var path = encodeDocId(doc._id) + '/' + encodeAttachmentId(filename) +\n\t          '?rev=' + doc._rev;\n\t        return ajaxPromise(opts, {\n\t          method: 'GET',\n\t          url: genDBUrl(host, path),\n\t          binary: true\n\t        }).then(function (blob) {\n\t          if (opts.binary) {\n\t            return blob;\n\t          }\n\t          return new PouchPromise(function (resolve) {\n\t            blobToBase64(blob, resolve);\n\t          });\n\t        }).then(function (data) {\n\t          delete att.stub;\n\t          delete att.length;\n\t          att.data = data;\n\t        });\n\t      }\n\t\n\t      // This limits the number of parallel xhr requests to 5 any time\n\t      // to avoid issues with maximum browser request limits\n\t      return new PromisePool(fetch, 5, {promise: PouchPromise}).start();\n\t    }\n\t\n\t    function fetchAllAttachments(docOrDocs) {\n\t      if (Array.isArray(docOrDocs)) {\n\t        return PouchPromise.all(docOrDocs.map(function (doc) {\n\t          if (doc.ok) {\n\t            return fetchAttachments(doc.ok);\n\t          }\n\t        }));\n\t      }\n\t      return fetchAttachments(docOrDocs);\n\t    }\n\t\n\t    ajaxPromise(opts, options).then(function (res) {\n\t      return PouchPromise.resolve().then(function () {\n\t        if (opts.attachments) {\n\t          return fetchAllAttachments(res);\n\t        }\n\t      }).then(function () {\n\t        callback(null, res);\n\t      });\n\t    }).catch(callback);\n\t  });\n\t\n\t  // Delete the document given by doc from the database given by host.\n\t  api.remove = adapterFun$$('remove',\n\t      function (docOrId, optsOrRev, opts, callback) {\n\t    var doc;\n\t    if (typeof optsOrRev === 'string') {\n\t      // id, rev, opts, callback style\n\t      doc = {\n\t        _id: docOrId,\n\t        _rev: optsOrRev\n\t      };\n\t      if (typeof opts === 'function') {\n\t        callback = opts;\n\t        opts = {};\n\t      }\n\t    } else {\n\t      // doc, opts, callback style\n\t      doc = docOrId;\n\t      if (typeof optsOrRev === 'function') {\n\t        callback = optsOrRev;\n\t        opts = {};\n\t      } else {\n\t        callback = opts;\n\t        opts = optsOrRev;\n\t      }\n\t    }\n\t\n\t    var rev = (doc._rev || opts.rev);\n\t\n\t    // Delete the document\n\t    ajax$$(opts, {\n\t      method: 'DELETE',\n\t      url: genDBUrl(host, encodeDocId(doc._id)) + '?rev=' + rev\n\t    }, callback);\n\t  });\n\t\n\t  function encodeAttachmentId(attachmentId) {\n\t    return attachmentId.split(\"/\").map(encodeURIComponent).join(\"/\");\n\t  }\n\t\n\t  // Get the attachment\n\t  api.getAttachment =\n\t    adapterFun$$('getAttachment', function (docId, attachmentId, opts,\n\t                                                callback) {\n\t    if (typeof opts === 'function') {\n\t      callback = opts;\n\t      opts = {};\n\t    }\n\t    var params = opts.rev ? ('?rev=' + opts.rev) : '';\n\t    var url = genDBUrl(host, encodeDocId(docId)) + '/' +\n\t      encodeAttachmentId(attachmentId) + params;\n\t    ajax$$(opts, {\n\t      method: 'GET',\n\t      url: url,\n\t      binary: true\n\t    }, callback);\n\t  });\n\t\n\t  // Remove the attachment given by the id and rev\n\t  api.removeAttachment =\n\t    adapterFun$$('removeAttachment', function (docId, attachmentId, rev,\n\t                                                   callback) {\n\t\n\t    var url = genDBUrl(host, encodeDocId(docId) + '/' +\n\t      encodeAttachmentId(attachmentId)) + '?rev=' + rev;\n\t\n\t    ajax$$({}, {\n\t      method: 'DELETE',\n\t      url: url\n\t    }, callback);\n\t  });\n\t\n\t  // Add the attachment given by blob and its contentType property\n\t  // to the document with the given id, the revision given by rev, and\n\t  // add it to the database given by host.\n\t  api.putAttachment =\n\t    adapterFun$$('putAttachment', function (docId, attachmentId, rev, blob,\n\t                                                type, callback) {\n\t    if (typeof type === 'function') {\n\t      callback = type;\n\t      type = blob;\n\t      blob = rev;\n\t      rev = null;\n\t    }\n\t    var id = encodeDocId(docId) + '/' + encodeAttachmentId(attachmentId);\n\t    var url = genDBUrl(host, id);\n\t    if (rev) {\n\t      url += '?rev=' + rev;\n\t    }\n\t\n\t    if (typeof blob === 'string') {\n\t      // input is assumed to be a base64 string\n\t      var binary;\n\t      try {\n\t        binary = atob$1(blob);\n\t      } catch (err) {\n\t        return callback(createError(BAD_ARG,\n\t                        'Attachment is not a valid base64 string'));\n\t      }\n\t      blob = binary ? binStringToBluffer(binary, type) : '';\n\t    }\n\t\n\t    var opts = {\n\t      headers: {'Content-Type': type},\n\t      method: 'PUT',\n\t      url: url,\n\t      processData: false,\n\t      body: blob,\n\t      timeout: ajaxOpts.timeout || 60000\n\t    };\n\t    // Add the attachment\n\t    ajax$$({}, opts, callback);\n\t  });\n\t\n\t  // Update/create multiple documents given by req in the database\n\t  // given by host.\n\t  api._bulkDocs = function (req, opts, callback) {\n\t    // If new_edits=false then it prevents the database from creating\n\t    // new revision numbers for the documents. Instead it just uses\n\t    // the old ones. This is used in database replication.\n\t    req.new_edits = opts.new_edits;\n\t\n\t    setup().then(function () {\n\t      return PouchPromise.all(req.docs.map(preprocessAttachments$1));\n\t    }).then(function () {\n\t      // Update/create the documents\n\t      ajax$$(opts, {\n\t        method: 'POST',\n\t        url: genDBUrl(host, '_bulk_docs'),\n\t        timeout: opts.timeout,\n\t        body: req\n\t      }, function (err, results) {\n\t        if (err) {\n\t          return callback(err);\n\t        }\n\t        results.forEach(function (result) {\n\t          result.ok = true; // smooths out cloudant not adding this\n\t        });\n\t        callback(null, results);\n\t      });\n\t    }).catch(callback);\n\t  };\n\t\n\t\n\t  // Update/create document\n\t  api._put = function (doc, opts, callback) {\n\t    setup().then(function () {\n\t      return preprocessAttachments$1(doc);\n\t    }).then(function () {\n\t      // Update/create the document\n\t      ajax$$(opts, {\n\t        method: 'PUT',\n\t        url: genDBUrl(host, encodeDocId(doc._id)),\n\t        body: doc\n\t      }, function (err, result) {\n\t        if (err) {\n\t          return callback(err);\n\t        }\n\t        callback(null, result);\n\t      });\n\t    }).catch(callback);\n\t  };\n\t\n\t\n\t  // Get a listing of the documents in the database given\n\t  // by host and ordered by increasing id.\n\t  api.allDocs = adapterFun$$('allDocs', function (opts, callback) {\n\t    if (typeof opts === 'function') {\n\t      callback = opts;\n\t      opts = {};\n\t    }\n\t    opts = clone(opts);\n\t\n\t    // List of parameters to add to the GET request\n\t    var params = {};\n\t    var body;\n\t    var method = 'GET';\n\t\n\t    if (opts.conflicts) {\n\t      params.conflicts = true;\n\t    }\n\t\n\t    if (opts.descending) {\n\t      params.descending = true;\n\t    }\n\t\n\t    if (opts.include_docs) {\n\t      params.include_docs = true;\n\t    }\n\t\n\t    // added in CouchDB 1.6.0\n\t    if (opts.attachments) {\n\t      params.attachments = true;\n\t    }\n\t\n\t    if (opts.key) {\n\t      params.key = JSON.stringify(opts.key);\n\t    }\n\t\n\t    if (opts.start_key) {\n\t      opts.startkey = opts.start_key;\n\t    }\n\t\n\t    if (opts.startkey) {\n\t      params.startkey = JSON.stringify(opts.startkey);\n\t    }\n\t\n\t    if (opts.end_key) {\n\t      opts.endkey = opts.end_key;\n\t    }\n\t\n\t    if (opts.endkey) {\n\t      params.endkey = JSON.stringify(opts.endkey);\n\t    }\n\t\n\t    if (typeof opts.inclusive_end !== 'undefined') {\n\t      params.inclusive_end = !!opts.inclusive_end;\n\t    }\n\t\n\t    if (typeof opts.limit !== 'undefined') {\n\t      params.limit = opts.limit;\n\t    }\n\t\n\t    if (typeof opts.skip !== 'undefined') {\n\t      params.skip = opts.skip;\n\t    }\n\t\n\t    var paramStr = paramsToStr(params);\n\t\n\t    if (typeof opts.keys !== 'undefined') {\n\t      method = 'POST';\n\t      body = {keys: opts.keys};\n\t    }\n\t\n\t    // Get the document listing\n\t    ajaxPromise(opts, {\n\t      method: method,\n\t      url: genDBUrl(host, '_all_docs' + paramStr),\n\t      body: body\n\t    }).then(function (res) {\n\t      if (opts.include_docs && opts.attachments && opts.binary) {\n\t        res.rows.forEach(readAttachmentsAsBlobOrBuffer);\n\t      }\n\t      callback(null, res);\n\t    }).catch(callback);\n\t  });\n\t\n\t  // Get a list of changes made to documents in the database given by host.\n\t  // TODO According to the README, there should be two other methods here,\n\t  // api.changes.addListener and api.changes.removeListener.\n\t  api._changes = function (opts) {\n\t\n\t    // We internally page the results of a changes request, this means\n\t    // if there is a large set of changes to be returned we can start\n\t    // processing them quicker instead of waiting on the entire\n\t    // set of changes to return and attempting to process them at once\n\t    var batchSize = 'batch_size' in opts ? opts.batch_size : CHANGES_BATCH_SIZE;\n\t\n\t    opts = clone(opts);\n\t    opts.timeout = ('timeout' in opts) ? opts.timeout :\n\t      ('timeout' in ajaxOpts) ? ajaxOpts.timeout :\n\t      30 * 1000;\n\t\n\t    // We give a 5 second buffer for CouchDB changes to respond with\n\t    // an ok timeout (if a timeout it set)\n\t    var params = opts.timeout ? {timeout: opts.timeout - (5 * 1000)} : {};\n\t    var limit = (typeof opts.limit !== 'undefined') ? opts.limit : false;\n\t    var returnDocs;\n\t    if ('return_docs' in opts) {\n\t      returnDocs = opts.return_docs;\n\t    } else if ('returnDocs' in opts) {\n\t      // TODO: Remove 'returnDocs' in favor of 'return_docs' in a future release\n\t      returnDocs = opts.returnDocs;\n\t    } else {\n\t      returnDocs = true;\n\t    }\n\t    //\n\t    var leftToFetch = limit;\n\t\n\t    if (opts.style) {\n\t      params.style = opts.style;\n\t    }\n\t\n\t    if (opts.include_docs || opts.filter && typeof opts.filter === 'function') {\n\t      params.include_docs = true;\n\t    }\n\t\n\t    if (opts.attachments) {\n\t      params.attachments = true;\n\t    }\n\t\n\t    if (opts.continuous) {\n\t      params.feed = 'longpoll';\n\t    }\n\t\n\t    if (opts.conflicts) {\n\t      params.conflicts = true;\n\t    }\n\t\n\t    if (opts.descending) {\n\t      params.descending = true;\n\t    }\n\t\n\t    if ('heartbeat' in opts) {\n\t      // If the heartbeat value is false, it disables the default heartbeat\n\t      if (opts.heartbeat) {\n\t        params.heartbeat = opts.heartbeat;\n\t      }\n\t    } else {\n\t      // Default heartbeat to 10 seconds\n\t      params.heartbeat = 10000;\n\t    }\n\t\n\t    if (opts.filter && typeof opts.filter === 'string') {\n\t      params.filter = opts.filter;\n\t    }\n\t\n\t    if (opts.view && typeof opts.view === 'string') {\n\t      params.filter = '_view';\n\t      params.view = opts.view;\n\t    }\n\t\n\t    // If opts.query_params exists, pass it through to the changes request.\n\t    // These parameters may be used by the filter on the source database.\n\t    if (opts.query_params && typeof opts.query_params === 'object') {\n\t      for (var param_name in opts.query_params) {\n\t        /* istanbul ignore else */\n\t        if (opts.query_params.hasOwnProperty(param_name)) {\n\t          params[param_name] = opts.query_params[param_name];\n\t        }\n\t      }\n\t    }\n\t\n\t    var method = 'GET';\n\t    var body;\n\t\n\t    if (opts.doc_ids) {\n\t      // set this automagically for the user; it's annoying that couchdb\n\t      // requires both a \"filter\" and a \"doc_ids\" param.\n\t      params.filter = '_doc_ids';\n\t      method = 'POST';\n\t      body = {doc_ids: opts.doc_ids };\n\t    }\n\t\n\t    var xhr;\n\t    var lastFetchedSeq;\n\t\n\t    // Get all the changes starting wtih the one immediately after the\n\t    // sequence number given by since.\n\t    var fetch = function (since, callback) {\n\t      if (opts.aborted) {\n\t        return;\n\t      }\n\t      params.since = since;\n\t      // \"since\" can be any kind of json object in Coudant/CouchDB 2.x\n\t      /* istanbul ignore next */\n\t      if (typeof params.since === \"object\") {\n\t        params.since = JSON.stringify(params.since);\n\t      }\n\t\n\t      if (opts.descending) {\n\t        if (limit) {\n\t          params.limit = leftToFetch;\n\t        }\n\t      } else {\n\t        params.limit = (!limit || leftToFetch > batchSize) ?\n\t          batchSize : leftToFetch;\n\t      }\n\t\n\t      // Set the options for the ajax call\n\t      var xhrOpts = {\n\t        method: method,\n\t        url: genDBUrl(host, '_changes' + paramsToStr(params)),\n\t        timeout: opts.timeout,\n\t        body: body\n\t      };\n\t      lastFetchedSeq = since;\n\t\n\t      /* istanbul ignore if */\n\t      if (opts.aborted) {\n\t        return;\n\t      }\n\t\n\t      // Get the changes\n\t      setup().then(function () {\n\t        xhr = ajax$$(opts, xhrOpts, callback);\n\t      }).catch(callback);\n\t    };\n\t\n\t    // If opts.since exists, get all the changes from the sequence\n\t    // number given by opts.since. Otherwise, get all the changes\n\t    // from the sequence number 0.\n\t    var results = {results: []};\n\t\n\t    var fetched = function (err, res) {\n\t      if (opts.aborted) {\n\t        return;\n\t      }\n\t      var raw_results_length = 0;\n\t      // If the result of the ajax call (res) contains changes (res.results)\n\t      if (res && res.results) {\n\t        raw_results_length = res.results.length;\n\t        results.last_seq = res.last_seq;\n\t        // For each change\n\t        var req = {};\n\t        req.query = opts.query_params;\n\t        res.results = res.results.filter(function (c) {\n\t          leftToFetch--;\n\t          var ret = filterChange(opts)(c);\n\t          if (ret) {\n\t            if (opts.include_docs && opts.attachments && opts.binary) {\n\t              readAttachmentsAsBlobOrBuffer(c);\n\t            }\n\t            if (returnDocs) {\n\t              results.results.push(c);\n\t            }\n\t            opts.onChange(c);\n\t          }\n\t          return ret;\n\t        });\n\t      } else if (err) {\n\t        // In case of an error, stop listening for changes and call\n\t        // opts.complete\n\t        opts.aborted = true;\n\t        opts.complete(err);\n\t        return;\n\t      }\n\t\n\t      // The changes feed may have timed out with no results\n\t      // if so reuse last update sequence\n\t      if (res && res.last_seq) {\n\t        lastFetchedSeq = res.last_seq;\n\t      }\n\t\n\t      var finished = (limit && leftToFetch <= 0) ||\n\t        (res && raw_results_length < batchSize) ||\n\t        (opts.descending);\n\t\n\t      if ((opts.continuous && !(limit && leftToFetch <= 0)) || !finished) {\n\t        // Queue a call to fetch again with the newest sequence number\n\t        setTimeout(function () { fetch(lastFetchedSeq, fetched); }, 0);\n\t      } else {\n\t        // We're done, call the callback\n\t        opts.complete(null, results);\n\t      }\n\t    };\n\t\n\t    fetch(opts.since || 0, fetched);\n\t\n\t    // Return a method to cancel this method from processing any more\n\t    return {\n\t      cancel: function () {\n\t        opts.aborted = true;\n\t        if (xhr) {\n\t          xhr.abort();\n\t        }\n\t      }\n\t    };\n\t  };\n\t\n\t  // Given a set of document/revision IDs (given by req), tets the subset of\n\t  // those that do NOT correspond to revisions stored in the database.\n\t  // See http://wiki.apache.org/couchdb/HttpPostRevsDiff\n\t  api.revsDiff = adapterFun$$('revsDiff', function (req, opts, callback) {\n\t    // If no options were given, set the callback to be the second parameter\n\t    if (typeof opts === 'function') {\n\t      callback = opts;\n\t      opts = {};\n\t    }\n\t\n\t    // Get the missing document/revision IDs\n\t    ajax$$(opts, {\n\t      method: 'POST',\n\t      url: genDBUrl(host, '_revs_diff'),\n\t      body: req\n\t    }, callback);\n\t  });\n\t\n\t  api._close = function (callback) {\n\t    callback();\n\t  };\n\t\n\t  api._destroy = function (options, callback) {\n\t    ajax$$(options, {\n\t      url: genDBUrl(host, ''),\n\t      method: 'DELETE'\n\t    }, function (err, resp) {\n\t      if (err && err.status && err.status !== 404) {\n\t        return callback(err);\n\t      }\n\t      callback(null, resp);\n\t    });\n\t  };\n\t}\n\t\n\t// HttpPouch is a valid adapter.\n\tHttpPouch.valid = function () {\n\t  return true;\n\t};\n\t\n\tfunction HttpPouch$1 (PouchDB) {\n\t  PouchDB.adapter('http', HttpPouch, false);\n\t  PouchDB.adapter('https', HttpPouch, false);\n\t}\n\t\n\tfunction pad(str, padWith, upToLength) {\n\t  var padding = '';\n\t  var targetLength = upToLength - str.length;\n\t  /* istanbul ignore next */\n\t  while (padding.length < targetLength) {\n\t    padding += padWith;\n\t  }\n\t  return padding;\n\t}\n\t\n\tfunction padLeft(str, padWith, upToLength) {\n\t  var padding = pad(str, padWith, upToLength);\n\t  return padding + str;\n\t}\n\t\n\tvar MIN_MAGNITUDE = -324; // verified by -Number.MIN_VALUE\n\tvar MAGNITUDE_DIGITS = 3; // ditto\n\tvar SEP = ''; // set to '_' for easier debugging \n\t\n\tfunction collate(a, b) {\n\t\n\t  if (a === b) {\n\t    return 0;\n\t  }\n\t\n\t  a = normalizeKey(a);\n\t  b = normalizeKey(b);\n\t\n\t  var ai = collationIndex(a);\n\t  var bi = collationIndex(b);\n\t  if ((ai - bi) !== 0) {\n\t    return ai - bi;\n\t  }\n\t  if (a === null) {\n\t    return 0;\n\t  }\n\t  switch (typeof a) {\n\t    case 'number':\n\t      return a - b;\n\t    case 'boolean':\n\t      return a === b ? 0 : (a < b ? -1 : 1);\n\t    case 'string':\n\t      return stringCollate(a, b);\n\t  }\n\t  return Array.isArray(a) ? arrayCollate(a, b) : objectCollate(a, b);\n\t}\n\t\n\t// couch considers null/NaN/Infinity/-Infinity === undefined,\n\t// for the purposes of mapreduce indexes. also, dates get stringified.\n\tfunction normalizeKey(key) {\n\t  switch (typeof key) {\n\t    case 'undefined':\n\t      return null;\n\t    case 'number':\n\t      if (key === Infinity || key === -Infinity || isNaN(key)) {\n\t        return null;\n\t      }\n\t      return key;\n\t    case 'object':\n\t      var origKey = key;\n\t      if (Array.isArray(key)) {\n\t        var len = key.length;\n\t        key = new Array(len);\n\t        for (var i = 0; i < len; i++) {\n\t          key[i] = normalizeKey(origKey[i]);\n\t        }\n\t      /* istanbul ignore next */\n\t      } else if (key instanceof Date) {\n\t        return key.toJSON();\n\t      } else if (key !== null) { // generic object\n\t        key = {};\n\t        for (var k in origKey) {\n\t          if (origKey.hasOwnProperty(k)) {\n\t            var val = origKey[k];\n\t            if (typeof val !== 'undefined') {\n\t              key[k] = normalizeKey(val);\n\t            }\n\t          }\n\t        }\n\t      }\n\t  }\n\t  return key;\n\t}\n\t\n\tfunction indexify(key) {\n\t  if (key !== null) {\n\t    switch (typeof key) {\n\t      case 'boolean':\n\t        return key ? 1 : 0;\n\t      case 'number':\n\t        return numToIndexableString(key);\n\t      case 'string':\n\t        // We've to be sure that key does not contain \\u0000\n\t        // Do order-preserving replacements:\n\t        // 0 -> 1, 1\n\t        // 1 -> 1, 2\n\t        // 2 -> 2, 2\n\t        return key\n\t          .replace(/\\u0002/g, '\\u0002\\u0002')\n\t          .replace(/\\u0001/g, '\\u0001\\u0002')\n\t          .replace(/\\u0000/g, '\\u0001\\u0001');\n\t      case 'object':\n\t        var isArray = Array.isArray(key);\n\t        var arr = isArray ? key : Object.keys(key);\n\t        var i = -1;\n\t        var len = arr.length;\n\t        var result = '';\n\t        if (isArray) {\n\t          while (++i < len) {\n\t            result += toIndexableString(arr[i]);\n\t          }\n\t        } else {\n\t          while (++i < len) {\n\t            var objKey = arr[i];\n\t            result += toIndexableString(objKey) +\n\t                toIndexableString(key[objKey]);\n\t          }\n\t        }\n\t        return result;\n\t    }\n\t  }\n\t  return '';\n\t}\n\t\n\t// convert the given key to a string that would be appropriate\n\t// for lexical sorting, e.g. within a database, where the\n\t// sorting is the same given by the collate() function.\n\tfunction toIndexableString(key) {\n\t  var zero = '\\u0000';\n\t  key = normalizeKey(key);\n\t  return collationIndex(key) + SEP + indexify(key) + zero;\n\t}\n\t\n\tfunction parseNumber(str, i) {\n\t  var originalIdx = i;\n\t  var num;\n\t  var zero = str[i] === '1';\n\t  if (zero) {\n\t    num = 0;\n\t    i++;\n\t  } else {\n\t    var neg = str[i] === '0';\n\t    i++;\n\t    var numAsString = '';\n\t    var magAsString = str.substring(i, i + MAGNITUDE_DIGITS);\n\t    var magnitude = parseInt(magAsString, 10) + MIN_MAGNITUDE;\n\t    /* istanbul ignore next */\n\t    if (neg) {\n\t      magnitude = -magnitude;\n\t    }\n\t    i += MAGNITUDE_DIGITS;\n\t    while (true) {\n\t      var ch = str[i];\n\t      if (ch === '\\u0000') {\n\t        break;\n\t      } else {\n\t        numAsString += ch;\n\t      }\n\t      i++;\n\t    }\n\t    numAsString = numAsString.split('.');\n\t    if (numAsString.length === 1) {\n\t      num = parseInt(numAsString, 10);\n\t    } else {\n\t      /* istanbul ignore next */\n\t      num = parseFloat(numAsString[0] + '.' + numAsString[1]);\n\t    }\n\t    /* istanbul ignore next */\n\t    if (neg) {\n\t      num = num - 10;\n\t    }\n\t    /* istanbul ignore next */\n\t    if (magnitude !== 0) {\n\t      // parseFloat is more reliable than pow due to rounding errors\n\t      // e.g. Number.MAX_VALUE would return Infinity if we did\n\t      // num * Math.pow(10, magnitude);\n\t      num = parseFloat(num + 'e' + magnitude);\n\t    }\n\t  }\n\t  return {num: num, length : i - originalIdx};\n\t}\n\t\n\t// move up the stack while parsing\n\t// this function moved outside of parseIndexableString for performance\n\tfunction pop(stack, metaStack) {\n\t  var obj = stack.pop();\n\t\n\t  if (metaStack.length) {\n\t    var lastMetaElement = metaStack[metaStack.length - 1];\n\t    if (obj === lastMetaElement.element) {\n\t      // popping a meta-element, e.g. an object whose value is another object\n\t      metaStack.pop();\n\t      lastMetaElement = metaStack[metaStack.length - 1];\n\t    }\n\t    var element = lastMetaElement.element;\n\t    var lastElementIndex = lastMetaElement.index;\n\t    if (Array.isArray(element)) {\n\t      element.push(obj);\n\t    } else if (lastElementIndex === stack.length - 2) { // obj with key+value\n\t      var key = stack.pop();\n\t      element[key] = obj;\n\t    } else {\n\t      stack.push(obj); // obj with key only\n\t    }\n\t  }\n\t}\n\t\n\tfunction parseIndexableString(str) {\n\t  var stack = [];\n\t  var metaStack = []; // stack for arrays and objects\n\t  var i = 0;\n\t\n\t  /*eslint no-constant-condition: [\"error\", { \"checkLoops\": false }]*/\n\t  while (true) {\n\t    var collationIndex = str[i++];\n\t    if (collationIndex === '\\u0000') {\n\t      if (stack.length === 1) {\n\t        return stack.pop();\n\t      } else {\n\t        pop(stack, metaStack);\n\t        continue;\n\t      }\n\t    }\n\t    switch (collationIndex) {\n\t      case '1':\n\t        stack.push(null);\n\t        break;\n\t      case '2':\n\t        stack.push(str[i] === '1');\n\t        i++;\n\t        break;\n\t      case '3':\n\t        var parsedNum = parseNumber(str, i);\n\t        stack.push(parsedNum.num);\n\t        i += parsedNum.length;\n\t        break;\n\t      case '4':\n\t        var parsedStr = '';\n\t        /*eslint no-constant-condition: [\"error\", { \"checkLoops\": false }]*/\n\t        while (true) {\n\t          var ch = str[i];\n\t          if (ch === '\\u0000') {\n\t            break;\n\t          }\n\t          parsedStr += ch;\n\t          i++;\n\t        }\n\t        // perform the reverse of the order-preserving replacement\n\t        // algorithm (see above)\n\t        parsedStr = parsedStr.replace(/\\u0001\\u0001/g, '\\u0000')\n\t          .replace(/\\u0001\\u0002/g, '\\u0001')\n\t          .replace(/\\u0002\\u0002/g, '\\u0002');\n\t        stack.push(parsedStr);\n\t        break;\n\t      case '5':\n\t        var arrayElement = { element: [], index: stack.length };\n\t        stack.push(arrayElement.element);\n\t        metaStack.push(arrayElement);\n\t        break;\n\t      case '6':\n\t        var objElement = { element: {}, index: stack.length };\n\t        stack.push(objElement.element);\n\t        metaStack.push(objElement);\n\t        break;\n\t      /* istanbul ignore next */\n\t      default:\n\t        throw new Error(\n\t          'bad collationIndex or unexpectedly reached end of input: ' +\n\t            collationIndex);\n\t    }\n\t  }\n\t}\n\t\n\tfunction arrayCollate(a, b) {\n\t  var len = Math.min(a.length, b.length);\n\t  for (var i = 0; i < len; i++) {\n\t    var sort = collate(a[i], b[i]);\n\t    if (sort !== 0) {\n\t      return sort;\n\t    }\n\t  }\n\t  return (a.length === b.length) ? 0 :\n\t    (a.length > b.length) ? 1 : -1;\n\t}\n\tfunction stringCollate(a, b) {\n\t  // See: https://github.com/daleharvey/pouchdb/issues/40\n\t  // This is incompatible with the CouchDB implementation, but its the\n\t  // best we can do for now\n\t  return (a === b) ? 0 : ((a > b) ? 1 : -1);\n\t}\n\tfunction objectCollate(a, b) {\n\t  var ak = Object.keys(a), bk = Object.keys(b);\n\t  var len = Math.min(ak.length, bk.length);\n\t  for (var i = 0; i < len; i++) {\n\t    // First sort the keys\n\t    var sort = collate(ak[i], bk[i]);\n\t    if (sort !== 0) {\n\t      return sort;\n\t    }\n\t    // if the keys are equal sort the values\n\t    sort = collate(a[ak[i]], b[bk[i]]);\n\t    if (sort !== 0) {\n\t      return sort;\n\t    }\n\t\n\t  }\n\t  return (ak.length === bk.length) ? 0 :\n\t    (ak.length > bk.length) ? 1 : -1;\n\t}\n\t// The collation is defined by erlangs ordered terms\n\t// the atoms null, true, false come first, then numbers, strings,\n\t// arrays, then objects\n\t// null/undefined/NaN/Infinity/-Infinity are all considered null\n\tfunction collationIndex(x) {\n\t  var id = ['boolean', 'number', 'string', 'object'];\n\t  var idx = id.indexOf(typeof x);\n\t  //false if -1 otherwise true, but fast!!!!1\n\t  if (~idx) {\n\t    if (x === null) {\n\t      return 1;\n\t    }\n\t    if (Array.isArray(x)) {\n\t      return 5;\n\t    }\n\t    return idx < 3 ? (idx + 2) : (idx + 3);\n\t  }\n\t  /* istanbul ignore next */\n\t  if (Array.isArray(x)) {\n\t    return 5;\n\t  }\n\t}\n\t\n\t// conversion:\n\t// x yyy zz...zz\n\t// x = 0 for negative, 1 for 0, 2 for positive\n\t// y = exponent (for negative numbers negated) moved so that it's >= 0\n\t// z = mantisse\n\tfunction numToIndexableString(num) {\n\t\n\t  if (num === 0) {\n\t    return '1';\n\t  }\n\t\n\t  // convert number to exponential format for easier and\n\t  // more succinct string sorting\n\t  var expFormat = num.toExponential().split(/e\\+?/);\n\t  var magnitude = parseInt(expFormat[1], 10);\n\t\n\t  var neg = num < 0;\n\t\n\t  var result = neg ? '0' : '2';\n\t\n\t  // first sort by magnitude\n\t  // it's easier if all magnitudes are positive\n\t  var magForComparison = ((neg ? -magnitude : magnitude) - MIN_MAGNITUDE);\n\t  var magString = padLeft((magForComparison).toString(), '0', MAGNITUDE_DIGITS);\n\t\n\t  result += SEP + magString;\n\t\n\t  // then sort by the factor\n\t  var factor = Math.abs(parseFloat(expFormat[0])); // [1..10)\n\t  /* istanbul ignore next */\n\t  if (neg) { // for negative reverse ordering\n\t    factor = 10 - factor;\n\t  }\n\t\n\t  var factorStr = factor.toFixed(20);\n\t\n\t  // strip zeros from the end\n\t  factorStr = factorStr.replace(/\\.?0+$/, '');\n\t\n\t  result += SEP + factorStr;\n\t\n\t  return result;\n\t}\n\t\n\t/*\n\t * Simple task queue to sequentialize actions. Assumes\n\t * callbacks will eventually fire (once).\n\t */\n\t\n\tfunction TaskQueue$1() {\n\t  this.promise = new PouchPromise(function (fulfill) {fulfill(); });\n\t}\n\tTaskQueue$1.prototype.add = function (promiseFactory) {\n\t  this.promise = this.promise.catch(function () {\n\t    // just recover\n\t  }).then(function () {\n\t    return promiseFactory();\n\t  });\n\t  return this.promise;\n\t};\n\tTaskQueue$1.prototype.finish = function () {\n\t  return this.promise;\n\t};\n\t\n\tfunction createView(opts) {\n\t  var sourceDB = opts.db;\n\t  var viewName = opts.viewName;\n\t  var mapFun = opts.map;\n\t  var reduceFun = opts.reduce;\n\t  var temporary = opts.temporary;\n\t\n\t  // the \"undefined\" part is for backwards compatibility\n\t  var viewSignature = mapFun.toString() + (reduceFun && reduceFun.toString()) +\n\t    'undefined';\n\t\n\t  var cachedViews;\n\t  if (!temporary) {\n\t    // cache this to ensure we don't try to update the same view twice\n\t    cachedViews = sourceDB._cachedViews = sourceDB._cachedViews || {};\n\t    if (cachedViews[viewSignature]) {\n\t      return cachedViews[viewSignature];\n\t    }\n\t  }\n\t\n\t  var promiseForView = sourceDB.info().then(function (info) {\n\t\n\t    var depDbName = info.db_name + '-mrview-' +\n\t      (temporary ? 'temp' : stringMd5(viewSignature));\n\t\n\t    // save the view name in the source db so it can be cleaned up if necessary\n\t    // (e.g. when the _design doc is deleted, remove all associated view data)\n\t    function diffFunction(doc) {\n\t      doc.views = doc.views || {};\n\t      var fullViewName = viewName;\n\t      if (fullViewName.indexOf('/') === -1) {\n\t        fullViewName = viewName + '/' + viewName;\n\t      }\n\t      var depDbs = doc.views[fullViewName] = doc.views[fullViewName] || {};\n\t      /* istanbul ignore if */\n\t      if (depDbs[depDbName]) {\n\t        return; // no update necessary\n\t      }\n\t      depDbs[depDbName] = true;\n\t      return doc;\n\t    }\n\t    return upsert(sourceDB, '_local/mrviews', diffFunction).then(function () {\n\t      return sourceDB.registerDependentDatabase(depDbName).then(function (res) {\n\t        var db = res.db;\n\t        db.auto_compaction = true;\n\t        var view = {\n\t          name: depDbName,\n\t          db: db,\n\t          sourceDB: sourceDB,\n\t          adapter: sourceDB.adapter,\n\t          mapFun: mapFun,\n\t          reduceFun: reduceFun\n\t        };\n\t        return view.db.get('_local/lastSeq').catch(function (err) {\n\t          /* istanbul ignore if */\n\t          if (err.status !== 404) {\n\t            throw err;\n\t          }\n\t        }).then(function (lastSeqDoc) {\n\t          view.seq = lastSeqDoc ? lastSeqDoc.seq : 0;\n\t          if (cachedViews) {\n\t            view.db.once('destroyed', function () {\n\t              delete cachedViews[viewSignature];\n\t            });\n\t          }\n\t          return view;\n\t        });\n\t      });\n\t    });\n\t  });\n\t\n\t  if (cachedViews) {\n\t    cachedViews[viewSignature] = promiseForView;\n\t  }\n\t  return promiseForView;\n\t}\n\t\n\tfunction QueryParseError(message) {\n\t  this.status = 400;\n\t  this.name = 'query_parse_error';\n\t  this.message = message;\n\t  this.error = true;\n\t  try {\n\t    Error.captureStackTrace(this, QueryParseError);\n\t  } catch (e) {}\n\t}\n\t\n\tinherits(QueryParseError, Error);\n\t\n\tfunction NotFoundError(message) {\n\t  this.status = 404;\n\t  this.name = 'not_found';\n\t  this.message = message;\n\t  this.error = true;\n\t  try {\n\t    Error.captureStackTrace(this, NotFoundError);\n\t  } catch (e) {}\n\t}\n\t\n\tinherits(NotFoundError, Error);\n\t\n\tfunction BuiltInError(message) {\n\t  this.status = 500;\n\t  this.name = 'invalid_value';\n\t  this.message = message;\n\t  this.error = true;\n\t  try {\n\t    Error.captureStackTrace(this, BuiltInError);\n\t  } catch (e) {}\n\t}\n\t\n\tinherits(BuiltInError, Error);\n\t\n\tfunction createBuiltInError(name) {\n\t  var message = 'builtin ' + name +\n\t    ' function requires map values to be numbers' +\n\t    ' or number arrays';\n\t  return new BuiltInError(message);\n\t}\n\t\n\tfunction sum(values) {\n\t  var result = 0;\n\t  for (var i = 0, len = values.length; i < len; i++) {\n\t    var num = values[i];\n\t    if (typeof num !== 'number') {\n\t      if (Array.isArray(num)) {\n\t        // lists of numbers are also allowed, sum them separately\n\t        result = typeof result === 'number' ? [result] : result;\n\t        for (var j = 0, jLen = num.length; j < jLen; j++) {\n\t          var jNum = num[j];\n\t          if (typeof jNum !== 'number') {\n\t            throw createBuiltInError('_sum');\n\t          } else if (typeof result[j] === 'undefined') {\n\t            result.push(jNum);\n\t          } else {\n\t            result[j] += jNum;\n\t          }\n\t        }\n\t      } else { // not array/number\n\t        throw createBuiltInError('_sum');\n\t      }\n\t    } else if (typeof result === 'number') {\n\t      result += num;\n\t    } else { // add number to array\n\t      result[0] += num;\n\t    }\n\t  }\n\t  return result;\n\t}\n\t\n\tvar log$2 = guardedConsole.bind(null, 'log');\n\tvar isArray = Array.isArray;\n\tvar toJSON = JSON.parse;\n\t\n\tfunction evalFunctionWithEval(func, emit) {\n\t  return scopedEval(\n\t    \"return (\" + func.replace(/;\\s*$/, \"\") + \");\",\n\t    {\n\t      emit: emit,\n\t      sum: sum,\n\t      log: log$2,\n\t      isArray: isArray,\n\t      toJSON: toJSON\n\t    }\n\t  );\n\t}\n\t\n\tvar promisedCallback = function (promise, callback) {\n\t  if (callback) {\n\t    promise.then(function (res) {\n\t      process.nextTick(function () {\n\t        callback(null, res);\n\t      });\n\t    }, function (reason) {\n\t      process.nextTick(function () {\n\t        callback(reason);\n\t      });\n\t    });\n\t  }\n\t  return promise;\n\t};\n\t\n\tvar callbackify = function (fun) {\n\t  return getArguments(function (args) {\n\t    var cb = args.pop();\n\t    var promise = fun.apply(this, args);\n\t    if (typeof cb === 'function') {\n\t      promisedCallback(promise, cb);\n\t    }\n\t    return promise;\n\t  });\n\t};\n\t\n\t// Promise finally util similar to Q.finally\n\tvar fin = function (promise, finalPromiseFactory) {\n\t  return promise.then(function (res) {\n\t    return finalPromiseFactory().then(function () {\n\t      return res;\n\t    });\n\t  }, function (reason) {\n\t    return finalPromiseFactory().then(function () {\n\t      throw reason;\n\t    });\n\t  });\n\t};\n\t\n\tvar sequentialize = function (queue, promiseFactory) {\n\t  return function () {\n\t    var args = arguments;\n\t    var that = this;\n\t    return queue.add(function () {\n\t      return promiseFactory.apply(that, args);\n\t    });\n\t  };\n\t};\n\t\n\t// uniq an array of strings, order not guaranteed\n\t// similar to underscore/lodash _.uniq\n\tvar uniq = function (arr) {\n\t  var map = {};\n\t\n\t  for (var i = 0, len = arr.length; i < len; i++) {\n\t    map['$' + arr[i]] = true;\n\t  }\n\t\n\t  var keys = Object.keys(map);\n\t  var output = new Array(keys.length);\n\t\n\t  for (i = 0, len = keys.length; i < len; i++) {\n\t    output[i] = keys[i].substring(1);\n\t  }\n\t  return output;\n\t};\n\t\n\tvar persistentQueues = {};\n\tvar tempViewQueue = new TaskQueue$1();\n\tvar CHANGES_BATCH_SIZE$1 = 50;\n\t\n\tfunction parseViewName(name) {\n\t  // can be either 'ddocname/viewname' or just 'viewname'\n\t  // (where the ddoc name is the same)\n\t  return name.indexOf('/') === -1 ? [name, name] : name.split('/');\n\t}\n\t\n\tfunction isGenOne(changes) {\n\t  // only return true if the current change is 1-\n\t  // and there are no other leafs\n\t  return changes.length === 1 && /^1-/.test(changes[0].rev);\n\t}\n\t\n\tfunction emitError(db, e) {\n\t  try {\n\t    db.emit('error', e);\n\t  } catch (err) {\n\t    guardedConsole('error',\n\t      'The user\\'s map/reduce function threw an uncaught error.\\n' +\n\t      'You can debug this error by doing:\\n' +\n\t      'myDatabase.on(\\'error\\', function (err) { debugger; });\\n' +\n\t      'Please double-check your map/reduce function.');\n\t    guardedConsole('error', e);\n\t  }\n\t}\n\t\n\tfunction tryCode$1(db, fun, args) {\n\t  // emit an event if there was an error thrown by a map/reduce function.\n\t  // putting try/catches in a single function also avoids deoptimizations.\n\t  try {\n\t    return {\n\t      output : fun.apply(null, args)\n\t    };\n\t  } catch (e) {\n\t    emitError(db, e);\n\t    return {error: e};\n\t  }\n\t}\n\t\n\tfunction sortByKeyThenValue(x, y) {\n\t  var keyCompare = collate(x.key, y.key);\n\t  return keyCompare !== 0 ? keyCompare : collate(x.value, y.value);\n\t}\n\t\n\tfunction sliceResults(results, limit, skip) {\n\t  skip = skip || 0;\n\t  if (typeof limit === 'number') {\n\t    return results.slice(skip, limit + skip);\n\t  } else if (skip > 0) {\n\t    return results.slice(skip);\n\t  }\n\t  return results;\n\t}\n\t\n\tfunction rowToDocId(row) {\n\t  var val = row.value;\n\t  // Users can explicitly specify a joined doc _id, or it\n\t  // defaults to the doc _id that emitted the key/value.\n\t  var docId = (val && typeof val === 'object' && val._id) || row.id;\n\t  return docId;\n\t}\n\t\n\tfunction readAttachmentsAsBlobOrBuffer$1(res) {\n\t  res.rows.forEach(function (row) {\n\t    var atts = row.doc && row.doc._attachments;\n\t    if (!atts) {\n\t      return;\n\t    }\n\t    Object.keys(atts).forEach(function (filename) {\n\t      var att = atts[filename];\n\t      atts[filename].data = b64ToBluffer(att.data, att.content_type);\n\t    });\n\t  });\n\t}\n\t\n\tfunction postprocessAttachments(opts) {\n\t  return function (res) {\n\t    if (opts.include_docs && opts.attachments && opts.binary) {\n\t      readAttachmentsAsBlobOrBuffer$1(res);\n\t    }\n\t    return res;\n\t  };\n\t}\n\t\n\tvar builtInReduce = {\n\t  _sum: function (keys, values) {\n\t    return sum(values);\n\t  },\n\t\n\t  _count: function (keys, values) {\n\t    return values.length;\n\t  },\n\t\n\t  _stats: function (keys, values) {\n\t    // no need to implement rereduce=true, because Pouch\n\t    // will never call it\n\t    function sumsqr(values) {\n\t      var _sumsqr = 0;\n\t      for (var i = 0, len = values.length; i < len; i++) {\n\t        var num = values[i];\n\t        _sumsqr += (num * num);\n\t      }\n\t      return _sumsqr;\n\t    }\n\t    return {\n\t      sum     : sum(values),\n\t      min     : Math.min.apply(null, values),\n\t      max     : Math.max.apply(null, values),\n\t      count   : values.length,\n\t      sumsqr : sumsqr(values)\n\t    };\n\t  }\n\t};\n\t\n\tfunction addHttpParam(paramName, opts, params, asJson) {\n\t  // add an http param from opts to params, optionally json-encoded\n\t  var val = opts[paramName];\n\t  if (typeof val !== 'undefined') {\n\t    if (asJson) {\n\t      val = encodeURIComponent(JSON.stringify(val));\n\t    }\n\t    params.push(paramName + '=' + val);\n\t  }\n\t}\n\t\n\tfunction coerceInteger(integerCandidate) {\n\t  if (typeof integerCandidate !== 'undefined') {\n\t    var asNumber = Number(integerCandidate);\n\t    // prevents e.g. '1foo' or '1.1' being coerced to 1\n\t    if (!isNaN(asNumber) && asNumber === parseInt(integerCandidate, 10)) {\n\t      return asNumber;\n\t    } else {\n\t      return integerCandidate;\n\t    }\n\t  }\n\t}\n\t\n\tfunction coerceOptions(opts) {\n\t  opts.group_level = coerceInteger(opts.group_level);\n\t  opts.limit = coerceInteger(opts.limit);\n\t  opts.skip = coerceInteger(opts.skip);\n\t  return opts;\n\t}\n\t\n\tfunction checkPositiveInteger(number) {\n\t  if (number) {\n\t    if (typeof number !== 'number') {\n\t      return  new QueryParseError('Invalid value for integer: \"' +\n\t      number + '\"');\n\t    }\n\t    if (number < 0) {\n\t      return new QueryParseError('Invalid value for positive integer: ' +\n\t        '\"' + number + '\"');\n\t    }\n\t  }\n\t}\n\t\n\tfunction checkQueryParseError(options, fun) {\n\t  var startkeyName = options.descending ? 'endkey' : 'startkey';\n\t  var endkeyName = options.descending ? 'startkey' : 'endkey';\n\t\n\t  if (typeof options[startkeyName] !== 'undefined' &&\n\t    typeof options[endkeyName] !== 'undefined' &&\n\t    collate(options[startkeyName], options[endkeyName]) > 0) {\n\t    throw new QueryParseError('No rows can match your key range, ' +\n\t    'reverse your start_key and end_key or set {descending : true}');\n\t  } else if (fun.reduce && options.reduce !== false) {\n\t    if (options.include_docs) {\n\t      throw new QueryParseError('{include_docs:true} is invalid for reduce');\n\t    } else if (options.keys && options.keys.length > 1 &&\n\t        !options.group && !options.group_level) {\n\t      throw new QueryParseError('Multi-key fetches for reduce views must use ' +\n\t      '{group: true}');\n\t    }\n\t  }\n\t  ['group_level', 'limit', 'skip'].forEach(function (optionName) {\n\t    var error = checkPositiveInteger(options[optionName]);\n\t    if (error) {\n\t      throw error;\n\t    }\n\t  });\n\t}\n\t\n\tfunction httpQuery(db, fun, opts) {\n\t  // List of parameters to add to the PUT request\n\t  var params = [];\n\t  var body;\n\t  var method = 'GET';\n\t\n\t  // If opts.reduce exists and is defined, then add it to the list\n\t  // of parameters.\n\t  // If reduce=false then the results are that of only the map function\n\t  // not the final result of map and reduce.\n\t  addHttpParam('reduce', opts, params);\n\t  addHttpParam('include_docs', opts, params);\n\t  addHttpParam('attachments', opts, params);\n\t  addHttpParam('limit', opts, params);\n\t  addHttpParam('descending', opts, params);\n\t  addHttpParam('group', opts, params);\n\t  addHttpParam('group_level', opts, params);\n\t  addHttpParam('skip', opts, params);\n\t  addHttpParam('stale', opts, params);\n\t  addHttpParam('conflicts', opts, params);\n\t  addHttpParam('startkey', opts, params, true);\n\t  addHttpParam('start_key', opts, params, true);\n\t  addHttpParam('endkey', opts, params, true);\n\t  addHttpParam('end_key', opts, params, true);\n\t  addHttpParam('inclusive_end', opts, params);\n\t  addHttpParam('key', opts, params, true);\n\t\n\t  // Format the list of parameters into a valid URI query string\n\t  params = params.join('&');\n\t  params = params === '' ? '' : '?' + params;\n\t\n\t  // If keys are supplied, issue a POST to circumvent GET query string limits\n\t  // see http://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options\n\t  if (typeof opts.keys !== 'undefined') {\n\t    var MAX_URL_LENGTH = 2000;\n\t    // according to http://stackoverflow.com/a/417184/680742,\n\t    // the de facto URL length limit is 2000 characters\n\t\n\t    var keysAsString =\n\t      'keys=' + encodeURIComponent(JSON.stringify(opts.keys));\n\t    if (keysAsString.length + params.length + 1 <= MAX_URL_LENGTH) {\n\t      // If the keys are short enough, do a GET. we do this to work around\n\t      // Safari not understanding 304s on POSTs (see pouchdb/pouchdb#1239)\n\t      params += (params[0] === '?' ? '&' : '?') + keysAsString;\n\t    } else {\n\t      method = 'POST';\n\t      if (typeof fun === 'string') {\n\t        body = {keys: opts.keys};\n\t      } else { // fun is {map : mapfun}, so append to this\n\t        fun.keys = opts.keys;\n\t      }\n\t    }\n\t  }\n\t\n\t  // We are referencing a query defined in the design doc\n\t  if (typeof fun === 'string') {\n\t    var parts = parseViewName(fun);\n\t    return db.request({\n\t      method: method,\n\t      url: '_design/' + parts[0] + '/_view/' + parts[1] + params,\n\t      body: body\n\t    }).then(postprocessAttachments(opts));\n\t  }\n\t\n\t  // We are using a temporary view, terrible for performance, good for testing\n\t  body = body || {};\n\t  Object.keys(fun).forEach(function (key) {\n\t    if (Array.isArray(fun[key])) {\n\t      body[key] = fun[key];\n\t    } else {\n\t      body[key] = fun[key].toString();\n\t    }\n\t  });\n\t  return db.request({\n\t    method: 'POST',\n\t    url: '_temp_view' + params,\n\t    body: body\n\t  }).then(postprocessAttachments(opts));\n\t}\n\t\n\t// custom adapters can define their own api._query\n\t// and override the default behavior\n\t/* istanbul ignore next */\n\tfunction customQuery(db, fun, opts) {\n\t  return new PouchPromise(function (resolve, reject) {\n\t    db._query(fun, opts, function (err, res) {\n\t      if (err) {\n\t        return reject(err);\n\t      }\n\t      resolve(res);\n\t    });\n\t  });\n\t}\n\t\n\t// custom adapters can define their own api._viewCleanup\n\t// and override the default behavior\n\t/* istanbul ignore next */\n\tfunction customViewCleanup(db) {\n\t  return new PouchPromise(function (resolve, reject) {\n\t    db._viewCleanup(function (err, res) {\n\t      if (err) {\n\t        return reject(err);\n\t      }\n\t      resolve(res);\n\t    });\n\t  });\n\t}\n\t\n\tfunction defaultsTo(value) {\n\t  return function (reason) {\n\t    /* istanbul ignore else */\n\t    if (reason.status === 404) {\n\t      return value;\n\t    } else {\n\t      throw reason;\n\t    }\n\t  };\n\t}\n\t\n\t// returns a promise for a list of docs to update, based on the input docId.\n\t// the order doesn't matter, because post-3.2.0, bulkDocs\n\t// is an atomic operation in all three adapters.\n\tfunction getDocsToPersist(docId, view, docIdsToChangesAndEmits) {\n\t  var metaDocId = '_local/doc_' + docId;\n\t  var defaultMetaDoc = {_id: metaDocId, keys: []};\n\t  var docData = docIdsToChangesAndEmits[docId];\n\t  var indexableKeysToKeyValues = docData.indexableKeysToKeyValues;\n\t  var changes = docData.changes;\n\t\n\t  function getMetaDoc() {\n\t    if (isGenOne(changes)) {\n\t      // generation 1, so we can safely assume initial state\n\t      // for performance reasons (avoids unnecessary GETs)\n\t      return PouchPromise.resolve(defaultMetaDoc);\n\t    }\n\t    return view.db.get(metaDocId).catch(defaultsTo(defaultMetaDoc));\n\t  }\n\t\n\t  function getKeyValueDocs(metaDoc) {\n\t    if (!metaDoc.keys.length) {\n\t      // no keys, no need for a lookup\n\t      return PouchPromise.resolve({rows: []});\n\t    }\n\t    return view.db.allDocs({\n\t      keys: metaDoc.keys,\n\t      include_docs: true\n\t    });\n\t  }\n\t\n\t  function processKvDocs(metaDoc, kvDocsRes) {\n\t    var kvDocs = [];\n\t    var oldKeysMap = {};\n\t\n\t    for (var i = 0, len = kvDocsRes.rows.length; i < len; i++) {\n\t      var row = kvDocsRes.rows[i];\n\t      var doc = row.doc;\n\t      if (!doc) { // deleted\n\t        continue;\n\t      }\n\t      kvDocs.push(doc);\n\t      oldKeysMap[doc._id] = true;\n\t      doc._deleted = !indexableKeysToKeyValues[doc._id];\n\t      if (!doc._deleted) {\n\t        var keyValue = indexableKeysToKeyValues[doc._id];\n\t        if ('value' in keyValue) {\n\t          doc.value = keyValue.value;\n\t        }\n\t      }\n\t    }\n\t\n\t    var newKeys = Object.keys(indexableKeysToKeyValues);\n\t    newKeys.forEach(function (key) {\n\t      if (!oldKeysMap[key]) {\n\t        // new doc\n\t        var kvDoc = {\n\t          _id: key\n\t        };\n\t        var keyValue = indexableKeysToKeyValues[key];\n\t        if ('value' in keyValue) {\n\t          kvDoc.value = keyValue.value;\n\t        }\n\t        kvDocs.push(kvDoc);\n\t      }\n\t    });\n\t    metaDoc.keys = uniq(newKeys.concat(metaDoc.keys));\n\t    kvDocs.push(metaDoc);\n\t\n\t    return kvDocs;\n\t  }\n\t\n\t  return getMetaDoc().then(function (metaDoc) {\n\t    return getKeyValueDocs(metaDoc).then(function (kvDocsRes) {\n\t      return processKvDocs(metaDoc, kvDocsRes);\n\t    });\n\t  });\n\t}\n\t\n\t// updates all emitted key/value docs and metaDocs in the mrview database\n\t// for the given batch of documents from the source database\n\tfunction saveKeyValues(view, docIdsToChangesAndEmits, seq) {\n\t  var seqDocId = '_local/lastSeq';\n\t  return view.db.get(seqDocId)\n\t  .catch(defaultsTo({_id: seqDocId, seq: 0}))\n\t  .then(function (lastSeqDoc) {\n\t    var docIds = Object.keys(docIdsToChangesAndEmits);\n\t    return PouchPromise.all(docIds.map(function (docId) {\n\t      return getDocsToPersist(docId, view, docIdsToChangesAndEmits);\n\t    })).then(function (listOfDocsToPersist) {\n\t      var docsToPersist = flatten(listOfDocsToPersist);\n\t      lastSeqDoc.seq = seq;\n\t      docsToPersist.push(lastSeqDoc);\n\t      // write all docs in a single operation, update the seq once\n\t      return view.db.bulkDocs({docs : docsToPersist});\n\t    });\n\t  });\n\t}\n\t\n\tfunction getQueue(view) {\n\t  var viewName = typeof view === 'string' ? view : view.name;\n\t  var queue = persistentQueues[viewName];\n\t  if (!queue) {\n\t    queue = persistentQueues[viewName] = new TaskQueue$1();\n\t  }\n\t  return queue;\n\t}\n\t\n\tfunction updateView(view) {\n\t  return sequentialize(getQueue(view), function () {\n\t    return updateViewInQueue(view);\n\t  })();\n\t}\n\t\n\tfunction updateViewInQueue(view) {\n\t  // bind the emit function once\n\t  var mapResults;\n\t  var doc;\n\t\n\t  function emit(key, value) {\n\t    var output = {id: doc._id, key: normalizeKey(key)};\n\t    // Don't explicitly store the value unless it's defined and non-null.\n\t    // This saves on storage space, because often people don't use it.\n\t    if (typeof value !== 'undefined' && value !== null) {\n\t      output.value = normalizeKey(value);\n\t    }\n\t    mapResults.push(output);\n\t  }\n\t\n\t  var mapFun;\n\t  // for temp_views one can use emit(doc, emit), see #38\n\t  if (typeof view.mapFun === \"function\" && view.mapFun.length === 2) {\n\t    var origMap = view.mapFun;\n\t    mapFun = function (doc) {\n\t      return origMap(doc, emit);\n\t    };\n\t  } else {\n\t    mapFun = evalFunctionWithEval(view.mapFun.toString(), emit);\n\t  }\n\t\n\t  var currentSeq = view.seq || 0;\n\t\n\t  function processChange(docIdsToChangesAndEmits, seq) {\n\t    return function () {\n\t      return saveKeyValues(view, docIdsToChangesAndEmits, seq);\n\t    };\n\t  }\n\t\n\t  var queue = new TaskQueue$1();\n\t  // TODO(neojski): https://github.com/daleharvey/pouchdb/issues/1521\n\t\n\t  return new PouchPromise(function (resolve, reject) {\n\t\n\t    function complete() {\n\t      queue.finish().then(function () {\n\t        view.seq = currentSeq;\n\t        resolve();\n\t      });\n\t    }\n\t\n\t    function processNextBatch() {\n\t      view.sourceDB.changes({\n\t        conflicts: true,\n\t        include_docs: true,\n\t        style: 'all_docs',\n\t        since: currentSeq,\n\t        limit: CHANGES_BATCH_SIZE$1\n\t      }).on('complete', function (response) {\n\t        var results = response.results;\n\t        if (!results.length) {\n\t          return complete();\n\t        }\n\t        var docIdsToChangesAndEmits = {};\n\t        for (var i = 0, l = results.length; i < l; i++) {\n\t          var change = results[i];\n\t          if (change.doc._id[0] !== '_') {\n\t            mapResults = [];\n\t            doc = change.doc;\n\t\n\t            if (!doc._deleted) {\n\t              tryCode$1(view.sourceDB, mapFun, [doc]);\n\t            }\n\t            mapResults.sort(sortByKeyThenValue);\n\t\n\t            var indexableKeysToKeyValues = {};\n\t            var lastKey;\n\t            for (var j = 0, jl = mapResults.length; j < jl; j++) {\n\t              var obj = mapResults[j];\n\t              var complexKey = [obj.key, obj.id];\n\t              if (collate(obj.key, lastKey) === 0) {\n\t                complexKey.push(j); // dup key+id, so make it unique\n\t              }\n\t              var indexableKey = toIndexableString(complexKey);\n\t              indexableKeysToKeyValues[indexableKey] = obj;\n\t              lastKey = obj.key;\n\t            }\n\t            docIdsToChangesAndEmits[change.doc._id] = {\n\t              indexableKeysToKeyValues: indexableKeysToKeyValues,\n\t              changes: change.changes\n\t            };\n\t          }\n\t          currentSeq = change.seq;\n\t        }\n\t        queue.add(processChange(docIdsToChangesAndEmits, currentSeq));\n\t        if (results.length < CHANGES_BATCH_SIZE$1) {\n\t          return complete();\n\t        }\n\t        return processNextBatch();\n\t      }).on('error', onError);\n\t      /* istanbul ignore next */\n\t      function onError(err) {\n\t        reject(err);\n\t      }\n\t    }\n\t\n\t    processNextBatch();\n\t  });\n\t}\n\t\n\tfunction reduceView(view, results, options) {\n\t  if (options.group_level === 0) {\n\t    delete options.group_level;\n\t  }\n\t\n\t  var shouldGroup = options.group || options.group_level;\n\t\n\t  var reduceFun;\n\t  if (builtInReduce[view.reduceFun]) {\n\t    reduceFun = builtInReduce[view.reduceFun];\n\t  } else {\n\t    reduceFun = evalFunctionWithEval(view.reduceFun.toString());\n\t  }\n\t\n\t  var groups = [];\n\t  var lvl = isNaN(options.group_level) ? Number.POSITIVE_INFINITY :\n\t    options.group_level;\n\t  results.forEach(function (e) {\n\t    var last = groups[groups.length - 1];\n\t    var groupKey = shouldGroup ? e.key : null;\n\t\n\t    // only set group_level for array keys\n\t    if (shouldGroup && Array.isArray(groupKey)) {\n\t      groupKey = groupKey.slice(0, lvl);\n\t    }\n\t\n\t    if (last && collate(last.groupKey, groupKey) === 0) {\n\t      last.keys.push([e.key, e.id]);\n\t      last.values.push(e.value);\n\t      return;\n\t    }\n\t    groups.push({\n\t      keys: [[e.key, e.id]],\n\t      values: [e.value],\n\t      groupKey: groupKey\n\t    });\n\t  });\n\t  results = [];\n\t  for (var i = 0, len = groups.length; i < len; i++) {\n\t    var e = groups[i];\n\t    var reduceTry = tryCode$1(view.sourceDB, reduceFun,\n\t      [e.keys, e.values, false]);\n\t    if (reduceTry.error && reduceTry.error instanceof BuiltInError) {\n\t      // CouchDB returns an error if a built-in errors out\n\t      throw reduceTry.error;\n\t    }\n\t    results.push({\n\t      // CouchDB just sets the value to null if a non-built-in errors out\n\t      value: reduceTry.error ? null : reduceTry.output,\n\t      key: e.groupKey\n\t    });\n\t  }\n\t  // no total_rows/offset when reducing\n\t  return {rows: sliceResults(results, options.limit, options.skip)};\n\t}\n\t\n\tfunction queryView(view, opts) {\n\t  return sequentialize(getQueue(view), function () {\n\t    return queryViewInQueue(view, opts);\n\t  })();\n\t}\n\t\n\tfunction queryViewInQueue(view, opts) {\n\t  var totalRows;\n\t  var shouldReduce = view.reduceFun && opts.reduce !== false;\n\t  var skip = opts.skip || 0;\n\t  if (typeof opts.keys !== 'undefined' && !opts.keys.length) {\n\t    // equivalent query\n\t    opts.limit = 0;\n\t    delete opts.keys;\n\t  }\n\t\n\t  function fetchFromView(viewOpts) {\n\t    viewOpts.include_docs = true;\n\t    return view.db.allDocs(viewOpts).then(function (res) {\n\t      totalRows = res.total_rows;\n\t      return res.rows.map(function (result) {\n\t\n\t        // implicit migration - in older versions of PouchDB,\n\t        // we explicitly stored the doc as {id: ..., key: ..., value: ...}\n\t        // this is tested in a migration test\n\t        /* istanbul ignore next */\n\t        if ('value' in result.doc && typeof result.doc.value === 'object' &&\n\t            result.doc.value !== null) {\n\t          var keys = Object.keys(result.doc.value).sort();\n\t          // this detection method is not perfect, but it's unlikely the user\n\t          // emitted a value which was an object with these 3 exact keys\n\t          var expectedKeys = ['id', 'key', 'value'];\n\t          if (!(keys < expectedKeys || keys > expectedKeys)) {\n\t            return result.doc.value;\n\t          }\n\t        }\n\t\n\t        var parsedKeyAndDocId = parseIndexableString(result.doc._id);\n\t        return {\n\t          key: parsedKeyAndDocId[0],\n\t          id: parsedKeyAndDocId[1],\n\t          value: ('value' in result.doc ? result.doc.value : null)\n\t        };\n\t      });\n\t    });\n\t  }\n\t\n\t  function onMapResultsReady(rows) {\n\t    var finalResults;\n\t    if (shouldReduce) {\n\t      finalResults = reduceView(view, rows, opts);\n\t    } else {\n\t      finalResults = {\n\t        total_rows: totalRows,\n\t        offset: skip,\n\t        rows: rows\n\t      };\n\t    }\n\t    if (opts.include_docs) {\n\t      var docIds = uniq(rows.map(rowToDocId));\n\t\n\t      return view.sourceDB.allDocs({\n\t        keys: docIds,\n\t        include_docs: true,\n\t        conflicts: opts.conflicts,\n\t        attachments: opts.attachments,\n\t        binary: opts.binary\n\t      }).then(function (allDocsRes) {\n\t        var docIdsToDocs = {};\n\t        allDocsRes.rows.forEach(function (row) {\n\t          if (row.doc) {\n\t            docIdsToDocs['$' + row.id] = row.doc;\n\t          }\n\t        });\n\t        rows.forEach(function (row) {\n\t          var docId = rowToDocId(row);\n\t          var doc = docIdsToDocs['$' + docId];\n\t          if (doc) {\n\t            row.doc = doc;\n\t          }\n\t        });\n\t        return finalResults;\n\t      });\n\t    } else {\n\t      return finalResults;\n\t    }\n\t  }\n\t\n\t  if (typeof opts.keys !== 'undefined') {\n\t    var keys = opts.keys;\n\t    var fetchPromises = keys.map(function (key) {\n\t      var viewOpts = {\n\t        startkey : toIndexableString([key]),\n\t        endkey   : toIndexableString([key, {}])\n\t      };\n\t      return fetchFromView(viewOpts);\n\t    });\n\t    return PouchPromise.all(fetchPromises).then(flatten).then(onMapResultsReady);\n\t  } else { // normal query, no 'keys'\n\t    var viewOpts = {\n\t      descending : opts.descending\n\t    };\n\t    if (opts.start_key) {\n\t        opts.startkey = opts.start_key;\n\t    }\n\t    if (opts.end_key) {\n\t        opts.endkey = opts.end_key;\n\t    }\n\t    if (typeof opts.startkey !== 'undefined') {\n\t      viewOpts.startkey = opts.descending ?\n\t        toIndexableString([opts.startkey, {}]) :\n\t        toIndexableString([opts.startkey]);\n\t    }\n\t    if (typeof opts.endkey !== 'undefined') {\n\t      var inclusiveEnd = opts.inclusive_end !== false;\n\t      if (opts.descending) {\n\t        inclusiveEnd = !inclusiveEnd;\n\t      }\n\t\n\t      viewOpts.endkey = toIndexableString(\n\t        inclusiveEnd ? [opts.endkey, {}] : [opts.endkey]);\n\t    }\n\t    if (typeof opts.key !== 'undefined') {\n\t      var keyStart = toIndexableString([opts.key]);\n\t      var keyEnd = toIndexableString([opts.key, {}]);\n\t      if (viewOpts.descending) {\n\t        viewOpts.endkey = keyStart;\n\t        viewOpts.startkey = keyEnd;\n\t      } else {\n\t        viewOpts.startkey = keyStart;\n\t        viewOpts.endkey = keyEnd;\n\t      }\n\t    }\n\t    if (!shouldReduce) {\n\t      if (typeof opts.limit === 'number') {\n\t        viewOpts.limit = opts.limit;\n\t      }\n\t      viewOpts.skip = skip;\n\t    }\n\t    return fetchFromView(viewOpts).then(onMapResultsReady);\n\t  }\n\t}\n\t\n\tfunction httpViewCleanup(db) {\n\t  return db.request({\n\t    method: 'POST',\n\t    url: '_view_cleanup'\n\t  });\n\t}\n\t\n\tfunction localViewCleanup(db) {\n\t  return db.get('_local/mrviews').then(function (metaDoc) {\n\t    var docsToViews = {};\n\t    Object.keys(metaDoc.views).forEach(function (fullViewName) {\n\t      var parts = parseViewName(fullViewName);\n\t      var designDocName = '_design/' + parts[0];\n\t      var viewName = parts[1];\n\t      docsToViews[designDocName] = docsToViews[designDocName] || {};\n\t      docsToViews[designDocName][viewName] = true;\n\t    });\n\t    var opts = {\n\t      keys : Object.keys(docsToViews),\n\t      include_docs : true\n\t    };\n\t    return db.allDocs(opts).then(function (res) {\n\t      var viewsToStatus = {};\n\t      res.rows.forEach(function (row) {\n\t        var ddocName = row.key.substring(8);\n\t        Object.keys(docsToViews[row.key]).forEach(function (viewName) {\n\t          var fullViewName = ddocName + '/' + viewName;\n\t          /* istanbul ignore if */\n\t          if (!metaDoc.views[fullViewName]) {\n\t            // new format, without slashes, to support PouchDB 2.2.0\n\t            // migration test in pouchdb's browser.migration.js verifies this\n\t            fullViewName = viewName;\n\t          }\n\t          var viewDBNames = Object.keys(metaDoc.views[fullViewName]);\n\t          // design doc deleted, or view function nonexistent\n\t          var statusIsGood = row.doc && row.doc.views &&\n\t            row.doc.views[viewName];\n\t          viewDBNames.forEach(function (viewDBName) {\n\t            viewsToStatus[viewDBName] =\n\t              viewsToStatus[viewDBName] || statusIsGood;\n\t          });\n\t        });\n\t      });\n\t      var dbsToDelete = Object.keys(viewsToStatus).filter(\n\t        function (viewDBName) { return !viewsToStatus[viewDBName]; });\n\t      var destroyPromises = dbsToDelete.map(function (viewDBName) {\n\t        return sequentialize(getQueue(viewDBName), function () {\n\t          return new db.constructor(viewDBName, db.__opts).destroy();\n\t        })();\n\t      });\n\t      return PouchPromise.all(destroyPromises).then(function () {\n\t        return {ok: true};\n\t      });\n\t    });\n\t  }, defaultsTo({ok: true}));\n\t}\n\t\n\tvar viewCleanup = callbackify(function () {\n\t  var db = this;\n\t  if (db.type() === 'http') {\n\t    return httpViewCleanup(db);\n\t  }\n\t  /* istanbul ignore next */\n\t  if (typeof db._viewCleanup === 'function') {\n\t    return customViewCleanup(db);\n\t  }\n\t  return localViewCleanup(db);\n\t});\n\t\n\tfunction queryPromised(db, fun, opts) {\n\t  if (db.type() === 'http') {\n\t    return httpQuery(db, fun, opts);\n\t  }\n\t\n\t  /* istanbul ignore next */\n\t  if (typeof db._query === 'function') {\n\t    return customQuery(db, fun, opts);\n\t  }\n\t\n\t  if (typeof fun !== 'string') {\n\t    // temp_view\n\t    checkQueryParseError(opts, fun);\n\t\n\t    var createViewOpts = {\n\t      db : db,\n\t      viewName : 'temp_view/temp_view',\n\t      map : fun.map,\n\t      reduce : fun.reduce,\n\t      temporary : true\n\t    };\n\t    tempViewQueue.add(function () {\n\t      return createView(createViewOpts).then(function (view) {\n\t        function cleanup() {\n\t          return view.db.destroy();\n\t        }\n\t        return fin(updateView(view).then(function () {\n\t          return queryView(view, opts);\n\t        }), cleanup);\n\t      });\n\t    });\n\t    return tempViewQueue.finish();\n\t  } else {\n\t    // persistent view\n\t    var fullViewName = fun;\n\t    var parts = parseViewName(fullViewName);\n\t    var designDocName = parts[0];\n\t    var viewName = parts[1];\n\t    return db.get('_design/' + designDocName).then(function (doc) {\n\t      var fun = doc.views && doc.views[viewName];\n\t\n\t      if (!fun || typeof fun.map !== 'string') {\n\t        throw new NotFoundError('ddoc ' + designDocName +\n\t        ' has no view named ' + viewName);\n\t      }\n\t      checkQueryParseError(opts, fun);\n\t\n\t      var createViewOpts = {\n\t        db : db,\n\t        viewName : fullViewName,\n\t        map : fun.map,\n\t        reduce : fun.reduce\n\t      };\n\t      return createView(createViewOpts).then(function (view) {\n\t        if (opts.stale === 'ok' || opts.stale === 'update_after') {\n\t          if (opts.stale === 'update_after') {\n\t            process.nextTick(function () {\n\t              updateView(view);\n\t            });\n\t          }\n\t          return queryView(view, opts);\n\t        } else { // stale not ok\n\t          return updateView(view).then(function () {\n\t            return queryView(view, opts);\n\t          });\n\t        }\n\t      });\n\t    });\n\t  }\n\t}\n\t\n\tvar query = function (fun, opts, callback) {\n\t  if (typeof opts === 'function') {\n\t    callback = opts;\n\t    opts = {};\n\t  }\n\t  opts = opts ? coerceOptions(opts) : {};\n\t\n\t  if (typeof fun === 'function') {\n\t    fun = {map : fun};\n\t  }\n\t\n\t  var db = this;\n\t  var promise = PouchPromise.resolve().then(function () {\n\t    return queryPromised(db, fun, opts);\n\t  });\n\t  promisedCallback(promise, callback);\n\t  return promise;\n\t};\n\t\n\t\n\tvar mapreduce = {\n\t  query: query,\n\t  viewCleanup: viewCleanup\n\t};\n\t\n\tfunction isGenOne$1(rev) {\n\t  return /^1-/.test(rev);\n\t}\n\t\n\tfunction fileHasChanged(localDoc, remoteDoc, filename) {\n\t  return !localDoc._attachments ||\n\t         !localDoc._attachments[filename] ||\n\t         localDoc._attachments[filename].digest !== remoteDoc._attachments[filename].digest;\n\t}\n\t\n\tfunction getDocAttachments(db, doc) {\n\t  var filenames = Object.keys(doc._attachments);\n\t  return PouchPromise.all(filenames.map(function (filename) {\n\t    return db.getAttachment(doc._id, filename, {rev: doc._rev});\n\t  }));\n\t}\n\t\n\tfunction getDocAttachmentsFromTargetOrSource(target, src, doc) {\n\t  var doCheckForLocalAttachments = src.type() === 'http' && target.type() !== 'http';\n\t  var filenames = Object.keys(doc._attachments);\n\t\n\t  if (!doCheckForLocalAttachments) {\n\t    return getDocAttachments(src, doc);\n\t  }\n\t\n\t  return target.get(doc._id).then(function (localDoc) {\n\t    return PouchPromise.all(filenames.map(function (filename) {\n\t      if (fileHasChanged(localDoc, doc, filename)) {\n\t        return src.getAttachment(doc._id, filename);\n\t      }\n\t\n\t      return target.getAttachment(localDoc._id, filename);\n\t    }));\n\t  }).catch(function (error) {\n\t    /* istanbul ignore if */\n\t    if (error.status !== 404) {\n\t      throw error;\n\t    }\n\t\n\t    return getDocAttachments(src, doc);\n\t  });\n\t}\n\t\n\tfunction createBulkGetOpts(diffs) {\n\t  var requests = [];\n\t  Object.keys(diffs).forEach(function (id) {\n\t    var missingRevs = diffs[id].missing;\n\t    missingRevs.forEach(function (missingRev) {\n\t      requests.push({\n\t        id: id,\n\t        rev: missingRev\n\t      });\n\t    });\n\t  });\n\t\n\t  return {\n\t    docs: requests,\n\t    revs: true\n\t  };\n\t}\n\t\n\t//\n\t// Fetch all the documents from the src as described in the \"diffs\",\n\t// which is a mapping of docs IDs to revisions. If the state ever\n\t// changes to \"cancelled\", then the returned promise will be rejected.\n\t// Else it will be resolved with a list of fetched documents.\n\t//\n\tfunction getDocs(src, target, diffs, state) {\n\t  diffs = clone(diffs); // we do not need to modify this\n\t\n\t  var resultDocs = [],\n\t      ok = true;\n\t\n\t  function getAllDocs() {\n\t\n\t    var bulkGetOpts = createBulkGetOpts(diffs);\n\t\n\t    if (!bulkGetOpts.docs.length) { // optimization: skip empty requests\n\t      return;\n\t    }\n\t\n\t    return src.bulkGet(bulkGetOpts).then(function (bulkGetResponse) {\n\t      /* istanbul ignore if */\n\t      if (state.cancelled) {\n\t        throw new Error('cancelled');\n\t      }\n\t      return PouchPromise.all(bulkGetResponse.results.map(function (bulkGetInfo) {\n\t        return PouchPromise.all(bulkGetInfo.docs.map(function (doc) {\n\t          var remoteDoc = doc.ok;\n\t\n\t          if (doc.error) {\n\t            // when AUTO_COMPACTION is set, docs can be returned which look\n\t            // like this: {\"missing\":\"1-7c3ac256b693c462af8442f992b83696\"}\n\t            ok = false;\n\t          }\n\t\n\t          if (!remoteDoc || !remoteDoc._attachments) {\n\t            return remoteDoc;\n\t          }\n\t\n\t          return getDocAttachmentsFromTargetOrSource(target, src, remoteDoc).then(function (attachments) {\n\t            var filenames = Object.keys(remoteDoc._attachments);\n\t            attachments.forEach(function (attachment, i) {\n\t              var att = remoteDoc._attachments[filenames[i]];\n\t              delete att.stub;\n\t              delete att.length;\n\t              att.data = attachment;\n\t            });\n\t\n\t            return remoteDoc;\n\t          });\n\t        }));\n\t      }))\n\t\n\t      .then(function (results) {\n\t        resultDocs = resultDocs.concat(flatten(results).filter(Boolean));\n\t      });\n\t    });\n\t  }\n\t\n\t  function hasAttachments(doc) {\n\t    return doc._attachments && Object.keys(doc._attachments).length > 0;\n\t  }\n\t\n\t  function fetchRevisionOneDocs(ids) {\n\t    // Optimization: fetch gen-1 docs and attachments in\n\t    // a single request using _all_docs\n\t    return src.allDocs({\n\t      keys: ids,\n\t      include_docs: true\n\t    }).then(function (res) {\n\t      if (state.cancelled) {\n\t        throw new Error('cancelled');\n\t      }\n\t      res.rows.forEach(function (row) {\n\t        if (row.deleted || !row.doc || !isGenOne$1(row.value.rev) ||\n\t            hasAttachments(row.doc)) {\n\t          // if any of these conditions apply, we need to fetch using get()\n\t          return;\n\t        }\n\t\n\t        // the doc we got back from allDocs() is sufficient\n\t        resultDocs.push(row.doc);\n\t        delete diffs[row.id];\n\t      });\n\t    });\n\t  }\n\t\n\t  function getRevisionOneDocs() {\n\t    // filter out the generation 1 docs and get them\n\t    // leaving the non-generation one docs to be got otherwise\n\t    var ids = Object.keys(diffs).filter(function (id) {\n\t      var missing = diffs[id].missing;\n\t      return missing.length === 1 && isGenOne$1(missing[0]);\n\t    });\n\t    if (ids.length > 0) {\n\t      return fetchRevisionOneDocs(ids);\n\t    }\n\t  }\n\t\n\t  function returnResult() {\n\t    return { ok:ok, docs:resultDocs };\n\t  }\n\t\n\t  return PouchPromise.resolve()\n\t    .then(getRevisionOneDocs)\n\t    .then(getAllDocs)\n\t    .then(returnResult);\n\t}\n\t\n\tvar CHECKPOINT_VERSION = 1;\n\tvar REPLICATOR = \"pouchdb\";\n\t// This is an arbitrary number to limit the\n\t// amount of replication history we save in the checkpoint.\n\t// If we save too much, the checkpoing docs will become very big,\n\t// if we save fewer, we'll run a greater risk of having to\n\t// read all the changes from 0 when checkpoint PUTs fail\n\t// CouchDB 2.0 has a more involved history pruning,\n\t// but let's go for the simple version for now.\n\tvar CHECKPOINT_HISTORY_SIZE = 5;\n\tvar LOWEST_SEQ = 0;\n\t\n\tfunction updateCheckpoint(db, id, checkpoint, session, returnValue) {\n\t  return db.get(id).catch(function (err) {\n\t    if (err.status === 404) {\n\t      if (db.type() === 'http') {\n\t        explainError(\n\t          404, 'PouchDB is just checking if a remote checkpoint exists.'\n\t        );\n\t      }\n\t      return {\n\t        session_id: session,\n\t        _id: id,\n\t        history: [],\n\t        replicator: REPLICATOR,\n\t        version: CHECKPOINT_VERSION\n\t      };\n\t    }\n\t    throw err;\n\t  }).then(function (doc) {\n\t    if (returnValue.cancelled) {\n\t      return;\n\t    }\n\t\n\t    // if the checkpoint has not changed, do not update\n\t    if (doc.last_seq === checkpoint) {\n\t      return;\n\t    }\n\t\n\t    // Filter out current entry for this replication\n\t    doc.history = (doc.history || []).filter(function (item) {\n\t      return item.session_id !== session;\n\t    });\n\t\n\t    // Add the latest checkpoint to history\n\t    doc.history.unshift({\n\t      last_seq: checkpoint,\n\t      session_id: session\n\t    });\n\t\n\t    // Just take the last pieces in history, to\n\t    // avoid really big checkpoint docs.\n\t    // see comment on history size above\n\t    doc.history = doc.history.slice(0, CHECKPOINT_HISTORY_SIZE);\n\t\n\t    doc.version = CHECKPOINT_VERSION;\n\t    doc.replicator = REPLICATOR;\n\t\n\t    doc.session_id = session;\n\t    doc.last_seq = checkpoint;\n\t\n\t    return db.put(doc).catch(function (err) {\n\t      if (err.status === 409) {\n\t        // retry; someone is trying to write a checkpoint simultaneously\n\t        return updateCheckpoint(db, id, checkpoint, session, returnValue);\n\t      }\n\t      throw err;\n\t    });\n\t  });\n\t}\n\t\n\tfunction Checkpointer(src, target, id, returnValue) {\n\t  this.src = src;\n\t  this.target = target;\n\t  this.id = id;\n\t  this.returnValue = returnValue;\n\t}\n\t\n\tCheckpointer.prototype.writeCheckpoint = function (checkpoint, session) {\n\t  var self = this;\n\t  return this.updateTarget(checkpoint, session).then(function () {\n\t    return self.updateSource(checkpoint, session);\n\t  });\n\t};\n\t\n\tCheckpointer.prototype.updateTarget = function (checkpoint, session) {\n\t  return updateCheckpoint(this.target, this.id, checkpoint,\n\t    session, this.returnValue);\n\t};\n\t\n\tCheckpointer.prototype.updateSource = function (checkpoint, session) {\n\t  var self = this;\n\t  if (this.readOnlySource) {\n\t    return PouchPromise.resolve(true);\n\t  }\n\t  return updateCheckpoint(this.src, this.id, checkpoint,\n\t    session, this.returnValue)\n\t    .catch(function (err) {\n\t      if (isForbiddenError(err)) {\n\t        self.readOnlySource = true;\n\t        return true;\n\t      }\n\t      throw err;\n\t    });\n\t};\n\t\n\tvar comparisons = {\n\t  \"undefined\": function (targetDoc, sourceDoc) {\n\t    // This is the previous comparison function\n\t    if (collate(targetDoc.last_seq, sourceDoc.last_seq) === 0) {\n\t      return sourceDoc.last_seq;\n\t    }\n\t    /* istanbul ignore next */\n\t    return 0;\n\t  },\n\t  \"1\": function (targetDoc, sourceDoc) {\n\t    // This is the comparison function ported from CouchDB\n\t    return compareReplicationLogs(sourceDoc, targetDoc).last_seq;\n\t  }\n\t};\n\t\n\tCheckpointer.prototype.getCheckpoint = function () {\n\t  var self = this;\n\t  return self.target.get(self.id).then(function (targetDoc) {\n\t    if (self.readOnlySource) {\n\t      return PouchPromise.resolve(targetDoc.last_seq);\n\t    }\n\t\n\t    return self.src.get(self.id).then(function (sourceDoc) {\n\t      // Since we can't migrate an old version doc to a new one\n\t      // (no session id), we just go with the lowest seq in this case\n\t      /* istanbul ignore if */\n\t      if (targetDoc.version !== sourceDoc.version) {\n\t        return LOWEST_SEQ;\n\t      }\n\t\n\t      var version;\n\t      if (targetDoc.version) {\n\t        version = targetDoc.version.toString();\n\t      } else {\n\t        version = \"undefined\";\n\t      }\n\t\n\t      if (version in comparisons) {\n\t        return comparisons[version](targetDoc, sourceDoc);\n\t      }\n\t      /* istanbul ignore next */\n\t      return LOWEST_SEQ;\n\t    }, function (err) {\n\t      if (err.status === 404 && targetDoc.last_seq) {\n\t        return self.src.put({\n\t          _id: self.id,\n\t          last_seq: LOWEST_SEQ\n\t        }).then(function () {\n\t          return LOWEST_SEQ;\n\t        }, function (err) {\n\t          if (isForbiddenError(err)) {\n\t            self.readOnlySource = true;\n\t            return targetDoc.last_seq;\n\t          }\n\t          /* istanbul ignore next */\n\t          return LOWEST_SEQ;\n\t        });\n\t      }\n\t      throw err;\n\t    });\n\t  }).catch(function (err) {\n\t    if (err.status !== 404) {\n\t      throw err;\n\t    }\n\t    return LOWEST_SEQ;\n\t  });\n\t};\n\t// This checkpoint comparison is ported from CouchDBs source\n\t// they come from here:\n\t// https://github.com/apache/couchdb-couch-replicator/blob/master/src/couch_replicator.erl#L863-L906\n\t\n\tfunction compareReplicationLogs(srcDoc, tgtDoc) {\n\t  if (srcDoc.session_id === tgtDoc.session_id) {\n\t    return {\n\t      last_seq: srcDoc.last_seq,\n\t      history: srcDoc.history\n\t    };\n\t  }\n\t\n\t  return compareReplicationHistory(srcDoc.history, tgtDoc.history);\n\t}\n\t\n\tfunction compareReplicationHistory(sourceHistory, targetHistory) {\n\t  // the erlang loop via function arguments is not so easy to repeat in JS\n\t  // therefore, doing this as recursion\n\t  var S = sourceHistory[0];\n\t  var sourceRest = sourceHistory.slice(1);\n\t  var T = targetHistory[0];\n\t  var targetRest = targetHistory.slice(1);\n\t\n\t  if (!S || targetHistory.length === 0) {\n\t    return {\n\t      last_seq: LOWEST_SEQ,\n\t      history: []\n\t    };\n\t  }\n\t\n\t  var sourceId = S.session_id;\n\t  /* istanbul ignore if */\n\t  if (hasSessionId(sourceId, targetHistory)) {\n\t    return {\n\t      last_seq: S.last_seq,\n\t      history: sourceHistory\n\t    };\n\t  }\n\t\n\t  var targetId = T.session_id;\n\t  if (hasSessionId(targetId, sourceRest)) {\n\t    return {\n\t      last_seq: T.last_seq,\n\t      history: targetRest\n\t    };\n\t  }\n\t\n\t  return compareReplicationHistory(sourceRest, targetRest);\n\t}\n\t\n\tfunction hasSessionId(sessionId, history) {\n\t  var props = history[0];\n\t  var rest = history.slice(1);\n\t\n\t  if (!sessionId || history.length === 0) {\n\t    return false;\n\t  }\n\t\n\t  if (sessionId === props.session_id) {\n\t    return true;\n\t  }\n\t\n\t  return hasSessionId(sessionId, rest);\n\t}\n\t\n\tfunction isForbiddenError(err) {\n\t  return typeof err.status === 'number' && Math.floor(err.status / 100) === 4;\n\t}\n\t\n\tvar STARTING_BACK_OFF = 0;\n\t\n\tfunction backOff(opts, returnValue, error, callback) {\n\t  if (opts.retry === false) {\n\t    returnValue.emit('error', error);\n\t    returnValue.removeAllListeners();\n\t    return;\n\t  }\n\t  if (typeof opts.back_off_function !== 'function') {\n\t    opts.back_off_function = defaultBackOff;\n\t  }\n\t  returnValue.emit('requestError', error);\n\t  if (returnValue.state === 'active' || returnValue.state === 'pending') {\n\t    returnValue.emit('paused', error);\n\t    returnValue.state = 'stopped';\n\t    var backOffSet = function backoffTimeSet() {\n\t      opts.current_back_off = STARTING_BACK_OFF;\n\t    };\n\t    var removeBackOffSetter = function removeBackOffTimeSet() {\n\t      returnValue.removeListener('active', backOffSet);\n\t    };\n\t    returnValue.once('paused', removeBackOffSetter);\n\t    returnValue.once('active', backOffSet);\n\t  }\n\t\n\t  opts.current_back_off = opts.current_back_off || STARTING_BACK_OFF;\n\t  opts.current_back_off = opts.back_off_function(opts.current_back_off);\n\t  setTimeout(callback, opts.current_back_off);\n\t}\n\t\n\tfunction sortObjectPropertiesByKey(queryParams) {\n\t  return Object.keys(queryParams).sort(collate).reduce(function (result, key) {\n\t    result[key] = queryParams[key];\n\t    return result;\n\t  }, {});\n\t}\n\t\n\t// Generate a unique id particular to this replication.\n\t// Not guaranteed to align perfectly with CouchDB's rep ids.\n\tfunction generateReplicationId(src, target, opts) {\n\t  var docIds = opts.doc_ids ? opts.doc_ids.sort(collate) : '';\n\t  var filterFun = opts.filter ? opts.filter.toString() : '';\n\t  var queryParams = '';\n\t  var filterViewName =  '';\n\t\n\t  if (opts.filter && opts.query_params) {\n\t    queryParams = JSON.stringify(sortObjectPropertiesByKey(opts.query_params));\n\t  }\n\t\n\t  if (opts.filter && opts.filter === '_view') {\n\t    filterViewName = opts.view.toString();\n\t  }\n\t\n\t  return PouchPromise.all([src.id(), target.id()]).then(function (res) {\n\t    var queryData = res[0] + res[1] + filterFun + filterViewName +\n\t      queryParams + docIds;\n\t    return new PouchPromise(function (resolve) {\n\t      binaryMd5(queryData, resolve);\n\t    });\n\t  }).then(function (md5sum) {\n\t    // can't use straight-up md5 alphabet, because\n\t    // the char '/' is interpreted as being for attachments,\n\t    // and + is also not url-safe\n\t    md5sum = md5sum.replace(/\\//g, '.').replace(/\\+/g, '_');\n\t    return '_local/' + md5sum;\n\t  });\n\t}\n\t\n\tfunction replicate$1(src, target, opts, returnValue, result) {\n\t  var batches = [];               // list of batches to be processed\n\t  var currentBatch;               // the batch currently being processed\n\t  var pendingBatch = {\n\t    seq: 0,\n\t    changes: [],\n\t    docs: []\n\t  }; // next batch, not yet ready to be processed\n\t  var writingCheckpoint = false;  // true while checkpoint is being written\n\t  var changesCompleted = false;   // true when all changes received\n\t  var replicationCompleted = false; // true when replication has completed\n\t  var last_seq = 0;\n\t  var continuous = opts.continuous || opts.live || false;\n\t  var batch_size = opts.batch_size || 100;\n\t  var batches_limit = opts.batches_limit || 10;\n\t  var changesPending = false;     // true while src.changes is running\n\t  var doc_ids = opts.doc_ids;\n\t  var repId;\n\t  var checkpointer;\n\t  var changedDocs = [];\n\t  // Like couchdb, every replication gets a unique session id\n\t  var session = uuid();\n\t\n\t  result = result || {\n\t    ok: true,\n\t    start_time: new Date(),\n\t    docs_read: 0,\n\t    docs_written: 0,\n\t    doc_write_failures: 0,\n\t    errors: []\n\t  };\n\t\n\t  var changesOpts = {};\n\t  returnValue.ready(src, target);\n\t\n\t  function initCheckpointer() {\n\t    if (checkpointer) {\n\t      return PouchPromise.resolve();\n\t    }\n\t    return generateReplicationId(src, target, opts).then(function (res) {\n\t      repId = res;\n\t      checkpointer = new Checkpointer(src, target, repId, returnValue);\n\t    });\n\t  }\n\t\n\t  function writeDocs() {\n\t    changedDocs = [];\n\t\n\t    if (currentBatch.docs.length === 0) {\n\t      return;\n\t    }\n\t    var docs = currentBatch.docs;\n\t    var bulkOpts = {timeout: opts.timeout};\n\t    return target.bulkDocs({docs: docs, new_edits: false}, bulkOpts).then(function (res) {\n\t      /* istanbul ignore if */\n\t      if (returnValue.cancelled) {\n\t        completeReplication();\n\t        throw new Error('cancelled');\n\t      }\n\t\n\t      // `res` doesn't include full documents (which live in `docs`), so we create a map of \n\t      // (id -> error), and check for errors while iterating over `docs`\n\t      var errorsById = Object.create(null);\n\t      res.forEach(function (res) {\n\t        if (res.error) {\n\t          errorsById[res.id] = res;\n\t        }\n\t      });\n\t\n\t      var errorsNo = Object.keys(errorsById).length;\n\t      result.doc_write_failures += errorsNo;\n\t      result.docs_written += docs.length - errorsNo;\n\t\n\t      docs.forEach(function (doc) {\n\t        var error = errorsById[doc._id];\n\t        if (error) {\n\t          result.errors.push(error);\n\t          if (error.name === 'unauthorized' || error.name === 'forbidden') {\n\t            returnValue.emit('denied', clone(error));\n\t          } else {\n\t            throw error;\n\t          }\n\t        } else {\n\t          changedDocs.push(doc);\n\t        }\n\t      });\n\t\n\t    }, function (err) {\n\t      result.doc_write_failures += docs.length;\n\t      throw err;\n\t    });\n\t  }\n\t\n\t  function finishBatch() {\n\t    if (currentBatch.error) {\n\t      throw new Error('There was a problem getting docs.');\n\t    }\n\t    result.last_seq = last_seq = currentBatch.seq;\n\t    var outResult = clone(result);\n\t    if (changedDocs.length) {\n\t      outResult.docs = changedDocs;\n\t      returnValue.emit('change', outResult);\n\t    }\n\t    writingCheckpoint = true;\n\t    return checkpointer.writeCheckpoint(currentBatch.seq,\n\t        session).then(function () {\n\t      writingCheckpoint = false;\n\t      /* istanbul ignore if */\n\t      if (returnValue.cancelled) {\n\t        completeReplication();\n\t        throw new Error('cancelled');\n\t      }\n\t      currentBatch = undefined;\n\t      getChanges();\n\t    }).catch(function (err) {\n\t      onCheckpointError(err);\n\t      throw err;\n\t    });\n\t  }\n\t\n\t  function getDiffs() {\n\t    var diff = {};\n\t    currentBatch.changes.forEach(function (change) {\n\t      // Couchbase Sync Gateway emits these, but we can ignore them\n\t      /* istanbul ignore if */\n\t      if (change.id === \"_user/\") {\n\t        return;\n\t      }\n\t      diff[change.id] = change.changes.map(function (x) {\n\t        return x.rev;\n\t      });\n\t    });\n\t    return target.revsDiff(diff).then(function (diffs) {\n\t      /* istanbul ignore if */\n\t      if (returnValue.cancelled) {\n\t        completeReplication();\n\t        throw new Error('cancelled');\n\t      }\n\t      // currentBatch.diffs elements are deleted as the documents are written\n\t      currentBatch.diffs = diffs;\n\t    });\n\t  }\n\t\n\t  function getBatchDocs() {\n\t    return getDocs(src, target, currentBatch.diffs, returnValue).then(function (got) {\n\t      currentBatch.error = !got.ok;\n\t      got.docs.forEach(function (doc) {\n\t        delete currentBatch.diffs[doc._id];\n\t        result.docs_read++;\n\t        currentBatch.docs.push(doc);\n\t      });\n\t    });\n\t  }\n\t\n\t  function startNextBatch() {\n\t    if (returnValue.cancelled || currentBatch) {\n\t      return;\n\t    }\n\t    if (batches.length === 0) {\n\t      processPendingBatch(true);\n\t      return;\n\t    }\n\t    currentBatch = batches.shift();\n\t    getDiffs()\n\t      .then(getBatchDocs)\n\t      .then(writeDocs)\n\t      .then(finishBatch)\n\t      .then(startNextBatch)\n\t      .catch(function (err) {\n\t        abortReplication('batch processing terminated with error', err);\n\t      });\n\t  }\n\t\n\t\n\t  function processPendingBatch(immediate) {\n\t    if (pendingBatch.changes.length === 0) {\n\t      if (batches.length === 0 && !currentBatch) {\n\t        if ((continuous && changesOpts.live) || changesCompleted) {\n\t          returnValue.state = 'pending';\n\t          returnValue.emit('paused');\n\t        }\n\t        if (changesCompleted) {\n\t          completeReplication();\n\t        }\n\t      }\n\t      return;\n\t    }\n\t    if (\n\t      immediate ||\n\t      changesCompleted ||\n\t      pendingBatch.changes.length >= batch_size\n\t    ) {\n\t      batches.push(pendingBatch);\n\t      pendingBatch = {\n\t        seq: 0,\n\t        changes: [],\n\t        docs: []\n\t      };\n\t      if (returnValue.state === 'pending' || returnValue.state === 'stopped') {\n\t        returnValue.state = 'active';\n\t        returnValue.emit('active');\n\t      }\n\t      startNextBatch();\n\t    }\n\t  }\n\t\n\t\n\t  function abortReplication(reason, err) {\n\t    if (replicationCompleted) {\n\t      return;\n\t    }\n\t    if (!err.message) {\n\t      err.message = reason;\n\t    }\n\t    result.ok = false;\n\t    result.status = 'aborting';\n\t    batches = [];\n\t    pendingBatch = {\n\t      seq: 0,\n\t      changes: [],\n\t      docs: []\n\t    };\n\t    completeReplication(err);\n\t  }\n\t\n\t\n\t  function completeReplication(fatalError) {\n\t    if (replicationCompleted) {\n\t      return;\n\t    }\n\t    /* istanbul ignore if */\n\t    if (returnValue.cancelled) {\n\t      result.status = 'cancelled';\n\t      if (writingCheckpoint) {\n\t        return;\n\t      }\n\t    }\n\t    result.status = result.status || 'complete';\n\t    result.end_time = new Date();\n\t    result.last_seq = last_seq;\n\t    replicationCompleted = true;\n\t\n\t    if (fatalError) {\n\t      fatalError.result = result;\n\t\n\t      if (fatalError.name === 'unauthorized' || fatalError.name === 'forbidden') {\n\t        returnValue.emit('error', fatalError);\n\t        returnValue.removeAllListeners();\n\t      } else {\n\t        backOff(opts, returnValue, fatalError, function () {\n\t          replicate$1(src, target, opts, returnValue);\n\t        });\n\t      }\n\t    } else {\n\t      returnValue.emit('complete', result);\n\t      returnValue.removeAllListeners();\n\t    }\n\t  }\n\t\n\t\n\t  function onChange(change) {\n\t    /* istanbul ignore if */\n\t    if (returnValue.cancelled) {\n\t      return completeReplication();\n\t    }\n\t    var filter = filterChange(opts)(change);\n\t    if (!filter) {\n\t      return;\n\t    }\n\t    pendingBatch.seq = change.seq;\n\t    pendingBatch.changes.push(change);\n\t    processPendingBatch(batches.length === 0 && changesOpts.live);\n\t  }\n\t\n\t\n\t  function onChangesComplete(changes) {\n\t    changesPending = false;\n\t    /* istanbul ignore if */\n\t    if (returnValue.cancelled) {\n\t      return completeReplication();\n\t    }\n\t\n\t    // if no results were returned then we're done,\n\t    // else fetch more\n\t    if (changes.results.length > 0) {\n\t      changesOpts.since = changes.last_seq;\n\t      getChanges();\n\t      processPendingBatch(true);\n\t    } else {\n\t\n\t      var complete = function () {\n\t        if (continuous) {\n\t          changesOpts.live = true;\n\t          getChanges();\n\t        } else {\n\t          changesCompleted = true;\n\t        }\n\t        processPendingBatch(true);\n\t      };\n\t\n\t      // update the checkpoint so we start from the right seq next time\n\t      if (!currentBatch && changes.results.length === 0) {\n\t        writingCheckpoint = true;\n\t        checkpointer.writeCheckpoint(changes.last_seq,\n\t            session).then(function () {\n\t          writingCheckpoint = false;\n\t          result.last_seq = last_seq = changes.last_seq;\n\t          complete();\n\t        })\n\t        .catch(onCheckpointError);\n\t      } else {\n\t        complete();\n\t      }\n\t    }\n\t  }\n\t\n\t\n\t  function onChangesError(err) {\n\t    changesPending = false;\n\t    /* istanbul ignore if */\n\t    if (returnValue.cancelled) {\n\t      return completeReplication();\n\t    }\n\t    abortReplication('changes rejected', err);\n\t  }\n\t\n\t\n\t  function getChanges() {\n\t    if (!(\n\t      !changesPending &&\n\t      !changesCompleted &&\n\t      batches.length < batches_limit\n\t      )) {\n\t      return;\n\t    }\n\t    changesPending = true;\n\t    function abortChanges() {\n\t      changes.cancel();\n\t    }\n\t    function removeListener() {\n\t      returnValue.removeListener('cancel', abortChanges);\n\t    }\n\t\n\t    if (returnValue._changes) { // remove old changes() and listeners\n\t      returnValue.removeListener('cancel', returnValue._abortChanges);\n\t      returnValue._changes.cancel();\n\t    }\n\t    returnValue.once('cancel', abortChanges);\n\t\n\t    var changes = src.changes(changesOpts)\n\t      .on('change', onChange);\n\t    changes.then(removeListener, removeListener);\n\t    changes.then(onChangesComplete)\n\t      .catch(onChangesError);\n\t\n\t    if (opts.retry) {\n\t      // save for later so we can cancel if necessary\n\t      returnValue._changes = changes;\n\t      returnValue._abortChanges = abortChanges;\n\t    }\n\t  }\n\t\n\t\n\t  function startChanges() {\n\t    initCheckpointer().then(function () {\n\t      /* istanbul ignore if */\n\t      if (returnValue.cancelled) {\n\t        completeReplication();\n\t        return;\n\t      }\n\t      return checkpointer.getCheckpoint().then(function (checkpoint) {\n\t        last_seq = checkpoint;\n\t        changesOpts = {\n\t          since: last_seq,\n\t          limit: batch_size,\n\t          batch_size: batch_size,\n\t          style: 'all_docs',\n\t          doc_ids: doc_ids,\n\t          return_docs: true // required so we know when we're done\n\t        };\n\t        if (opts.filter) {\n\t          if (typeof opts.filter !== 'string') {\n\t            // required for the client-side filter in onChange\n\t            changesOpts.include_docs = true;\n\t          } else { // ddoc filter\n\t            changesOpts.filter = opts.filter;\n\t          }\n\t        }\n\t        if ('heartbeat' in opts) {\n\t          changesOpts.heartbeat = opts.heartbeat;\n\t        }\n\t        if ('timeout' in opts) {\n\t          changesOpts.timeout = opts.timeout;\n\t        }\n\t        if (opts.query_params) {\n\t          changesOpts.query_params = opts.query_params;\n\t        }\n\t        if (opts.view) {\n\t          changesOpts.view = opts.view;\n\t        }\n\t        getChanges();\n\t      });\n\t    }).catch(function (err) {\n\t      abortReplication('getCheckpoint rejected with ', err);\n\t    });\n\t  }\n\t\n\t  /* istanbul ignore next */\n\t  function onCheckpointError(err) {\n\t    writingCheckpoint = false;\n\t    abortReplication('writeCheckpoint completed with error', err);\n\t  }\n\t\n\t  /* istanbul ignore if */\n\t  if (returnValue.cancelled) { // cancelled immediately\n\t    completeReplication();\n\t    return;\n\t  }\n\t\n\t  if (!returnValue._addedListeners) {\n\t    returnValue.once('cancel', completeReplication);\n\t\n\t    if (typeof opts.complete === 'function') {\n\t      returnValue.once('error', opts.complete);\n\t      returnValue.once('complete', function (result) {\n\t        opts.complete(null, result);\n\t      });\n\t    }\n\t    returnValue._addedListeners = true;\n\t  }\n\t\n\t  if (typeof opts.since === 'undefined') {\n\t    startChanges();\n\t  } else {\n\t    initCheckpointer().then(function () {\n\t      writingCheckpoint = true;\n\t      return checkpointer.writeCheckpoint(opts.since, session);\n\t    }).then(function () {\n\t      writingCheckpoint = false;\n\t      /* istanbul ignore if */\n\t      if (returnValue.cancelled) {\n\t        completeReplication();\n\t        return;\n\t      }\n\t      last_seq = opts.since;\n\t      startChanges();\n\t    }).catch(onCheckpointError);\n\t  }\n\t}\n\t\n\t// We create a basic promise so the caller can cancel the replication possibly\n\t// before we have actually started listening to changes etc\n\tinherits(Replication, events.EventEmitter);\n\tfunction Replication() {\n\t  events.EventEmitter.call(this);\n\t  this.cancelled = false;\n\t  this.state = 'pending';\n\t  var self = this;\n\t  var promise = new PouchPromise(function (fulfill, reject) {\n\t    self.once('complete', fulfill);\n\t    self.once('error', reject);\n\t  });\n\t  self.then = function (resolve, reject) {\n\t    return promise.then(resolve, reject);\n\t  };\n\t  self.catch = function (reject) {\n\t    return promise.catch(reject);\n\t  };\n\t  // As we allow error handling via \"error\" event as well,\n\t  // put a stub in here so that rejecting never throws UnhandledError.\n\t  self.catch(function () {});\n\t}\n\t\n\tReplication.prototype.cancel = function () {\n\t  this.cancelled = true;\n\t  this.state = 'cancelled';\n\t  this.emit('cancel');\n\t};\n\t\n\tReplication.prototype.ready = function (src, target) {\n\t  var self = this;\n\t  if (self._readyCalled) {\n\t    return;\n\t  }\n\t  self._readyCalled = true;\n\t\n\t  function onDestroy() {\n\t    self.cancel();\n\t  }\n\t  src.once('destroyed', onDestroy);\n\t  target.once('destroyed', onDestroy);\n\t  function cleanup() {\n\t    src.removeListener('destroyed', onDestroy);\n\t    target.removeListener('destroyed', onDestroy);\n\t  }\n\t  self.once('complete', cleanup);\n\t};\n\t\n\tfunction toPouch(db, opts) {\n\t  var PouchConstructor = opts.PouchConstructor;\n\t  if (typeof db === 'string') {\n\t    return new PouchConstructor(db, opts);\n\t  } else {\n\t    return db;\n\t  }\n\t}\n\t\n\tfunction replicate(src, target, opts, callback) {\n\t\n\t  if (typeof opts === 'function') {\n\t    callback = opts;\n\t    opts = {};\n\t  }\n\t  if (typeof opts === 'undefined') {\n\t    opts = {};\n\t  }\n\t\n\t  if (opts.doc_ids && !Array.isArray(opts.doc_ids)) {\n\t    throw createError(BAD_REQUEST,\n\t                       \"`doc_ids` filter parameter is not a list.\");\n\t  }\n\t\n\t  opts.complete = callback;\n\t  opts = clone(opts);\n\t  opts.continuous = opts.continuous || opts.live;\n\t  opts.retry = ('retry' in opts) ? opts.retry : false;\n\t  /*jshint validthis:true */\n\t  opts.PouchConstructor = opts.PouchConstructor || this;\n\t  var replicateRet = new Replication(opts);\n\t  var srcPouch = toPouch(src, opts);\n\t  var targetPouch = toPouch(target, opts);\n\t  replicate$1(srcPouch, targetPouch, opts, replicateRet);\n\t  return replicateRet;\n\t}\n\t\n\tinherits(Sync, events.EventEmitter);\n\tfunction sync(src, target, opts, callback) {\n\t  if (typeof opts === 'function') {\n\t    callback = opts;\n\t    opts = {};\n\t  }\n\t  if (typeof opts === 'undefined') {\n\t    opts = {};\n\t  }\n\t  opts = clone(opts);\n\t  /*jshint validthis:true */\n\t  opts.PouchConstructor = opts.PouchConstructor || this;\n\t  src = toPouch(src, opts);\n\t  target = toPouch(target, opts);\n\t  return new Sync(src, target, opts, callback);\n\t}\n\t\n\tfunction Sync(src, target, opts, callback) {\n\t  var self = this;\n\t  this.canceled = false;\n\t\n\t  var optsPush = opts.push ? jsExtend.extend({}, opts, opts.push) : opts;\n\t  var optsPull = opts.pull ? jsExtend.extend({}, opts, opts.pull) : opts;\n\t\n\t  this.push = replicate(src, target, optsPush);\n\t  this.pull = replicate(target, src, optsPull);\n\t\n\t  this.pushPaused = true;\n\t  this.pullPaused = true;\n\t\n\t  function pullChange(change) {\n\t    self.emit('change', {\n\t      direction: 'pull',\n\t      change: change\n\t    });\n\t  }\n\t  function pushChange(change) {\n\t    self.emit('change', {\n\t      direction: 'push',\n\t      change: change\n\t    });\n\t  }\n\t  function pushDenied(doc) {\n\t    self.emit('denied', {\n\t      direction: 'push',\n\t      doc: doc\n\t    });\n\t  }\n\t  function pullDenied(doc) {\n\t    self.emit('denied', {\n\t      direction: 'pull',\n\t      doc: doc\n\t    });\n\t  }\n\t  function pushPaused() {\n\t    self.pushPaused = true;\n\t    /* istanbul ignore if */\n\t    if (self.pullPaused) {\n\t      self.emit('paused');\n\t    }\n\t  }\n\t  function pullPaused() {\n\t    self.pullPaused = true;\n\t    /* istanbul ignore if */\n\t    if (self.pushPaused) {\n\t      self.emit('paused');\n\t    }\n\t  }\n\t  function pushActive() {\n\t    self.pushPaused = false;\n\t    /* istanbul ignore if */\n\t    if (self.pullPaused) {\n\t      self.emit('active', {\n\t        direction: 'push'\n\t      });\n\t    }\n\t  }\n\t  function pullActive() {\n\t    self.pullPaused = false;\n\t    /* istanbul ignore if */\n\t    if (self.pushPaused) {\n\t      self.emit('active', {\n\t        direction: 'pull'\n\t      });\n\t    }\n\t  }\n\t\n\t  var removed = {};\n\t\n\t  function removeAll(type) { // type is 'push' or 'pull'\n\t    return function (event, func) {\n\t      var isChange = event === 'change' &&\n\t        (func === pullChange || func === pushChange);\n\t      var isDenied = event === 'denied' &&\n\t        (func === pullDenied || func === pushDenied);\n\t      var isPaused = event === 'paused' &&\n\t        (func === pullPaused || func === pushPaused);\n\t      var isActive = event === 'active' &&\n\t        (func === pullActive || func === pushActive);\n\t\n\t      if (isChange || isDenied || isPaused || isActive) {\n\t        if (!(event in removed)) {\n\t          removed[event] = {};\n\t        }\n\t        removed[event][type] = true;\n\t        if (Object.keys(removed[event]).length === 2) {\n\t          // both push and pull have asked to be removed\n\t          self.removeAllListeners(event);\n\t        }\n\t      }\n\t    };\n\t  }\n\t\n\t  if (opts.live) {\n\t    this.push.on('complete', self.pull.cancel.bind(self.pull));\n\t    this.pull.on('complete', self.push.cancel.bind(self.push));\n\t  }\n\t\n\t  this.on('newListener', function (event) {\n\t    if (event === 'change') {\n\t      self.pull.on('change', pullChange);\n\t      self.push.on('change', pushChange);\n\t    } else if (event === 'denied') {\n\t      self.pull.on('denied', pullDenied);\n\t      self.push.on('denied', pushDenied);\n\t    } else if (event === 'active') {\n\t      self.pull.on('active', pullActive);\n\t      self.push.on('active', pushActive);\n\t    } else if (event === 'paused') {\n\t      self.pull.on('paused', pullPaused);\n\t      self.push.on('paused', pushPaused);\n\t    }\n\t  });\n\t\n\t  this.on('removeListener', function (event) {\n\t    if (event === 'change') {\n\t      self.pull.removeListener('change', pullChange);\n\t      self.push.removeListener('change', pushChange);\n\t    } else if (event === 'denied') {\n\t      self.pull.removeListener('denied', pullDenied);\n\t      self.push.removeListener('denied', pushDenied);\n\t    } else if (event === 'active') {\n\t      self.pull.removeListener('active', pullActive);\n\t      self.push.removeListener('active', pushActive);\n\t    } else if (event === 'paused') {\n\t      self.pull.removeListener('paused', pullPaused);\n\t      self.push.removeListener('paused', pushPaused);\n\t    }\n\t  });\n\t\n\t  this.pull.on('removeListener', removeAll('pull'));\n\t  this.push.on('removeListener', removeAll('push'));\n\t\n\t  var promise = PouchPromise.all([\n\t    this.push,\n\t    this.pull\n\t  ]).then(function (resp) {\n\t    var out = {\n\t      push: resp[0],\n\t      pull: resp[1]\n\t    };\n\t    self.emit('complete', out);\n\t    if (callback) {\n\t      callback(null, out);\n\t    }\n\t    self.removeAllListeners();\n\t    return out;\n\t  }, function (err) {\n\t    self.cancel();\n\t    if (callback) {\n\t      // if there's a callback, then the callback can receive\n\t      // the error event\n\t      callback(err);\n\t    } else {\n\t      // if there's no callback, then we're safe to emit an error\n\t      // event, which would otherwise throw an unhandled error\n\t      // due to 'error' being a special event in EventEmitters\n\t      self.emit('error', err);\n\t    }\n\t    self.removeAllListeners();\n\t    if (callback) {\n\t      // no sense throwing if we're already emitting an 'error' event\n\t      throw err;\n\t    }\n\t  });\n\t\n\t  this.then = function (success, err) {\n\t    return promise.then(success, err);\n\t  };\n\t\n\t  this.catch = function (err) {\n\t    return promise.catch(err);\n\t  };\n\t}\n\t\n\tSync.prototype.cancel = function () {\n\t  if (!this.canceled) {\n\t    this.canceled = true;\n\t    this.push.cancel();\n\t    this.pull.cancel();\n\t  }\n\t};\n\t\n\tfunction replication(PouchDB) {\n\t  PouchDB.replicate = replicate;\n\t  PouchDB.sync = sync;\n\t\n\t  Object.defineProperty(PouchDB.prototype, 'replicate', {\n\t    get: function () {\n\t      var self = this;\n\t      return {\n\t        from: function (other, opts, callback) {\n\t          return self.constructor.replicate(other, self, opts, callback);\n\t        },\n\t        to: function (other, opts, callback) {\n\t          return self.constructor.replicate(self, other, opts, callback);\n\t        }\n\t      };\n\t    }\n\t  });\n\t\n\t  PouchDB.prototype.sync = function (dbName, opts, callback) {\n\t    return this.constructor.sync(this, dbName, opts, callback);\n\t  };\n\t}\n\t\n\tPouchDB.plugin(IDBPouch)\n\t  .plugin(WebSqlPouch)\n\t  .plugin(HttpPouch$1)\n\t  .plugin(mapreduce)\n\t  .plugin(replication);\n\t\n\t// Pull from src because pouchdb-node/pouchdb-browser themselves\n\t// are aggressively optimized and jsnext:main would normally give us this\n\t// aggressive bundle.\n\t\n\tmodule.exports = PouchDB;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), (function() { return this; }())))\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t// shim for using process in browser\n\tvar process = module.exports = {};\n\t\n\t// cached from whatever global is present so that test runners that stub it\n\t// don't break things.  But we need to wrap it in a try catch in case it is\n\t// wrapped in strict mode code which doesn't define any globals.  It's inside a\n\t// function because try/catches deoptimize in certain engines.\n\t\n\tvar cachedSetTimeout;\n\tvar cachedClearTimeout;\n\t\n\tfunction defaultSetTimout() {\n\t    throw new Error('setTimeout has not been defined');\n\t}\n\tfunction defaultClearTimeout () {\n\t    throw new Error('clearTimeout has not been defined');\n\t}\n\t(function () {\n\t    try {\n\t        if (typeof setTimeout === 'function') {\n\t            cachedSetTimeout = setTimeout;\n\t        } else {\n\t            cachedSetTimeout = defaultSetTimout;\n\t        }\n\t    } catch (e) {\n\t        cachedSetTimeout = defaultSetTimout;\n\t    }\n\t    try {\n\t        if (typeof clearTimeout === 'function') {\n\t            cachedClearTimeout = clearTimeout;\n\t        } else {\n\t            cachedClearTimeout = defaultClearTimeout;\n\t        }\n\t    } catch (e) {\n\t        cachedClearTimeout = defaultClearTimeout;\n\t    }\n\t} ())\n\tfunction runTimeout(fun) {\n\t    if (cachedSetTimeout === setTimeout) {\n\t        //normal enviroments in sane situations\n\t        return setTimeout(fun, 0);\n\t    }\n\t    // if setTimeout wasn't available but was latter defined\n\t    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n\t        cachedSetTimeout = setTimeout;\n\t        return setTimeout(fun, 0);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedSetTimeout(fun, 0);\n\t    } catch(e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n\t            return cachedSetTimeout.call(null, fun, 0);\n\t        } catch(e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n\t            return cachedSetTimeout.call(this, fun, 0);\n\t        }\n\t    }\n\t\n\t\n\t}\n\tfunction runClearTimeout(marker) {\n\t    if (cachedClearTimeout === clearTimeout) {\n\t        //normal enviroments in sane situations\n\t        return clearTimeout(marker);\n\t    }\n\t    // if clearTimeout wasn't available but was latter defined\n\t    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n\t        cachedClearTimeout = clearTimeout;\n\t        return clearTimeout(marker);\n\t    }\n\t    try {\n\t        // when when somebody has screwed with setTimeout but no I.E. maddness\n\t        return cachedClearTimeout(marker);\n\t    } catch (e){\n\t        try {\n\t            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n\t            return cachedClearTimeout.call(null, marker);\n\t        } catch (e){\n\t            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n\t            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n\t            return cachedClearTimeout.call(this, marker);\n\t        }\n\t    }\n\t\n\t\n\t\n\t}\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\t\n\tfunction cleanUpNextTick() {\n\t    if (!draining || !currentQueue) {\n\t        return;\n\t    }\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\t\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = runTimeout(cleanUpNextTick);\n\t    draining = true;\n\t\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            if (currentQueue) {\n\t                currentQueue[queueIndex].run();\n\t            }\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    runClearTimeout(timeout);\n\t}\n\t\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        runTimeout(drainQueue);\n\t    }\n\t};\n\t\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\t\n\tfunction noop() {}\n\t\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\t\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\t\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function(factory) {\n\t  if(true) {\n\t    factory(exports);\n\t  } else {\n\t    factory(this);\n\t  }\n\t}).call(this, function(root) { \n\t\n\t  var slice   = Array.prototype.slice,\n\t      each    = Array.prototype.forEach;\n\t\n\t  var extend = function(obj) {\n\t    if(typeof obj !== 'object') throw obj + ' is not an object' ;\n\t\n\t    var sources = slice.call(arguments, 1); \n\t\n\t    each.call(sources, function(source) {\n\t      if(source) {\n\t        for(var prop in source) {\n\t          if(typeof source[prop] === 'object' && obj[prop]) {\n\t            extend.call(obj, obj[prop], source[prop]);\n\t          } else {\n\t            obj[prop] = source[prop];\n\t          }\n\t        } \n\t      }\n\t    });\n\t\n\t    return obj;\n\t  }\n\t\n\t  root.extend = extend;\n\t});\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t/**\n\t * This is the web browser implementation of `debug()`.\n\t *\n\t * Expose `debug()` as the module.\n\t */\n\t\n\texports = module.exports = __webpack_require__(5);\n\texports.log = log;\n\texports.formatArgs = formatArgs;\n\texports.save = save;\n\texports.load = load;\n\texports.useColors = useColors;\n\texports.storage = 'undefined' != typeof chrome\n\t               && 'undefined' != typeof chrome.storage\n\t                  ? chrome.storage.local\n\t                  : localstorage();\n\t\n\t/**\n\t * Colors.\n\t */\n\t\n\texports.colors = [\n\t  'lightseagreen',\n\t  'forestgreen',\n\t  'goldenrod',\n\t  'dodgerblue',\n\t  'darkorchid',\n\t  'crimson'\n\t];\n\t\n\t/**\n\t * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n\t * and the Firebug extension (any Firefox version) are known\n\t * to support \"%c\" CSS customizations.\n\t *\n\t * TODO: add a `localStorage` variable to explicitly enable/disable colors\n\t */\n\t\n\tfunction useColors() {\n\t  // is webkit? http://stackoverflow.com/a/16459606/376773\n\t  return ('WebkitAppearance' in document.documentElement.style) ||\n\t    // is firebug? http://stackoverflow.com/a/398120/376773\n\t    (window.console && (console.firebug || (console.exception && console.table))) ||\n\t    // is firefox >= v31?\n\t    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t    (navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31);\n\t}\n\t\n\t/**\n\t * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n\t */\n\t\n\texports.formatters.j = function(v) {\n\t  return JSON.stringify(v);\n\t};\n\t\n\t\n\t/**\n\t * Colorize log arguments if enabled.\n\t *\n\t * @api public\n\t */\n\t\n\tfunction formatArgs() {\n\t  var args = arguments;\n\t  var useColors = this.useColors;\n\t\n\t  args[0] = (useColors ? '%c' : '')\n\t    + this.namespace\n\t    + (useColors ? ' %c' : ' ')\n\t    + args[0]\n\t    + (useColors ? '%c ' : ' ')\n\t    + '+' + exports.humanize(this.diff);\n\t\n\t  if (!useColors) return args;\n\t\n\t  var c = 'color: ' + this.color;\n\t  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));\n\t\n\t  // the final \"%c\" is somewhat tricky, because there could be other\n\t  // arguments passed either before or after the %c, so we need to\n\t  // figure out the correct index to insert the CSS into\n\t  var index = 0;\n\t  var lastC = 0;\n\t  args[0].replace(/%[a-z%]/g, function(match) {\n\t    if ('%%' === match) return;\n\t    index++;\n\t    if ('%c' === match) {\n\t      // we only are interested in the *last* %c\n\t      // (the user may have provided their own)\n\t      lastC = index;\n\t    }\n\t  });\n\t\n\t  args.splice(lastC, 0, c);\n\t  return args;\n\t}\n\t\n\t/**\n\t * Invokes `console.log()` when available.\n\t * No-op when `console.log` is not a \"function\".\n\t *\n\t * @api public\n\t */\n\t\n\tfunction log() {\n\t  // this hackery is required for IE8/9, where\n\t  // the `console.log` function doesn't have 'apply'\n\t  return 'object' === typeof console\n\t    && console.log\n\t    && Function.prototype.apply.call(console.log, console, arguments);\n\t}\n\t\n\t/**\n\t * Save `namespaces`.\n\t *\n\t * @param {String} namespaces\n\t * @api private\n\t */\n\t\n\tfunction save(namespaces) {\n\t  try {\n\t    if (null == namespaces) {\n\t      exports.storage.removeItem('debug');\n\t    } else {\n\t      exports.storage.debug = namespaces;\n\t    }\n\t  } catch(e) {}\n\t}\n\t\n\t/**\n\t * Load `namespaces`.\n\t *\n\t * @return {String} returns the previously persisted debug modes\n\t * @api private\n\t */\n\t\n\tfunction load() {\n\t  var r;\n\t  try {\n\t    r = exports.storage.debug;\n\t  } catch(e) {}\n\t  return r;\n\t}\n\t\n\t/**\n\t * Enable namespaces listed in `localStorage.debug` initially.\n\t */\n\t\n\texports.enable(load());\n\t\n\t/**\n\t * Localstorage attempts to return the localstorage.\n\t *\n\t * This is necessary because safari throws\n\t * when a user disables cookies/localstorage\n\t * and you attempt to access it.\n\t *\n\t * @return {LocalStorage}\n\t * @api private\n\t */\n\t\n\tfunction localstorage(){\n\t  try {\n\t    return window.localStorage;\n\t  } catch (e) {}\n\t}\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\t/**\n\t * This is the common logic for both the Node.js and web browser\n\t * implementations of `debug()`.\n\t *\n\t * Expose `debug()` as the module.\n\t */\n\t\n\texports = module.exports = debug;\n\texports.coerce = coerce;\n\texports.disable = disable;\n\texports.enable = enable;\n\texports.enabled = enabled;\n\texports.humanize = __webpack_require__(6);\n\t\n\t/**\n\t * The currently active debug mode names, and names to skip.\n\t */\n\t\n\texports.names = [];\n\texports.skips = [];\n\t\n\t/**\n\t * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t *\n\t * Valid key names are a single, lowercased letter, i.e. \"n\".\n\t */\n\t\n\texports.formatters = {};\n\t\n\t/**\n\t * Previously assigned color.\n\t */\n\t\n\tvar prevColor = 0;\n\t\n\t/**\n\t * Previous log timestamp.\n\t */\n\t\n\tvar prevTime;\n\t\n\t/**\n\t * Select a color.\n\t *\n\t * @return {Number}\n\t * @api private\n\t */\n\t\n\tfunction selectColor() {\n\t  return exports.colors[prevColor++ % exports.colors.length];\n\t}\n\t\n\t/**\n\t * Create a debugger with the given `namespace`.\n\t *\n\t * @param {String} namespace\n\t * @return {Function}\n\t * @api public\n\t */\n\t\n\tfunction debug(namespace) {\n\t\n\t  // define the `disabled` version\n\t  function disabled() {\n\t  }\n\t  disabled.enabled = false;\n\t\n\t  // define the `enabled` version\n\t  function enabled() {\n\t\n\t    var self = enabled;\n\t\n\t    // set `diff` timestamp\n\t    var curr = +new Date();\n\t    var ms = curr - (prevTime || curr);\n\t    self.diff = ms;\n\t    self.prev = prevTime;\n\t    self.curr = curr;\n\t    prevTime = curr;\n\t\n\t    // add the `color` if not set\n\t    if (null == self.useColors) self.useColors = exports.useColors();\n\t    if (null == self.color && self.useColors) self.color = selectColor();\n\t\n\t    var args = Array.prototype.slice.call(arguments);\n\t\n\t    args[0] = exports.coerce(args[0]);\n\t\n\t    if ('string' !== typeof args[0]) {\n\t      // anything else let's inspect with %o\n\t      args = ['%o'].concat(args);\n\t    }\n\t\n\t    // apply any `formatters` transformations\n\t    var index = 0;\n\t    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {\n\t      // if we encounter an escaped % then don't increase the array index\n\t      if (match === '%%') return match;\n\t      index++;\n\t      var formatter = exports.formatters[format];\n\t      if ('function' === typeof formatter) {\n\t        var val = args[index];\n\t        match = formatter.call(self, val);\n\t\n\t        // now we need to remove `args[index]` since it's inlined in the `format`\n\t        args.splice(index, 1);\n\t        index--;\n\t      }\n\t      return match;\n\t    });\n\t\n\t    if ('function' === typeof exports.formatArgs) {\n\t      args = exports.formatArgs.apply(self, args);\n\t    }\n\t    var logFn = enabled.log || exports.log || console.log.bind(console);\n\t    logFn.apply(self, args);\n\t  }\n\t  enabled.enabled = true;\n\t\n\t  var fn = exports.enabled(namespace) ? enabled : disabled;\n\t\n\t  fn.namespace = namespace;\n\t\n\t  return fn;\n\t}\n\t\n\t/**\n\t * Enables a debug mode by namespaces. This can include modes\n\t * separated by a colon and wildcards.\n\t *\n\t * @param {String} namespaces\n\t * @api public\n\t */\n\t\n\tfunction enable(namespaces) {\n\t  exports.save(namespaces);\n\t\n\t  var split = (namespaces || '').split(/[\\s,]+/);\n\t  var len = split.length;\n\t\n\t  for (var i = 0; i < len; i++) {\n\t    if (!split[i]) continue; // ignore empty strings\n\t    namespaces = split[i].replace(/\\*/g, '.*?');\n\t    if (namespaces[0] === '-') {\n\t      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n\t    } else {\n\t      exports.names.push(new RegExp('^' + namespaces + '$'));\n\t    }\n\t  }\n\t}\n\t\n\t/**\n\t * Disable debug output.\n\t *\n\t * @api public\n\t */\n\t\n\tfunction disable() {\n\t  exports.enable('');\n\t}\n\t\n\t/**\n\t * Returns true if the given mode name is enabled, false otherwise.\n\t *\n\t * @param {String} name\n\t * @return {Boolean}\n\t * @api public\n\t */\n\t\n\tfunction enabled(name) {\n\t  var i, len;\n\t  for (i = 0, len = exports.skips.length; i < len; i++) {\n\t    if (exports.skips[i].test(name)) {\n\t      return false;\n\t    }\n\t  }\n\t  for (i = 0, len = exports.names.length; i < len; i++) {\n\t    if (exports.names[i].test(name)) {\n\t      return true;\n\t    }\n\t  }\n\t  return false;\n\t}\n\t\n\t/**\n\t * Coerce `val`.\n\t *\n\t * @param {Mixed} val\n\t * @return {Mixed}\n\t * @api private\n\t */\n\t\n\tfunction coerce(val) {\n\t  if (val instanceof Error) return val.stack || val.message;\n\t  return val;\n\t}\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Helpers.\n\t */\n\t\n\tvar s = 1000;\n\tvar m = s * 60;\n\tvar h = m * 60;\n\tvar d = h * 24;\n\tvar y = d * 365.25;\n\t\n\t/**\n\t * Parse or format the given `val`.\n\t *\n\t * Options:\n\t *\n\t *  - `long` verbose formatting [false]\n\t *\n\t * @param {String|Number} val\n\t * @param {Object} options\n\t * @return {String|Number}\n\t * @api public\n\t */\n\t\n\tmodule.exports = function(val, options){\n\t  options = options || {};\n\t  if ('string' == typeof val) return parse(val);\n\t  return options.long\n\t    ? long(val)\n\t    : short(val);\n\t};\n\t\n\t/**\n\t * Parse the given `str` and return milliseconds.\n\t *\n\t * @param {String} str\n\t * @return {Number}\n\t * @api private\n\t */\n\t\n\tfunction parse(str) {\n\t  str = '' + str;\n\t  if (str.length > 10000) return;\n\t  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);\n\t  if (!match) return;\n\t  var n = parseFloat(match[1]);\n\t  var type = (match[2] || 'ms').toLowerCase();\n\t  switch (type) {\n\t    case 'years':\n\t    case 'year':\n\t    case 'yrs':\n\t    case 'yr':\n\t    case 'y':\n\t      return n * y;\n\t    case 'days':\n\t    case 'day':\n\t    case 'd':\n\t      return n * d;\n\t    case 'hours':\n\t    case 'hour':\n\t    case 'hrs':\n\t    case 'hr':\n\t    case 'h':\n\t      return n * h;\n\t    case 'minutes':\n\t    case 'minute':\n\t    case 'mins':\n\t    case 'min':\n\t    case 'm':\n\t      return n * m;\n\t    case 'seconds':\n\t    case 'second':\n\t    case 'secs':\n\t    case 'sec':\n\t    case 's':\n\t      return n * s;\n\t    case 'milliseconds':\n\t    case 'millisecond':\n\t    case 'msecs':\n\t    case 'msec':\n\t    case 'ms':\n\t      return n;\n\t  }\n\t}\n\t\n\t/**\n\t * Short format for `ms`.\n\t *\n\t * @param {Number} ms\n\t * @return {String}\n\t * @api private\n\t */\n\t\n\tfunction short(ms) {\n\t  if (ms >= d) return Math.round(ms / d) + 'd';\n\t  if (ms >= h) return Math.round(ms / h) + 'h';\n\t  if (ms >= m) return Math.round(ms / m) + 'm';\n\t  if (ms >= s) return Math.round(ms / s) + 's';\n\t  return ms + 'ms';\n\t}\n\t\n\t/**\n\t * Long format for `ms`.\n\t *\n\t * @param {Number} ms\n\t * @return {String}\n\t * @api private\n\t */\n\t\n\tfunction long(ms) {\n\t  return plural(ms, d, 'day')\n\t    || plural(ms, h, 'hour')\n\t    || plural(ms, m, 'minute')\n\t    || plural(ms, s, 'second')\n\t    || ms + ' ms';\n\t}\n\t\n\t/**\n\t * Pluralization helper.\n\t */\n\t\n\tfunction plural(ms, n, name) {\n\t  if (ms < n) return;\n\t  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;\n\t  return Math.ceil(ms / n) + ' ' + name + 's';\n\t}\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\tif (typeof Object.create === 'function') {\n\t  // implementation from standard node.js 'util' module\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor\n\t    ctor.prototype = Object.create(superCtor.prototype, {\n\t      constructor: {\n\t        value: ctor,\n\t        enumerable: false,\n\t        writable: true,\n\t        configurable: true\n\t      }\n\t    });\n\t  };\n\t} else {\n\t  // old school shim for old browsers\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor\n\t    var TempCtor = function () {}\n\t    TempCtor.prototype = superCtor.prototype\n\t    ctor.prototype = new TempCtor()\n\t    ctor.prototype.constructor = ctor\n\t  }\n\t}\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar immediate = __webpack_require__(9);\n\t\n\t/* istanbul ignore next */\n\tfunction INTERNAL() {}\n\t\n\tvar handlers = {};\n\t\n\tvar REJECTED = ['REJECTED'];\n\tvar FULFILLED = ['FULFILLED'];\n\tvar PENDING = ['PENDING'];\n\t\n\tmodule.exports = Promise;\n\t\n\tfunction Promise(resolver) {\n\t  if (typeof resolver !== 'function') {\n\t    throw new TypeError('resolver must be a function');\n\t  }\n\t  this.state = PENDING;\n\t  this.queue = [];\n\t  this.outcome = void 0;\n\t  if (resolver !== INTERNAL) {\n\t    safelyResolveThenable(this, resolver);\n\t  }\n\t}\n\t\n\tPromise.prototype[\"catch\"] = function (onRejected) {\n\t  return this.then(null, onRejected);\n\t};\n\tPromise.prototype.then = function (onFulfilled, onRejected) {\n\t  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||\n\t    typeof onRejected !== 'function' && this.state === REJECTED) {\n\t    return this;\n\t  }\n\t  var promise = new this.constructor(INTERNAL);\n\t  if (this.state !== PENDING) {\n\t    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\n\t    unwrap(promise, resolver, this.outcome);\n\t  } else {\n\t    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\n\t  }\n\t\n\t  return promise;\n\t};\n\tfunction QueueItem(promise, onFulfilled, onRejected) {\n\t  this.promise = promise;\n\t  if (typeof onFulfilled === 'function') {\n\t    this.onFulfilled = onFulfilled;\n\t    this.callFulfilled = this.otherCallFulfilled;\n\t  }\n\t  if (typeof onRejected === 'function') {\n\t    this.onRejected = onRejected;\n\t    this.callRejected = this.otherCallRejected;\n\t  }\n\t}\n\tQueueItem.prototype.callFulfilled = function (value) {\n\t  handlers.resolve(this.promise, value);\n\t};\n\tQueueItem.prototype.otherCallFulfilled = function (value) {\n\t  unwrap(this.promise, this.onFulfilled, value);\n\t};\n\tQueueItem.prototype.callRejected = function (value) {\n\t  handlers.reject(this.promise, value);\n\t};\n\tQueueItem.prototype.otherCallRejected = function (value) {\n\t  unwrap(this.promise, this.onRejected, value);\n\t};\n\t\n\tfunction unwrap(promise, func, value) {\n\t  immediate(function () {\n\t    var returnValue;\n\t    try {\n\t      returnValue = func(value);\n\t    } catch (e) {\n\t      return handlers.reject(promise, e);\n\t    }\n\t    if (returnValue === promise) {\n\t      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));\n\t    } else {\n\t      handlers.resolve(promise, returnValue);\n\t    }\n\t  });\n\t}\n\t\n\thandlers.resolve = function (self, value) {\n\t  var result = tryCatch(getThen, value);\n\t  if (result.status === 'error') {\n\t    return handlers.reject(self, result.value);\n\t  }\n\t  var thenable = result.value;\n\t\n\t  if (thenable) {\n\t    safelyResolveThenable(self, thenable);\n\t  } else {\n\t    self.state = FULFILLED;\n\t    self.outcome = value;\n\t    var i = -1;\n\t    var len = self.queue.length;\n\t    while (++i < len) {\n\t      self.queue[i].callFulfilled(value);\n\t    }\n\t  }\n\t  return self;\n\t};\n\thandlers.reject = function (self, error) {\n\t  self.state = REJECTED;\n\t  self.outcome = error;\n\t  var i = -1;\n\t  var len = self.queue.length;\n\t  while (++i < len) {\n\t    self.queue[i].callRejected(error);\n\t  }\n\t  return self;\n\t};\n\t\n\tfunction getThen(obj) {\n\t  // Make sure we only access the accessor once as required by the spec\n\t  var then = obj && obj.then;\n\t  if (obj && typeof obj === 'object' && typeof then === 'function') {\n\t    return function appyThen() {\n\t      then.apply(obj, arguments);\n\t    };\n\t  }\n\t}\n\t\n\tfunction safelyResolveThenable(self, thenable) {\n\t  // Either fulfill, reject or reject with error\n\t  var called = false;\n\t  function onError(value) {\n\t    if (called) {\n\t      return;\n\t    }\n\t    called = true;\n\t    handlers.reject(self, value);\n\t  }\n\t\n\t  function onSuccess(value) {\n\t    if (called) {\n\t      return;\n\t    }\n\t    called = true;\n\t    handlers.resolve(self, value);\n\t  }\n\t\n\t  function tryToUnwrap() {\n\t    thenable(onSuccess, onError);\n\t  }\n\t\n\t  var result = tryCatch(tryToUnwrap);\n\t  if (result.status === 'error') {\n\t    onError(result.value);\n\t  }\n\t}\n\t\n\tfunction tryCatch(func, value) {\n\t  var out = {};\n\t  try {\n\t    out.value = func(value);\n\t    out.status = 'success';\n\t  } catch (e) {\n\t    out.status = 'error';\n\t    out.value = e;\n\t  }\n\t  return out;\n\t}\n\t\n\tPromise.resolve = resolve;\n\tfunction resolve(value) {\n\t  if (value instanceof this) {\n\t    return value;\n\t  }\n\t  return handlers.resolve(new this(INTERNAL), value);\n\t}\n\t\n\tPromise.reject = reject;\n\tfunction reject(reason) {\n\t  var promise = new this(INTERNAL);\n\t  return handlers.reject(promise, reason);\n\t}\n\t\n\tPromise.all = all;\n\tfunction all(iterable) {\n\t  var self = this;\n\t  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n\t    return this.reject(new TypeError('must be an array'));\n\t  }\n\t\n\t  var len = iterable.length;\n\t  var called = false;\n\t  if (!len) {\n\t    return this.resolve([]);\n\t  }\n\t\n\t  var values = new Array(len);\n\t  var resolved = 0;\n\t  var i = -1;\n\t  var promise = new this(INTERNAL);\n\t\n\t  while (++i < len) {\n\t    allResolver(iterable[i], i);\n\t  }\n\t  return promise;\n\t  function allResolver(value, i) {\n\t    self.resolve(value).then(resolveFromAll, function (error) {\n\t      if (!called) {\n\t        called = true;\n\t        handlers.reject(promise, error);\n\t      }\n\t    });\n\t    function resolveFromAll(outValue) {\n\t      values[i] = outValue;\n\t      if (++resolved === len && !called) {\n\t        called = true;\n\t        handlers.resolve(promise, values);\n\t      }\n\t    }\n\t  }\n\t}\n\t\n\tPromise.race = race;\n\tfunction race(iterable) {\n\t  var self = this;\n\t  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n\t    return this.reject(new TypeError('must be an array'));\n\t  }\n\t\n\t  var len = iterable.length;\n\t  var called = false;\n\t  if (!len) {\n\t    return this.resolve([]);\n\t  }\n\t\n\t  var i = -1;\n\t  var promise = new this(INTERNAL);\n\t\n\t  while (++i < len) {\n\t    resolver(iterable[i]);\n\t  }\n\t  return promise;\n\t  function resolver(value) {\n\t    self.resolve(value).then(function (response) {\n\t      if (!called) {\n\t        called = true;\n\t        handlers.resolve(promise, response);\n\t      }\n\t    }, function (error) {\n\t      if (!called) {\n\t        called = true;\n\t        handlers.reject(promise, error);\n\t      }\n\t    });\n\t  }\n\t}\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\tvar Mutation = global.MutationObserver || global.WebKitMutationObserver;\n\t\n\tvar scheduleDrain;\n\t\n\t{\n\t  if (Mutation) {\n\t    var called = 0;\n\t    var observer = new Mutation(nextTick);\n\t    var element = global.document.createTextNode('');\n\t    observer.observe(element, {\n\t      characterData: true\n\t    });\n\t    scheduleDrain = function () {\n\t      element.data = (called = ++called % 2);\n\t    };\n\t  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\n\t    var channel = new global.MessageChannel();\n\t    channel.port1.onmessage = nextTick;\n\t    scheduleDrain = function () {\n\t      channel.port2.postMessage(0);\n\t    };\n\t  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\n\t    scheduleDrain = function () {\n\t\n\t      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n\t      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n\t      var scriptEl = global.document.createElement('script');\n\t      scriptEl.onreadystatechange = function () {\n\t        nextTick();\n\t\n\t        scriptEl.onreadystatechange = null;\n\t        scriptEl.parentNode.removeChild(scriptEl);\n\t        scriptEl = null;\n\t      };\n\t      global.document.documentElement.appendChild(scriptEl);\n\t    };\n\t  } else {\n\t    scheduleDrain = function () {\n\t      setTimeout(nextTick, 0);\n\t    };\n\t  }\n\t}\n\t\n\tvar draining;\n\tvar queue = [];\n\t//named nextTick for less confusing stack traces\n\tfunction nextTick() {\n\t  draining = true;\n\t  var i, oldQueue;\n\t  var len = queue.length;\n\t  while (len) {\n\t    oldQueue = queue;\n\t    queue = [];\n\t    i = -1;\n\t    while (++i < len) {\n\t      oldQueue[i]();\n\t    }\n\t    len = queue.length;\n\t  }\n\t  draining = false;\n\t}\n\t\n\tmodule.exports = immediate;\n\tfunction immediate(task) {\n\t  if (queue.push(task) === 1 && !draining) {\n\t    scheduleDrain();\n\t  }\n\t}\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t\n\tfunction EventEmitter() {\n\t  this._events = this._events || {};\n\t  this._maxListeners = this._maxListeners || undefined;\n\t}\n\tmodule.exports = EventEmitter;\n\t\n\t// Backwards-compat with node 0.10.x\n\tEventEmitter.EventEmitter = EventEmitter;\n\t\n\tEventEmitter.prototype._events = undefined;\n\tEventEmitter.prototype._maxListeners = undefined;\n\t\n\t// By default EventEmitters will print a warning if more than 10 listeners are\n\t// added to it. This is a useful default which helps finding memory leaks.\n\tEventEmitter.defaultMaxListeners = 10;\n\t\n\t// Obviously not all Emitters should be limited to 10. This function allows\n\t// that to be increased. Set to zero for unlimited.\n\tEventEmitter.prototype.setMaxListeners = function(n) {\n\t  if (!isNumber(n) || n < 0 || isNaN(n))\n\t    throw TypeError('n must be a positive number');\n\t  this._maxListeners = n;\n\t  return this;\n\t};\n\t\n\tEventEmitter.prototype.emit = function(type) {\n\t  var er, handler, len, args, i, listeners;\n\t\n\t  if (!this._events)\n\t    this._events = {};\n\t\n\t  // If there is no 'error' event listener then throw.\n\t  if (type === 'error') {\n\t    if (!this._events.error ||\n\t        (isObject(this._events.error) && !this._events.error.length)) {\n\t      er = arguments[1];\n\t      if (er instanceof Error) {\n\t        throw er; // Unhandled 'error' event\n\t      } else {\n\t        // At least give some kind of context to the user\n\t        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n\t        err.context = er;\n\t        throw err;\n\t      }\n\t    }\n\t  }\n\t\n\t  handler = this._events[type];\n\t\n\t  if (isUndefined(handler))\n\t    return false;\n\t\n\t  if (isFunction(handler)) {\n\t    switch (arguments.length) {\n\t      // fast cases\n\t      case 1:\n\t        handler.call(this);\n\t        break;\n\t      case 2:\n\t        handler.call(this, arguments[1]);\n\t        break;\n\t      case 3:\n\t        handler.call(this, arguments[1], arguments[2]);\n\t        break;\n\t      // slower\n\t      default:\n\t        args = Array.prototype.slice.call(arguments, 1);\n\t        handler.apply(this, args);\n\t    }\n\t  } else if (isObject(handler)) {\n\t    args = Array.prototype.slice.call(arguments, 1);\n\t    listeners = handler.slice();\n\t    len = listeners.length;\n\t    for (i = 0; i < len; i++)\n\t      listeners[i].apply(this, args);\n\t  }\n\t\n\t  return true;\n\t};\n\t\n\tEventEmitter.prototype.addListener = function(type, listener) {\n\t  var m;\n\t\n\t  if (!isFunction(listener))\n\t    throw TypeError('listener must be a function');\n\t\n\t  if (!this._events)\n\t    this._events = {};\n\t\n\t  // To avoid recursion in the case that type === \"newListener\"! Before\n\t  // adding it to the listeners, first emit \"newListener\".\n\t  if (this._events.newListener)\n\t    this.emit('newListener', type,\n\t              isFunction(listener.listener) ?\n\t              listener.listener : listener);\n\t\n\t  if (!this._events[type])\n\t    // Optimize the case of one listener. Don't need the extra array object.\n\t    this._events[type] = listener;\n\t  else if (isObject(this._events[type]))\n\t    // If we've already got an array, just append.\n\t    this._events[type].push(listener);\n\t  else\n\t    // Adding the second element, need to change to array.\n\t    this._events[type] = [this._events[type], listener];\n\t\n\t  // Check for listener leak\n\t  if (isObject(this._events[type]) && !this._events[type].warned) {\n\t    if (!isUndefined(this._maxListeners)) {\n\t      m = this._maxListeners;\n\t    } else {\n\t      m = EventEmitter.defaultMaxListeners;\n\t    }\n\t\n\t    if (m && m > 0 && this._events[type].length > m) {\n\t      this._events[type].warned = true;\n\t      console.error('(node) warning: possible EventEmitter memory ' +\n\t                    'leak detected. %d listeners added. ' +\n\t                    'Use emitter.setMaxListeners() to increase limit.',\n\t                    this._events[type].length);\n\t      if (typeof console.trace === 'function') {\n\t        // not supported in IE 10\n\t        console.trace();\n\t      }\n\t    }\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\tEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\t\n\tEventEmitter.prototype.once = function(type, listener) {\n\t  if (!isFunction(listener))\n\t    throw TypeError('listener must be a function');\n\t\n\t  var fired = false;\n\t\n\t  function g() {\n\t    this.removeListener(type, g);\n\t\n\t    if (!fired) {\n\t      fired = true;\n\t      listener.apply(this, arguments);\n\t    }\n\t  }\n\t\n\t  g.listener = listener;\n\t  this.on(type, g);\n\t\n\t  return this;\n\t};\n\t\n\t// emits a 'removeListener' event iff the listener was removed\n\tEventEmitter.prototype.removeListener = function(type, listener) {\n\t  var list, position, length, i;\n\t\n\t  if (!isFunction(listener))\n\t    throw TypeError('listener must be a function');\n\t\n\t  if (!this._events || !this._events[type])\n\t    return this;\n\t\n\t  list = this._events[type];\n\t  length = list.length;\n\t  position = -1;\n\t\n\t  if (list === listener ||\n\t      (isFunction(list.listener) && list.listener === listener)) {\n\t    delete this._events[type];\n\t    if (this._events.removeListener)\n\t      this.emit('removeListener', type, listener);\n\t\n\t  } else if (isObject(list)) {\n\t    for (i = length; i-- > 0;) {\n\t      if (list[i] === listener ||\n\t          (list[i].listener && list[i].listener === listener)) {\n\t        position = i;\n\t        break;\n\t      }\n\t    }\n\t\n\t    if (position < 0)\n\t      return this;\n\t\n\t    if (list.length === 1) {\n\t      list.length = 0;\n\t      delete this._events[type];\n\t    } else {\n\t      list.splice(position, 1);\n\t    }\n\t\n\t    if (this._events.removeListener)\n\t      this.emit('removeListener', type, listener);\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\tEventEmitter.prototype.removeAllListeners = function(type) {\n\t  var key, listeners;\n\t\n\t  if (!this._events)\n\t    return this;\n\t\n\t  // not listening for removeListener, no need to emit\n\t  if (!this._events.removeListener) {\n\t    if (arguments.length === 0)\n\t      this._events = {};\n\t    else if (this._events[type])\n\t      delete this._events[type];\n\t    return this;\n\t  }\n\t\n\t  // emit removeListener for all listeners on all events\n\t  if (arguments.length === 0) {\n\t    for (key in this._events) {\n\t      if (key === 'removeListener') continue;\n\t      this.removeAllListeners(key);\n\t    }\n\t    this.removeAllListeners('removeListener');\n\t    this._events = {};\n\t    return this;\n\t  }\n\t\n\t  listeners = this._events[type];\n\t\n\t  if (isFunction(listeners)) {\n\t    this.removeListener(type, listeners);\n\t  } else if (listeners) {\n\t    // LIFO order\n\t    while (listeners.length)\n\t      this.removeListener(type, listeners[listeners.length - 1]);\n\t  }\n\t  delete this._events[type];\n\t\n\t  return this;\n\t};\n\t\n\tEventEmitter.prototype.listeners = function(type) {\n\t  var ret;\n\t  if (!this._events || !this._events[type])\n\t    ret = [];\n\t  else if (isFunction(this._events[type]))\n\t    ret = [this._events[type]];\n\t  else\n\t    ret = this._events[type].slice();\n\t  return ret;\n\t};\n\t\n\tEventEmitter.prototype.listenerCount = function(type) {\n\t  if (this._events) {\n\t    var evlistener = this._events[type];\n\t\n\t    if (isFunction(evlistener))\n\t      return 1;\n\t    else if (evlistener)\n\t      return evlistener.length;\n\t  }\n\t  return 0;\n\t};\n\t\n\tEventEmitter.listenerCount = function(emitter, type) {\n\t  return emitter.listenerCount(type);\n\t};\n\t\n\tfunction isFunction(arg) {\n\t  return typeof arg === 'function';\n\t}\n\t\n\tfunction isNumber(arg) {\n\t  return typeof arg === 'number';\n\t}\n\t\n\tfunction isObject(arg) {\n\t  return typeof arg === 'object' && arg !== null;\n\t}\n\t\n\tfunction isUndefined(arg) {\n\t  return arg === void 0;\n\t}\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = argsArray;\n\t\n\tfunction argsArray(fun) {\n\t  return function () {\n\t    var len = arguments.length;\n\t    if (len) {\n\t      var args = [];\n\t      var i = -1;\n\t      while (++i < len) {\n\t        args[i] = arguments[i];\n\t      }\n\t      return fun.call(this, args);\n\t    } else {\n\t      return fun.call(this, []);\n\t    }\n\t  };\n\t}\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t// Generated by CoffeeScript 1.9.2\n\t(function() {\n\t  var hasProp = {}.hasOwnProperty,\n\t    slice = [].slice;\n\t\n\t  module.exports = function(source, scope) {\n\t    var key, keys, value, values;\n\t    keys = [];\n\t    values = [];\n\t    for (key in scope) {\n\t      if (!hasProp.call(scope, key)) continue;\n\t      value = scope[key];\n\t      if (key === 'this') {\n\t        continue;\n\t      }\n\t      keys.push(key);\n\t      values.push(value);\n\t    }\n\t    return Function.apply(null, slice.call(keys).concat([source])).apply(scope[\"this\"], values);\n\t  };\n\t\n\t}).call(this);\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t(function (factory) {\n\t    if (true) {\n\t        // Node/CommonJS\n\t        module.exports = factory();\n\t    } else if (typeof define === 'function' && define.amd) {\n\t        // AMD\n\t        define(factory);\n\t    } else {\n\t        // Browser globals (with support for web workers)\n\t        var glob;\n\t\n\t        try {\n\t            glob = window;\n\t        } catch (e) {\n\t            glob = self;\n\t        }\n\t\n\t        glob.SparkMD5 = factory();\n\t    }\n\t}(function (undefined) {\n\t\n\t    'use strict';\n\t\n\t    /*\n\t     * Fastest md5 implementation around (JKM md5).\n\t     * Credits: Joseph Myers\n\t     *\n\t     * @see http://www.myersdaily.org/joseph/javascript/md5-text.html\n\t     * @see http://jsperf.com/md5-shootout/7\n\t     */\n\t\n\t    /* this function is much faster,\n\t      so if possible we use it. Some IEs\n\t      are the only ones I know of that\n\t      need the idiotic second function,\n\t      generated by an if clause.  */\n\t    var add32 = function (a, b) {\n\t        return (a + b) & 0xFFFFFFFF;\n\t    },\n\t        hex_chr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];\n\t\n\t\n\t    function cmn(q, a, b, x, s, t) {\n\t        a = add32(add32(a, q), add32(x, t));\n\t        return add32((a << s) | (a >>> (32 - s)), b);\n\t    }\n\t\n\t    function ff(a, b, c, d, x, s, t) {\n\t        return cmn((b & c) | ((~b) & d), a, b, x, s, t);\n\t    }\n\t\n\t    function gg(a, b, c, d, x, s, t) {\n\t        return cmn((b & d) | (c & (~d)), a, b, x, s, t);\n\t    }\n\t\n\t    function hh(a, b, c, d, x, s, t) {\n\t        return cmn(b ^ c ^ d, a, b, x, s, t);\n\t    }\n\t\n\t    function ii(a, b, c, d, x, s, t) {\n\t        return cmn(c ^ (b | (~d)), a, b, x, s, t);\n\t    }\n\t\n\t    function md5cycle(x, k) {\n\t        var a = x[0],\n\t            b = x[1],\n\t            c = x[2],\n\t            d = x[3];\n\t\n\t        a = ff(a, b, c, d, k[0], 7, -680876936);\n\t        d = ff(d, a, b, c, k[1], 12, -389564586);\n\t        c = ff(c, d, a, b, k[2], 17, 606105819);\n\t        b = ff(b, c, d, a, k[3], 22, -1044525330);\n\t        a = ff(a, b, c, d, k[4], 7, -176418897);\n\t        d = ff(d, a, b, c, k[5], 12, 1200080426);\n\t        c = ff(c, d, a, b, k[6], 17, -1473231341);\n\t        b = ff(b, c, d, a, k[7], 22, -45705983);\n\t        a = ff(a, b, c, d, k[8], 7, 1770035416);\n\t        d = ff(d, a, b, c, k[9], 12, -1958414417);\n\t        c = ff(c, d, a, b, k[10], 17, -42063);\n\t        b = ff(b, c, d, a, k[11], 22, -1990404162);\n\t        a = ff(a, b, c, d, k[12], 7, 1804603682);\n\t        d = ff(d, a, b, c, k[13], 12, -40341101);\n\t        c = ff(c, d, a, b, k[14], 17, -1502002290);\n\t        b = ff(b, c, d, a, k[15], 22, 1236535329);\n\t\n\t        a = gg(a, b, c, d, k[1], 5, -165796510);\n\t        d = gg(d, a, b, c, k[6], 9, -1069501632);\n\t        c = gg(c, d, a, b, k[11], 14, 643717713);\n\t        b = gg(b, c, d, a, k[0], 20, -373897302);\n\t        a = gg(a, b, c, d, k[5], 5, -701558691);\n\t        d = gg(d, a, b, c, k[10], 9, 38016083);\n\t        c = gg(c, d, a, b, k[15], 14, -660478335);\n\t        b = gg(b, c, d, a, k[4], 20, -405537848);\n\t        a = gg(a, b, c, d, k[9], 5, 568446438);\n\t        d = gg(d, a, b, c, k[14], 9, -1019803690);\n\t        c = gg(c, d, a, b, k[3], 14, -187363961);\n\t        b = gg(b, c, d, a, k[8], 20, 1163531501);\n\t        a = gg(a, b, c, d, k[13], 5, -1444681467);\n\t        d = gg(d, a, b, c, k[2], 9, -51403784);\n\t        c = gg(c, d, a, b, k[7], 14, 1735328473);\n\t        b = gg(b, c, d, a, k[12], 20, -1926607734);\n\t\n\t        a = hh(a, b, c, d, k[5], 4, -378558);\n\t        d = hh(d, a, b, c, k[8], 11, -2022574463);\n\t        c = hh(c, d, a, b, k[11], 16, 1839030562);\n\t        b = hh(b, c, d, a, k[14], 23, -35309556);\n\t        a = hh(a, b, c, d, k[1], 4, -1530992060);\n\t        d = hh(d, a, b, c, k[4], 11, 1272893353);\n\t        c = hh(c, d, a, b, k[7], 16, -155497632);\n\t        b = hh(b, c, d, a, k[10], 23, -1094730640);\n\t        a = hh(a, b, c, d, k[13], 4, 681279174);\n\t        d = hh(d, a, b, c, k[0], 11, -358537222);\n\t        c = hh(c, d, a, b, k[3], 16, -722521979);\n\t        b = hh(b, c, d, a, k[6], 23, 76029189);\n\t        a = hh(a, b, c, d, k[9], 4, -640364487);\n\t        d = hh(d, a, b, c, k[12], 11, -421815835);\n\t        c = hh(c, d, a, b, k[15], 16, 530742520);\n\t        b = hh(b, c, d, a, k[2], 23, -995338651);\n\t\n\t        a = ii(a, b, c, d, k[0], 6, -198630844);\n\t        d = ii(d, a, b, c, k[7], 10, 1126891415);\n\t        c = ii(c, d, a, b, k[14], 15, -1416354905);\n\t        b = ii(b, c, d, a, k[5], 21, -57434055);\n\t        a = ii(a, b, c, d, k[12], 6, 1700485571);\n\t        d = ii(d, a, b, c, k[3], 10, -1894986606);\n\t        c = ii(c, d, a, b, k[10], 15, -1051523);\n\t        b = ii(b, c, d, a, k[1], 21, -2054922799);\n\t        a = ii(a, b, c, d, k[8], 6, 1873313359);\n\t        d = ii(d, a, b, c, k[15], 10, -30611744);\n\t        c = ii(c, d, a, b, k[6], 15, -1560198380);\n\t        b = ii(b, c, d, a, k[13], 21, 1309151649);\n\t        a = ii(a, b, c, d, k[4], 6, -145523070);\n\t        d = ii(d, a, b, c, k[11], 10, -1120210379);\n\t        c = ii(c, d, a, b, k[2], 15, 718787259);\n\t        b = ii(b, c, d, a, k[9], 21, -343485551);\n\t\n\t        x[0] = add32(a, x[0]);\n\t        x[1] = add32(b, x[1]);\n\t        x[2] = add32(c, x[2]);\n\t        x[3] = add32(d, x[3]);\n\t    }\n\t\n\t    function md5blk(s) {\n\t        var md5blks = [],\n\t            i; /* Andy King said do it this way. */\n\t\n\t        for (i = 0; i < 64; i += 4) {\n\t            md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);\n\t        }\n\t        return md5blks;\n\t    }\n\t\n\t    function md5blk_array(a) {\n\t        var md5blks = [],\n\t            i; /* Andy King said do it this way. */\n\t\n\t        for (i = 0; i < 64; i += 4) {\n\t            md5blks[i >> 2] = a[i] + (a[i + 1] << 8) + (a[i + 2] << 16) + (a[i + 3] << 24);\n\t        }\n\t        return md5blks;\n\t    }\n\t\n\t    function md51(s) {\n\t        var n = s.length,\n\t            state = [1732584193, -271733879, -1732584194, 271733878],\n\t            i,\n\t            length,\n\t            tail,\n\t            tmp,\n\t            lo,\n\t            hi;\n\t\n\t        for (i = 64; i <= n; i += 64) {\n\t            md5cycle(state, md5blk(s.substring(i - 64, i)));\n\t        }\n\t        s = s.substring(i - 64);\n\t        length = s.length;\n\t        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\t        for (i = 0; i < length; i += 1) {\n\t            tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);\n\t        }\n\t        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\n\t        if (i > 55) {\n\t            md5cycle(state, tail);\n\t            for (i = 0; i < 16; i += 1) {\n\t                tail[i] = 0;\n\t            }\n\t        }\n\t\n\t        // Beware that the final length might not fit in 32 bits so we take care of that\n\t        tmp = n * 8;\n\t        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\n\t        lo = parseInt(tmp[2], 16);\n\t        hi = parseInt(tmp[1], 16) || 0;\n\t\n\t        tail[14] = lo;\n\t        tail[15] = hi;\n\t\n\t        md5cycle(state, tail);\n\t        return state;\n\t    }\n\t\n\t    function md51_array(a) {\n\t        var n = a.length,\n\t            state = [1732584193, -271733879, -1732584194, 271733878],\n\t            i,\n\t            length,\n\t            tail,\n\t            tmp,\n\t            lo,\n\t            hi;\n\t\n\t        for (i = 64; i <= n; i += 64) {\n\t            md5cycle(state, md5blk_array(a.subarray(i - 64, i)));\n\t        }\n\t\n\t        // Not sure if it is a bug, however IE10 will always produce a sub array of length 1\n\t        // containing the last element of the parent array if the sub array specified starts\n\t        // beyond the length of the parent array - weird.\n\t        // https://connect.microsoft.com/IE/feedback/details/771452/typed-array-subarray-issue\n\t        a = (i - 64) < n ? a.subarray(i - 64) : new Uint8Array(0);\n\t\n\t        length = a.length;\n\t        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\t        for (i = 0; i < length; i += 1) {\n\t            tail[i >> 2] |= a[i] << ((i % 4) << 3);\n\t        }\n\t\n\t        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\n\t        if (i > 55) {\n\t            md5cycle(state, tail);\n\t            for (i = 0; i < 16; i += 1) {\n\t                tail[i] = 0;\n\t            }\n\t        }\n\t\n\t        // Beware that the final length might not fit in 32 bits so we take care of that\n\t        tmp = n * 8;\n\t        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\n\t        lo = parseInt(tmp[2], 16);\n\t        hi = parseInt(tmp[1], 16) || 0;\n\t\n\t        tail[14] = lo;\n\t        tail[15] = hi;\n\t\n\t        md5cycle(state, tail);\n\t\n\t        return state;\n\t    }\n\t\n\t    function rhex(n) {\n\t        var s = '',\n\t            j;\n\t        for (j = 0; j < 4; j += 1) {\n\t            s += hex_chr[(n >> (j * 8 + 4)) & 0x0F] + hex_chr[(n >> (j * 8)) & 0x0F];\n\t        }\n\t        return s;\n\t    }\n\t\n\t    function hex(x) {\n\t        var i;\n\t        for (i = 0; i < x.length; i += 1) {\n\t            x[i] = rhex(x[i]);\n\t        }\n\t        return x.join('');\n\t    }\n\t\n\t    // In some cases the fast add32 function cannot be used..\n\t    if (hex(md51('hello')) !== '5d41402abc4b2a76b9719d911017c592') {\n\t        add32 = function (x, y) {\n\t            var lsw = (x & 0xFFFF) + (y & 0xFFFF),\n\t                msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n\t            return (msw << 16) | (lsw & 0xFFFF);\n\t        };\n\t    }\n\t\n\t    // ---------------------------------------------------\n\t\n\t    /**\n\t     * ArrayBuffer slice polyfill.\n\t     *\n\t     * @see https://github.com/ttaubert/node-arraybuffer-slice\n\t     */\n\t\n\t    if (typeof ArrayBuffer !== 'undefined' && !ArrayBuffer.prototype.slice) {\n\t        (function () {\n\t            function clamp(val, length) {\n\t                val = (val | 0) || 0;\n\t\n\t                if (val < 0) {\n\t                    return Math.max(val + length, 0);\n\t                }\n\t\n\t                return Math.min(val, length);\n\t            }\n\t\n\t            ArrayBuffer.prototype.slice = function (from, to) {\n\t                var length = this.byteLength,\n\t                    begin = clamp(from, length),\n\t                    end = length,\n\t                    num,\n\t                    target,\n\t                    targetArray,\n\t                    sourceArray;\n\t\n\t                if (to !== undefined) {\n\t                    end = clamp(to, length);\n\t                }\n\t\n\t                if (begin > end) {\n\t                    return new ArrayBuffer(0);\n\t                }\n\t\n\t                num = end - begin;\n\t                target = new ArrayBuffer(num);\n\t                targetArray = new Uint8Array(target);\n\t\n\t                sourceArray = new Uint8Array(this, begin, num);\n\t                targetArray.set(sourceArray);\n\t\n\t                return target;\n\t            };\n\t        })();\n\t    }\n\t\n\t    // ---------------------------------------------------\n\t\n\t    /**\n\t     * Helpers.\n\t     */\n\t\n\t    function toUtf8(str) {\n\t        if (/[\\u0080-\\uFFFF]/.test(str)) {\n\t            str = unescape(encodeURIComponent(str));\n\t        }\n\t\n\t        return str;\n\t    }\n\t\n\t    function utf8Str2ArrayBuffer(str, returnUInt8Array) {\n\t        var length = str.length,\n\t           buff = new ArrayBuffer(length),\n\t           arr = new Uint8Array(buff),\n\t           i;\n\t\n\t        for (i = 0; i < length; i += 1) {\n\t            arr[i] = str.charCodeAt(i);\n\t        }\n\t\n\t        return returnUInt8Array ? arr : buff;\n\t    }\n\t\n\t    function arrayBuffer2Utf8Str(buff) {\n\t        return String.fromCharCode.apply(null, new Uint8Array(buff));\n\t    }\n\t\n\t    function concatenateArrayBuffers(first, second, returnUInt8Array) {\n\t        var result = new Uint8Array(first.byteLength + second.byteLength);\n\t\n\t        result.set(new Uint8Array(first));\n\t        result.set(new Uint8Array(second), first.byteLength);\n\t\n\t        return returnUInt8Array ? result : result.buffer;\n\t    }\n\t\n\t    function hexToBinaryString(hex) {\n\t        var bytes = [],\n\t            length = hex.length,\n\t            x;\n\t\n\t        for (x = 0; x < length - 1; x += 2) {\n\t            bytes.push(parseInt(hex.substr(x, 2), 16));\n\t        }\n\t\n\t        return String.fromCharCode.apply(String, bytes);\n\t    }\n\t\n\t    // ---------------------------------------------------\n\t\n\t    /**\n\t     * SparkMD5 OOP implementation.\n\t     *\n\t     * Use this class to perform an incremental md5, otherwise use the\n\t     * static methods instead.\n\t     */\n\t\n\t    function SparkMD5() {\n\t        // call reset to init the instance\n\t        this.reset();\n\t    }\n\t\n\t    /**\n\t     * Appends a string.\n\t     * A conversion will be applied if an utf8 string is detected.\n\t     *\n\t     * @param {String} str The string to be appended\n\t     *\n\t     * @return {SparkMD5} The instance itself\n\t     */\n\t    SparkMD5.prototype.append = function (str) {\n\t        // Converts the string to utf8 bytes if necessary\n\t        // Then append as binary\n\t        this.appendBinary(toUtf8(str));\n\t\n\t        return this;\n\t    };\n\t\n\t    /**\n\t     * Appends a binary string.\n\t     *\n\t     * @param {String} contents The binary string to be appended\n\t     *\n\t     * @return {SparkMD5} The instance itself\n\t     */\n\t    SparkMD5.prototype.appendBinary = function (contents) {\n\t        this._buff += contents;\n\t        this._length += contents.length;\n\t\n\t        var length = this._buff.length,\n\t            i;\n\t\n\t        for (i = 64; i <= length; i += 64) {\n\t            md5cycle(this._hash, md5blk(this._buff.substring(i - 64, i)));\n\t        }\n\t\n\t        this._buff = this._buff.substring(i - 64);\n\t\n\t        return this;\n\t    };\n\t\n\t    /**\n\t     * Finishes the incremental computation, reseting the internal state and\n\t     * returning the result.\n\t     *\n\t     * @param {Boolean} raw True to get the raw string, false to get the hex string\n\t     *\n\t     * @return {String} The result\n\t     */\n\t    SparkMD5.prototype.end = function (raw) {\n\t        var buff = this._buff,\n\t            length = buff.length,\n\t            i,\n\t            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n\t            ret;\n\t\n\t        for (i = 0; i < length; i += 1) {\n\t            tail[i >> 2] |= buff.charCodeAt(i) << ((i % 4) << 3);\n\t        }\n\t\n\t        this._finish(tail, length);\n\t        ret = hex(this._hash);\n\t\n\t        if (raw) {\n\t            ret = hexToBinaryString(ret);\n\t        }\n\t\n\t        this.reset();\n\t\n\t        return ret;\n\t    };\n\t\n\t    /**\n\t     * Resets the internal state of the computation.\n\t     *\n\t     * @return {SparkMD5} The instance itself\n\t     */\n\t    SparkMD5.prototype.reset = function () {\n\t        this._buff = '';\n\t        this._length = 0;\n\t        this._hash = [1732584193, -271733879, -1732584194, 271733878];\n\t\n\t        return this;\n\t    };\n\t\n\t    /**\n\t     * Gets the internal state of the computation.\n\t     *\n\t     * @return {Object} The state\n\t     */\n\t    SparkMD5.prototype.getState = function () {\n\t        return {\n\t            buff: this._buff,\n\t            length: this._length,\n\t            hash: this._hash\n\t        };\n\t    };\n\t\n\t    /**\n\t     * Gets the internal state of the computation.\n\t     *\n\t     * @param {Object} state The state\n\t     *\n\t     * @return {SparkMD5} The instance itself\n\t     */\n\t    SparkMD5.prototype.setState = function (state) {\n\t        this._buff = state.buff;\n\t        this._length = state.length;\n\t        this._hash = state.hash;\n\t\n\t        return this;\n\t    };\n\t\n\t    /**\n\t     * Releases memory used by the incremental buffer and other additional\n\t     * resources. If you plan to use the instance again, use reset instead.\n\t     */\n\t    SparkMD5.prototype.destroy = function () {\n\t        delete this._hash;\n\t        delete this._buff;\n\t        delete this._length;\n\t    };\n\t\n\t    /**\n\t     * Finish the final calculation based on the tail.\n\t     *\n\t     * @param {Array}  tail   The tail (will be modified)\n\t     * @param {Number} length The length of the remaining buffer\n\t     */\n\t    SparkMD5.prototype._finish = function (tail, length) {\n\t        var i = length,\n\t            tmp,\n\t            lo,\n\t            hi;\n\t\n\t        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\n\t        if (i > 55) {\n\t            md5cycle(this._hash, tail);\n\t            for (i = 0; i < 16; i += 1) {\n\t                tail[i] = 0;\n\t            }\n\t        }\n\t\n\t        // Do the final computation based on the tail and length\n\t        // Beware that the final length may not fit in 32 bits so we take care of that\n\t        tmp = this._length * 8;\n\t        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\n\t        lo = parseInt(tmp[2], 16);\n\t        hi = parseInt(tmp[1], 16) || 0;\n\t\n\t        tail[14] = lo;\n\t        tail[15] = hi;\n\t        md5cycle(this._hash, tail);\n\t    };\n\t\n\t    /**\n\t     * Performs the md5 hash on a string.\n\t     * A conversion will be applied if utf8 string is detected.\n\t     *\n\t     * @param {String}  str The string\n\t     * @param {Boolean} raw True to get the raw string, false to get the hex string\n\t     *\n\t     * @return {String} The result\n\t     */\n\t    SparkMD5.hash = function (str, raw) {\n\t        // Converts the string to utf8 bytes if necessary\n\t        // Then compute it using the binary function\n\t        return SparkMD5.hashBinary(toUtf8(str), raw);\n\t    };\n\t\n\t    /**\n\t     * Performs the md5 hash on a binary string.\n\t     *\n\t     * @param {String}  content The binary string\n\t     * @param {Boolean} raw     True to get the raw string, false to get the hex string\n\t     *\n\t     * @return {String} The result\n\t     */\n\t    SparkMD5.hashBinary = function (content, raw) {\n\t        var hash = md51(content),\n\t            ret = hex(hash);\n\t\n\t        return raw ? hexToBinaryString(ret) : ret;\n\t    };\n\t\n\t    // ---------------------------------------------------\n\t\n\t    /**\n\t     * SparkMD5 OOP implementation for array buffers.\n\t     *\n\t     * Use this class to perform an incremental md5 ONLY for array buffers.\n\t     */\n\t    SparkMD5.ArrayBuffer = function () {\n\t        // call reset to init the instance\n\t        this.reset();\n\t    };\n\t\n\t    /**\n\t     * Appends an array buffer.\n\t     *\n\t     * @param {ArrayBuffer} arr The array to be appended\n\t     *\n\t     * @return {SparkMD5.ArrayBuffer} The instance itself\n\t     */\n\t    SparkMD5.ArrayBuffer.prototype.append = function (arr) {\n\t        var buff = concatenateArrayBuffers(this._buff.buffer, arr, true),\n\t            length = buff.length,\n\t            i;\n\t\n\t        this._length += arr.byteLength;\n\t\n\t        for (i = 64; i <= length; i += 64) {\n\t            md5cycle(this._hash, md5blk_array(buff.subarray(i - 64, i)));\n\t        }\n\t\n\t        this._buff = (i - 64) < length ? new Uint8Array(buff.buffer.slice(i - 64)) : new Uint8Array(0);\n\t\n\t        return this;\n\t    };\n\t\n\t    /**\n\t     * Finishes the incremental computation, reseting the internal state and\n\t     * returning the result.\n\t     *\n\t     * @param {Boolean} raw True to get the raw string, false to get the hex string\n\t     *\n\t     * @return {String} The result\n\t     */\n\t    SparkMD5.ArrayBuffer.prototype.end = function (raw) {\n\t        var buff = this._buff,\n\t            length = buff.length,\n\t            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n\t            i,\n\t            ret;\n\t\n\t        for (i = 0; i < length; i += 1) {\n\t            tail[i >> 2] |= buff[i] << ((i % 4) << 3);\n\t        }\n\t\n\t        this._finish(tail, length);\n\t        ret = hex(this._hash);\n\t\n\t        if (raw) {\n\t            ret = hexToBinaryString(ret);\n\t        }\n\t\n\t        this.reset();\n\t\n\t        return ret;\n\t    };\n\t\n\t    /**\n\t     * Resets the internal state of the computation.\n\t     *\n\t     * @return {SparkMD5.ArrayBuffer} The instance itself\n\t     */\n\t    SparkMD5.ArrayBuffer.prototype.reset = function () {\n\t        this._buff = new Uint8Array(0);\n\t        this._length = 0;\n\t        this._hash = [1732584193, -271733879, -1732584194, 271733878];\n\t\n\t        return this;\n\t    };\n\t\n\t    /**\n\t     * Gets the internal state of the computation.\n\t     *\n\t     * @return {Object} The state\n\t     */\n\t    SparkMD5.ArrayBuffer.prototype.getState = function () {\n\t        var state = SparkMD5.prototype.getState.call(this);\n\t\n\t        // Convert buffer to a string\n\t        state.buff = arrayBuffer2Utf8Str(state.buff);\n\t\n\t        return state;\n\t    };\n\t\n\t    /**\n\t     * Gets the internal state of the computation.\n\t     *\n\t     * @param {Object} state The state\n\t     *\n\t     * @return {SparkMD5.ArrayBuffer} The instance itself\n\t     */\n\t    SparkMD5.ArrayBuffer.prototype.setState = function (state) {\n\t        // Convert string to buffer\n\t        state.buff = utf8Str2ArrayBuffer(state.buff, true);\n\t\n\t        return SparkMD5.prototype.setState.call(this, state);\n\t    };\n\t\n\t    SparkMD5.ArrayBuffer.prototype.destroy = SparkMD5.prototype.destroy;\n\t\n\t    SparkMD5.ArrayBuffer.prototype._finish = SparkMD5.prototype._finish;\n\t\n\t    /**\n\t     * Performs the md5 hash on an array buffer.\n\t     *\n\t     * @param {ArrayBuffer} arr The array buffer\n\t     * @param {Boolean}     raw True to get the raw string, false to get the hex one\n\t     *\n\t     * @return {String} The result\n\t     */\n\t    SparkMD5.ArrayBuffer.hash = function (arr, raw) {\n\t        var hash = md51_array(new Uint8Array(arr)),\n\t            ret = hex(hash);\n\t\n\t        return raw ? hexToBinaryString(ret) : ret;\n\t    };\n\t\n\t    return SparkMD5;\n\t}));\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Stringify/parse functions that don't operate\n\t * recursively, so they avoid call stack exceeded\n\t * errors.\n\t */\n\texports.stringify = function stringify(input) {\n\t  var queue = [];\n\t  queue.push({obj: input});\n\t\n\t  var res = '';\n\t  var next, obj, prefix, val, i, arrayPrefix, keys, k, key, value, objPrefix;\n\t  while ((next = queue.pop())) {\n\t    obj = next.obj;\n\t    prefix = next.prefix || '';\n\t    val = next.val || '';\n\t    res += prefix;\n\t    if (val) {\n\t      res += val;\n\t    } else if (typeof obj !== 'object') {\n\t      res += typeof obj === 'undefined' ? null : JSON.stringify(obj);\n\t    } else if (obj === null) {\n\t      res += 'null';\n\t    } else if (Array.isArray(obj)) {\n\t      queue.push({val: ']'});\n\t      for (i = obj.length - 1; i >= 0; i--) {\n\t        arrayPrefix = i === 0 ? '' : ',';\n\t        queue.push({obj: obj[i], prefix: arrayPrefix});\n\t      }\n\t      queue.push({val: '['});\n\t    } else { // object\n\t      keys = [];\n\t      for (k in obj) {\n\t        if (obj.hasOwnProperty(k)) {\n\t          keys.push(k);\n\t        }\n\t      }\n\t      queue.push({val: '}'});\n\t      for (i = keys.length - 1; i >= 0; i--) {\n\t        key = keys[i];\n\t        value = obj[key];\n\t        objPrefix = (i > 0 ? ',' : '');\n\t        objPrefix += JSON.stringify(key) + ':';\n\t        queue.push({obj: value, prefix: objPrefix});\n\t      }\n\t      queue.push({val: '{'});\n\t    }\n\t  }\n\t  return res;\n\t};\n\t\n\t// Convenience function for the parse function.\n\t// This pop function is basically copied from\n\t// pouchCollate.parseIndexableString\n\tfunction pop(obj, stack, metaStack) {\n\t  var lastMetaElement = metaStack[metaStack.length - 1];\n\t  if (obj === lastMetaElement.element) {\n\t    // popping a meta-element, e.g. an object whose value is another object\n\t    metaStack.pop();\n\t    lastMetaElement = metaStack[metaStack.length - 1];\n\t  }\n\t  var element = lastMetaElement.element;\n\t  var lastElementIndex = lastMetaElement.index;\n\t  if (Array.isArray(element)) {\n\t    element.push(obj);\n\t  } else if (lastElementIndex === stack.length - 2) { // obj with key+value\n\t    var key = stack.pop();\n\t    element[key] = obj;\n\t  } else {\n\t    stack.push(obj); // obj with key only\n\t  }\n\t}\n\t\n\texports.parse = function (str) {\n\t  var stack = [];\n\t  var metaStack = []; // stack for arrays and objects\n\t  var i = 0;\n\t  var collationIndex,parsedNum,numChar;\n\t  var parsedString,lastCh,numConsecutiveSlashes,ch;\n\t  var arrayElement, objElement;\n\t  while (true) {\n\t    collationIndex = str[i++];\n\t    if (collationIndex === '}' ||\n\t        collationIndex === ']' ||\n\t        typeof collationIndex === 'undefined') {\n\t      if (stack.length === 1) {\n\t        return stack.pop();\n\t      } else {\n\t        pop(stack.pop(), stack, metaStack);\n\t        continue;\n\t      }\n\t    }\n\t    switch (collationIndex) {\n\t      case ' ':\n\t      case '\\t':\n\t      case '\\n':\n\t      case ':':\n\t      case ',':\n\t        break;\n\t      case 'n':\n\t        i += 3; // 'ull'\n\t        pop(null, stack, metaStack);\n\t        break;\n\t      case 't':\n\t        i += 3; // 'rue'\n\t        pop(true, stack, metaStack);\n\t        break;\n\t      case 'f':\n\t        i += 4; // 'alse'\n\t        pop(false, stack, metaStack);\n\t        break;\n\t      case '0':\n\t      case '1':\n\t      case '2':\n\t      case '3':\n\t      case '4':\n\t      case '5':\n\t      case '6':\n\t      case '7':\n\t      case '8':\n\t      case '9':\n\t      case '-':\n\t        parsedNum = '';\n\t        i--;\n\t        while (true) {\n\t          numChar = str[i++];\n\t          if (/[\\d\\.\\-e\\+]/.test(numChar)) {\n\t            parsedNum += numChar;\n\t          } else {\n\t            i--;\n\t            break;\n\t          }\n\t        }\n\t        pop(parseFloat(parsedNum), stack, metaStack);\n\t        break;\n\t      case '\"':\n\t        parsedString = '';\n\t        lastCh = void 0;\n\t        numConsecutiveSlashes = 0;\n\t        while (true) {\n\t          ch = str[i++];\n\t          if (ch !== '\"' || (lastCh === '\\\\' &&\n\t              numConsecutiveSlashes % 2 === 1)) {\n\t            parsedString += ch;\n\t            lastCh = ch;\n\t            if (lastCh === '\\\\') {\n\t              numConsecutiveSlashes++;\n\t            } else {\n\t              numConsecutiveSlashes = 0;\n\t            }\n\t          } else {\n\t            break;\n\t          }\n\t        }\n\t        pop(JSON.parse('\"' + parsedString + '\"'), stack, metaStack);\n\t        break;\n\t      case '[':\n\t        arrayElement = { element: [], index: stack.length };\n\t        stack.push(arrayElement.element);\n\t        metaStack.push(arrayElement);\n\t        break;\n\t      case '{':\n\t        objElement = { element: {}, index: stack.length };\n\t        stack.push(objElement.element);\n\t        metaStack.push(objElement);\n\t        break;\n\t      default:\n\t        throw new Error(\n\t          'unexpectedly reached end of input: ' + collationIndex);\n\t    }\n\t  }\n\t};\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (root, factory) {\r\n\t  /* istanbul ignore next */\r\n\t  if (true) {\r\n\t    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\r\n\t  } else if (typeof exports === 'object') {\r\n\t    module.exports = factory()\r\n\t  } else {\r\n\t    root.PromisePool = factory()\r\n\t    // Legacy API\r\n\t    root.promisePool = root.PromisePool\r\n\t  }\r\n\t})(this, function () {\r\n\t  'use strict'\r\n\t\r\n\t  var EventTarget = function () {\r\n\t    this._listeners = {}\r\n\t  }\r\n\t\r\n\t  EventTarget.prototype.addEventListener = function (type, listener) {\r\n\t    this._listeners[type] = this._listeners[type] || []\r\n\t    if (this._listeners[type].indexOf(listener) < 0) {\r\n\t      this._listeners[type].push(listener)\r\n\t    }\r\n\t  }\r\n\t\r\n\t  EventTarget.prototype.removeEventListener = function (type, listener) {\r\n\t    if (this._listeners[type]) {\r\n\t      var p = this._listeners[type].indexOf(listener)\r\n\t      if (p >= 0) {\r\n\t        this._listeners[type].splice(p, 1)\r\n\t      }\r\n\t    }\r\n\t  }\r\n\t\r\n\t  EventTarget.prototype.dispatchEvent = function (evt) {\r\n\t    if (this._listeners[evt.type] && this._listeners[evt.type].length) {\r\n\t      var listeners = this._listeners[evt.type].slice()\r\n\t      for (var i = 0, l = listeners.length; i < l; ++i) {\r\n\t        listeners[i].call(this, evt)\r\n\t      }\r\n\t    }\r\n\t  }\r\n\t\r\n\t  var isGenerator = function (func) {\r\n\t    return (typeof func.constructor === 'function' &&\r\n\t      func.constructor.name === 'GeneratorFunction')\r\n\t  }\r\n\t\r\n\t  var functionToIterator = function (func) {\r\n\t    return {\r\n\t      next: function () {\r\n\t        var promise = func()\r\n\t        return promise ? {value: promise} : {done: true}\r\n\t      }\r\n\t    }\r\n\t  }\r\n\t\r\n\t  var promiseToIterator = function (promise) {\r\n\t    var called = false\r\n\t    return {\r\n\t      next: function () {\r\n\t        if (called) {\r\n\t          return {done: true}\r\n\t        }\r\n\t        called = true\r\n\t        return {value: promise}\r\n\t      }\r\n\t    }\r\n\t  }\r\n\t\r\n\t  var toIterator = function (obj, Promise) {\r\n\t    var type = typeof obj\r\n\t    if (type === 'object') {\r\n\t      if (typeof obj.next === 'function') {\r\n\t        return obj\r\n\t      }\r\n\t      /* istanbul ignore else */\r\n\t      if (typeof obj.then === 'function') {\r\n\t        return promiseToIterator(obj)\r\n\t      }\r\n\t    }\r\n\t    if (type === 'function') {\r\n\t      return isGenerator(obj) ? obj() : functionToIterator(obj)\r\n\t    }\r\n\t    return promiseToIterator(Promise.resolve(obj))\r\n\t  }\r\n\t\r\n\t  var PromisePoolEvent = function (target, type, data) {\r\n\t    this.target = target\r\n\t    this.type = type\r\n\t    this.data = data\r\n\t  }\r\n\t\r\n\t  var PromisePool = function (source, concurrency, options) {\r\n\t    EventTarget.call(this)\r\n\t    if (typeof concurrency !== 'number' ||\r\n\t        Math.floor(concurrency) !== concurrency ||\r\n\t        concurrency < 1) {\r\n\t      throw new Error('Invalid concurrency')\r\n\t    }\r\n\t    this._concurrency = concurrency\r\n\t    this._options = options || {}\r\n\t    this._options.promise = this._options.promise || Promise\r\n\t    this._iterator = toIterator(source, this._options.promise)\r\n\t    this._done = false\r\n\t    this._size = 0\r\n\t    this._promise = null\r\n\t    this._callbacks = null\r\n\t  }\r\n\t  PromisePool.prototype = new EventTarget()\r\n\t  PromisePool.prototype.constructor = PromisePool\r\n\t\r\n\t  PromisePool.prototype.concurrency = function (value) {\r\n\t    if (typeof value !== 'undefined') {\r\n\t      this._concurrency = value\r\n\t      if (this.active()) {\r\n\t        this._proceed()\r\n\t      }\r\n\t    }\r\n\t    return this._concurrency\r\n\t  }\r\n\t\r\n\t  PromisePool.prototype.size = function () {\r\n\t    return this._size\r\n\t  }\r\n\t\r\n\t  PromisePool.prototype.active = function () {\r\n\t    return !!this._promise\r\n\t  }\r\n\t\r\n\t  PromisePool.prototype.promise = function () {\r\n\t    return this._promise\r\n\t  }\r\n\t\r\n\t  PromisePool.prototype.start = function () {\r\n\t    var that = this\r\n\t    var Promise = this._options.promise\r\n\t    this._promise = new Promise(function (resolve, reject) {\r\n\t      that._callbacks = {\r\n\t        reject: reject,\r\n\t        resolve: resolve\r\n\t      }\r\n\t      that._proceed()\r\n\t    })\r\n\t    return this._promise\r\n\t  }\r\n\t\r\n\t  PromisePool.prototype._fireEvent = function (type, data) {\r\n\t    this.dispatchEvent(new PromisePoolEvent(this, type, data))\r\n\t  }\r\n\t\r\n\t  PromisePool.prototype._settle = function (error) {\r\n\t    if (error) {\r\n\t      this._callbacks.reject(error)\r\n\t    } else {\r\n\t      this._callbacks.resolve()\r\n\t    }\r\n\t    this._promise = null\r\n\t    this._callbacks = null\r\n\t  }\r\n\t\r\n\t  PromisePool.prototype._onPooledPromiseFulfilled = function (promise, result) {\r\n\t    this._size--\r\n\t    if (this.active()) {\r\n\t      this._fireEvent('fulfilled', {\r\n\t        promise: promise,\r\n\t        result: result\r\n\t      })\r\n\t      this._proceed()\r\n\t    }\r\n\t  }\r\n\t\r\n\t  PromisePool.prototype._onPooledPromiseRejected = function (promise, error) {\r\n\t    this._size--\r\n\t    if (this.active()) {\r\n\t      this._fireEvent('rejected', {\r\n\t        promise: promise,\r\n\t        error: error\r\n\t      })\r\n\t      this._settle(error || new Error('Unknown error'))\r\n\t    }\r\n\t  }\r\n\t\r\n\t  PromisePool.prototype._trackPromise = function (promise) {\r\n\t    var that = this\r\n\t    promise\r\n\t      .then(function (result) {\r\n\t        that._onPooledPromiseFulfilled(promise, result)\r\n\t      }, function (error) {\r\n\t        that._onPooledPromiseRejected(promise, error)\r\n\t      })['catch'](function (err) {\r\n\t        that._settle(new Error('Promise processing failed: ' + err))\r\n\t      })\r\n\t  }\r\n\t\r\n\t  PromisePool.prototype._proceed = function () {\r\n\t    if (!this._done) {\r\n\t      var result = null\r\n\t      while (this._size < this._concurrency &&\r\n\t          !(result = this._iterator.next()).done) {\r\n\t        this._size++\r\n\t        this._trackPromise(result.value)\r\n\t      }\r\n\t      this._done = (result === null || !!result.done)\r\n\t    }\r\n\t    if (this._done && this._size === 0) {\r\n\t      this._settle()\r\n\t    }\r\n\t  }\r\n\t\r\n\t  PromisePool.PromisePoolEvent = PromisePoolEvent\r\n\t  // Legacy API\r\n\t  PromisePool.PromisePool = PromisePool\r\n\t\r\n\t  return PromisePool\r\n\t})\r\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** database.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 6c150c6bd88ba8e5d3f2\n **/","///<reference path=\"../node_modules/@types/pouchdb-core/index.d.ts\"/> \n'use strict';\nconst PouchDB = require('pouchdb');\nclass Database {\n    /**\n     * Represents the generic data access layer.\n     *\n     * @class\n     * @param {string} dbname - Database name\n     * @param {Adapters} adapter - Database adapter type\n     * @param {Object} [options]\n     *\t@param {string} options.username\n     *\tLogged in user's username\n     *\t@param {string} options.password\n     *\tLogged in user's password\n     *\n     * @author Brent Gordon\n     * @version 1.0.0\n     *\n     * @example\n     * var pouch = new Database('dbname','pouchdb');\n     * var couch = new Database('dbname','couchdb', { username: 'user001', password: 'pwd001' });\n     *\n     * @return {class} new Database class object\n     *\n     */\n    constructor(dbname = 'default', adapter = 'pouchdb', options) {\n        // Set the database name\n        this._dbname = dbname;\n        // Set the adapter type\n        this._adapter = adapter;\n        // Set the database username\n        this._hostname = options.hostname || 'localhost';\n        // Set the database username\n        this._port = options.port || 5984;\n        // Set the database username\n        this._username = options.username || 'admin';\n        // Set the database username\n        this._password = options.password || 'password';\n    }\n    /** */\n    create() {\n        try {\n            // Database adapter 'pouchdb'\n            if (this._adapter === 'pouchdb')\n                this._db = new PouchDB(this._dbname);\n        }\n        catch (err) {\n            throw new Error(err);\n        }\n    }\n    /** */\n    delete() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // Database adapter 'pouchdb'\n                if (this._adapter === 'pouchdb')\n                    yield this._db.destroy();\n            }\n            catch (err) {\n                throw new Error(err);\n            }\n        });\n    }\n    /** */\n    fetchDoc(docId, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // Database adapter 'pouchdb'\n                if (this._adapter === 'pouchdb')\n                    if (options)\n                        yield this._db.get(docId, options);\n                    else\n                        yield this._db.get(docId);\n            }\n            catch (err) {\n                throw new Error(err);\n            }\n        });\n    }\n    saveDoc(docId, content) { }\n    removeDoc(docId) { }\n    fetchAttachment(attId) { }\n    saveAttachment(attId, content) { }\n    removeAttachment(attId) { }\n    search(query) { }\n    push(remoteURL) { }\n    pull(remoteURL) { }\n    sync(remoteURL) { }\n}\nexports.Database = Database;\n\n\n\n/** WEBPACK FOOTER **\n ** ./~/ts-loader!./src/main.ts\n **/","'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar jsExtend = require('js-extend');\nvar debug = _interopDefault(require('debug'));\nvar inherits = _interopDefault(require('inherits'));\nvar lie = _interopDefault(require('lie'));\nvar events = require('events');\nvar getArguments = _interopDefault(require('argsarray'));\nvar scopedEval = _interopDefault(require('scope-eval'));\nvar Md5 = _interopDefault(require('spark-md5'));\nvar vuvuzela = _interopDefault(require('vuvuzela'));\nvar PromisePool = _interopDefault(require('es6-promise-pool'));\n\n/* istanbul ignore next */\nvar PouchPromise = typeof Promise === 'function' ? Promise : lie;\n\n// based on https://github.com/montagejs/collections\nfunction mangle(key) {\n  return '$' + key;\n}\nfunction unmangle(key) {\n  return key.substring(1);\n}\nfunction _Map() {\n  this.store = {};\n}\n_Map.prototype.get = function (key) {\n  var mangled = mangle(key);\n  return this.store[mangled];\n};\n_Map.prototype.set = function (key, value) {\n  var mangled = mangle(key);\n  this.store[mangled] = value;\n  return true;\n};\n_Map.prototype.has = function (key) {\n  var mangled = mangle(key);\n  return mangled in this.store;\n};\n_Map.prototype.delete = function (key) {\n  var mangled = mangle(key);\n  var res = mangled in this.store;\n  delete this.store[mangled];\n  return res;\n};\n_Map.prototype.forEach = function (cb) {\n  var keys = Object.keys(this.store);\n  for (var i = 0, len = keys.length; i < len; i++) {\n    var key = keys[i];\n    var value = this.store[key];\n    key = unmangle(key);\n    cb(value, key);\n  }\n};\n\nfunction _Set(array) {\n  this.store = new _Map();\n\n  // init with an array\n  if (array && Array.isArray(array)) {\n    for (var i = 0, len = array.length; i < len; i++) {\n      this.add(array[i]);\n    }\n  }\n}\n_Set.prototype.add = function (key) {\n  return this.store.set(key, true);\n};\n_Set.prototype.has = function (key) {\n  return this.store.has(key);\n};\n\nfunction isBinaryObject(object) {\n  return (typeof ArrayBuffer !== 'undefined' && object instanceof ArrayBuffer) ||\n    (typeof Blob !== 'undefined' && object instanceof Blob);\n}\n\nfunction cloneArrayBuffer(buff) {\n  if (typeof buff.slice === 'function') {\n    return buff.slice(0);\n  }\n  // IE10-11 slice() polyfill\n  var target = new ArrayBuffer(buff.byteLength);\n  var targetArray = new Uint8Array(target);\n  var sourceArray = new Uint8Array(buff);\n  targetArray.set(sourceArray);\n  return target;\n}\n\nfunction cloneBinaryObject(object) {\n  if (object instanceof ArrayBuffer) {\n    return cloneArrayBuffer(object);\n  }\n  var size = object.size;\n  var type = object.type;\n  // Blob\n  if (typeof object.slice === 'function') {\n    return object.slice(0, size, type);\n  }\n  // PhantomJS slice() replacement\n  return object.webkitSlice(0, size, type);\n}\n\n// most of this is borrowed from lodash.isPlainObject:\n// https://github.com/fis-components/lodash.isplainobject/\n// blob/29c358140a74f252aeb08c9eb28bef86f2217d4a/index.js\n\nvar funcToString = Function.prototype.toString;\nvar objectCtorString = funcToString.call(Object);\n\nfunction isPlainObject(value) {\n  var proto = Object.getPrototypeOf(value);\n  /* istanbul ignore if */\n  if (proto === null) { // not sure when this happens, but I guess it can\n    return true;\n  }\n  var Ctor = proto.constructor;\n  return (typeof Ctor == 'function' &&\n    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);\n}\n\nfunction clone(object) {\n  var newObject;\n  var i;\n  var len;\n\n  if (!object || typeof object !== 'object') {\n    return object;\n  }\n\n  if (Array.isArray(object)) {\n    newObject = [];\n    for (i = 0, len = object.length; i < len; i++) {\n      newObject[i] = clone(object[i]);\n    }\n    return newObject;\n  }\n\n  // special case: to avoid inconsistencies between IndexedDB\n  // and other backends, we automatically stringify Dates\n  if (object instanceof Date) {\n    return object.toISOString();\n  }\n\n  if (isBinaryObject(object)) {\n    return cloneBinaryObject(object);\n  }\n\n  if (!isPlainObject(object)) {\n    return object; // don't clone objects like Workers\n  }\n\n  newObject = {};\n  for (i in object) {\n    /* istanbul ignore else */\n    if (Object.prototype.hasOwnProperty.call(object, i)) {\n      var value = clone(object[i]);\n      if (typeof value !== 'undefined') {\n        newObject[i] = value;\n      }\n    }\n  }\n  return newObject;\n}\n\nfunction once(fun) {\n  var called = false;\n  return getArguments(function (args) {\n    /* istanbul ignore if */\n    if (called) {\n      // this is a smoke test and should never actually happen\n      throw new Error('once called more than once');\n    } else {\n      called = true;\n      fun.apply(this, args);\n    }\n  });\n}\n\nfunction toPromise(func) {\n  //create the function we will be returning\n  return getArguments(function (args) {\n    // Clone arguments\n    args = clone(args);\n    var self = this;\n    var tempCB =\n      (typeof args[args.length - 1] === 'function') ? args.pop() : false;\n    // if the last argument is a function, assume its a callback\n    var usedCB;\n    if (tempCB) {\n      // if it was a callback, create a new callback which calls it,\n      // but do so async so we don't trap any errors\n      usedCB = function (err, resp) {\n        process.nextTick(function () {\n          tempCB(err, resp);\n        });\n      };\n    }\n    var promise = new PouchPromise(function (fulfill, reject) {\n      var resp;\n      try {\n        var callback = once(function (err, mesg) {\n          if (err) {\n            reject(err);\n          } else {\n            fulfill(mesg);\n          }\n        });\n        // create a callback for this invocation\n        // apply the function in the orig context\n        args.push(callback);\n        resp = func.apply(self, args);\n        if (resp && typeof resp.then === 'function') {\n          fulfill(resp);\n        }\n      } catch (e) {\n        reject(e);\n      }\n    });\n    // if there is a callback, call it back\n    if (usedCB) {\n      promise.then(function (result) {\n        usedCB(null, result);\n      }, usedCB);\n    }\n    return promise;\n  });\n}\n\nvar log = debug('pouchdb:api');\n\nfunction adapterFun(name, callback) {\n  function logApiCall(self, name, args) {\n    /* istanbul ignore if */\n    if (log.enabled) {\n      var logArgs = [self.name, name];\n      for (var i = 0; i < args.length - 1; i++) {\n        logArgs.push(args[i]);\n      }\n      log.apply(null, logArgs);\n\n      // override the callback itself to log the response\n      var origCallback = args[args.length - 1];\n      args[args.length - 1] = function (err, res) {\n        var responseArgs = [self.name, name];\n        responseArgs = responseArgs.concat(\n          err ? ['error', err] : ['success', res]\n        );\n        log.apply(null, responseArgs);\n        origCallback(err, res);\n      };\n    }\n  }\n\n  return toPromise(getArguments(function (args) {\n    if (this._closed) {\n      return PouchPromise.reject(new Error('database is closed'));\n    }\n    if (this._destroyed) {\n      return PouchPromise.reject(new Error('database is destroyed'));\n    }\n    var self = this;\n    logApiCall(self, name, args);\n    if (!this.taskqueue.isReady) {\n      return new PouchPromise(function (fulfill, reject) {\n        self.taskqueue.addTask(function (failed) {\n          if (failed) {\n            reject(failed);\n          } else {\n            fulfill(self[name].apply(self, args));\n          }\n        });\n      });\n    }\n    return callback.apply(this, args);\n  }));\n}\n\n// like underscore/lodash _.pick()\nfunction pick(obj, arr) {\n  var res = {};\n  for (var i = 0, len = arr.length; i < len; i++) {\n    var prop = arr[i];\n    if (prop in obj) {\n      res[prop] = obj[prop];\n    }\n  }\n  return res;\n}\n\n// Most browsers throttle concurrent requests at 6, so it's silly\n// to shim _bulk_get by trying to launch potentially hundreds of requests\n// and then letting the majority time out. We can handle this ourselves.\nvar MAX_NUM_CONCURRENT_REQUESTS = 6;\n\nfunction identityFunction(x) {\n  return x;\n}\n\nfunction formatResultForOpenRevsGet(result) {\n  return [{\n    ok: result\n  }];\n}\n\n// shim for P/CouchDB adapters that don't directly implement _bulk_get\nfunction bulkGet(db, opts, callback) {\n  var requests = opts.docs;\n\n  // consolidate into one request per doc if possible\n  var requestsById = {};\n  requests.forEach(function (request) {\n    if (request.id in requestsById) {\n      requestsById[request.id].push(request);\n    } else {\n      requestsById[request.id] = [request];\n    }\n  });\n\n  var numDocs = Object.keys(requestsById).length;\n  var numDone = 0;\n  var perDocResults = new Array(numDocs);\n\n  function collapseResultsAndFinish() {\n    var results = [];\n    perDocResults.forEach(function (res) {\n      res.docs.forEach(function (info) {\n        results.push({\n          id: res.id,\n          docs: [info]\n        });\n      });\n    });\n    callback(null, {results: results});\n  }\n\n  function checkDone() {\n    if (++numDone === numDocs) {\n      collapseResultsAndFinish();\n    }\n  }\n\n  function gotResult(docIndex, id, docs) {\n    perDocResults[docIndex] = {id: id, docs: docs};\n    checkDone();\n  }\n\n  var allRequests = Object.keys(requestsById);\n\n  var i = 0;\n\n  function nextBatch() {\n\n    if (i >= allRequests.length) {\n      return;\n    }\n\n    var upTo = Math.min(i + MAX_NUM_CONCURRENT_REQUESTS, allRequests.length);\n    var batch = allRequests.slice(i, upTo);\n    processBatch(batch, i);\n    i += batch.length;\n  }\n\n  function processBatch(batch, offset) {\n    batch.forEach(function (docId, j) {\n      var docIdx = offset + j;\n      var docRequests = requestsById[docId];\n\n      // just use the first request as the \"template\"\n      // TODO: The _bulk_get API allows for more subtle use cases than this,\n      // but for now it is unlikely that there will be a mix of different\n      // \"atts_since\" or \"attachments\" in the same request, since it's just\n      // replicate.js that is using this for the moment.\n      // Also, atts_since is aspirational, since we don't support it yet.\n      var docOpts = pick(docRequests[0], ['atts_since', 'attachments']);\n      docOpts.open_revs = docRequests.map(function (request) {\n        // rev is optional, open_revs disallowed\n        return request.rev;\n      });\n\n      // remove falsey / undefined revisions\n      docOpts.open_revs = docOpts.open_revs.filter(identityFunction);\n\n      var formatResult = identityFunction;\n\n      if (docOpts.open_revs.length === 0) {\n        delete docOpts.open_revs;\n\n        // when fetching only the \"winning\" leaf,\n        // transform the result so it looks like an open_revs\n        // request\n        formatResult = formatResultForOpenRevsGet;\n      }\n\n      // globally-supplied options\n      ['revs', 'attachments', 'binary', 'ajax'].forEach(function (param) {\n        if (param in opts) {\n          docOpts[param] = opts[param];\n        }\n      });\n      db.get(docId, docOpts, function (err, res) {\n        var result;\n        /* istanbul ignore if */\n        if (err) {\n          result = [{error: err}];\n        } else {\n          result = formatResult(res);\n        }\n        gotResult(docIdx, docId, result);\n        nextBatch();\n      });\n    });\n  }\n\n  nextBatch();\n\n}\n\nfunction isChromeApp() {\n  return (typeof chrome !== \"undefined\" &&\n    typeof chrome.storage !== \"undefined\" &&\n    typeof chrome.storage.local !== \"undefined\");\n}\n\nvar hasLocal;\n\nif (isChromeApp()) {\n  hasLocal = false;\n} else {\n  try {\n    localStorage.setItem('_pouch_check_localstorage', 1);\n    hasLocal = !!localStorage.getItem('_pouch_check_localstorage');\n  } catch (e) {\n    hasLocal = false;\n  }\n}\n\nfunction hasLocalStorage() {\n  return hasLocal;\n}\n\ninherits(Changes$1, events.EventEmitter);\n\n/* istanbul ignore next */\nfunction attachBrowserEvents(self) {\n  if (isChromeApp()) {\n    chrome.storage.onChanged.addListener(function (e) {\n      // make sure it's event addressed to us\n      if (e.db_name != null) {\n        //object only has oldValue, newValue members\n        self.emit(e.dbName.newValue);\n      }\n    });\n  } else if (hasLocalStorage()) {\n    if (typeof addEventListener !== 'undefined') {\n      addEventListener(\"storage\", function (e) {\n        self.emit(e.key);\n      });\n    } else { // old IE\n      window.attachEvent(\"storage\", function (e) {\n        self.emit(e.key);\n      });\n    }\n  }\n}\n\nfunction Changes$1() {\n  events.EventEmitter.call(this);\n  this._listeners = {};\n\n  attachBrowserEvents(this);\n}\nChanges$1.prototype.addListener = function (dbName, id, db, opts) {\n  /* istanbul ignore if */\n  if (this._listeners[id]) {\n    return;\n  }\n  var self = this;\n  var inprogress = false;\n  function eventFunction() {\n    /* istanbul ignore if */\n    if (!self._listeners[id]) {\n      return;\n    }\n    if (inprogress) {\n      inprogress = 'waiting';\n      return;\n    }\n    inprogress = true;\n    var changesOpts = pick(opts, [\n      'style', 'include_docs', 'attachments', 'conflicts', 'filter',\n      'doc_ids', 'view', 'since', 'query_params', 'binary'\n    ]);\n\n    /* istanbul ignore next */\n    function onError() {\n      inprogress = false;\n    }\n\n    db.changes(changesOpts).on('change', function (c) {\n      if (c.seq > opts.since && !opts.cancelled) {\n        opts.since = c.seq;\n        opts.onChange(c);\n      }\n    }).on('complete', function () {\n      if (inprogress === 'waiting') {\n        setTimeout(function (){\n          eventFunction();\n        },0);\n      }\n      inprogress = false;\n    }).on('error', onError);\n  }\n  this._listeners[id] = eventFunction;\n  this.on(dbName, eventFunction);\n};\n\nChanges$1.prototype.removeListener = function (dbName, id) {\n  /* istanbul ignore if */\n  if (!(id in this._listeners)) {\n    return;\n  }\n  events.EventEmitter.prototype.removeListener.call(this, dbName,\n    this._listeners[id]);\n  delete this._listeners[id];\n};\n\n\n/* istanbul ignore next */\nChanges$1.prototype.notifyLocalWindows = function (dbName) {\n  //do a useless change on a storage thing\n  //in order to get other windows's listeners to activate\n  if (isChromeApp()) {\n    chrome.storage.local.set({dbName: dbName});\n  } else if (hasLocalStorage()) {\n    localStorage[dbName] = (localStorage[dbName] === \"a\") ? \"b\" : \"a\";\n  }\n};\n\nChanges$1.prototype.notify = function (dbName) {\n  this.emit(dbName);\n  this.notifyLocalWindows(dbName);\n};\n\nfunction guardedConsole(method) {\n  /* istanbul ignore else */\n  if (console !== 'undefined' && method in console) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    console[method].apply(console, args);\n  }\n}\n\nfunction randomNumber(min, max) {\n  var maxTimeout = 600000; // Hard-coded default of 10 minutes\n  min = parseInt(min, 10) || 0;\n  max = parseInt(max, 10);\n  if (max !== max || max <= min) {\n    max = (min || 1) << 1; //doubling\n  } else {\n    max = max + 1;\n  }\n  // In order to not exceed maxTimeout, pick a random value between half of maxTimeout and maxTimeout\n  if(max > maxTimeout) {\n    min = maxTimeout >> 1; // divide by two\n    max = maxTimeout;\n  }\n  var ratio = Math.random();\n  var range = max - min;\n\n  return ~~(range * ratio + min); // ~~ coerces to an int, but fast.\n}\n\nfunction defaultBackOff(min) {\n  var max = 0;\n  if (!min) {\n    max = 2000;\n  }\n  return randomNumber(min, max);\n}\n\n// designed to give info to browser users, who are disturbed\n// when they see http errors in the console\nfunction explainError(status, str) {\n  guardedConsole('info', 'The above ' + status + ' is totally normal. ' + str);\n}\n\ninherits(PouchError, Error);\n\nfunction PouchError(opts) {\n  Error.call(this, opts.reason);\n  this.status = opts.status;\n  this.name = opts.error;\n  this.message = opts.reason;\n  this.error = true;\n}\n\nPouchError.prototype.toString = function () {\n  return JSON.stringify({\n    status: this.status,\n    name: this.name,\n    message: this.message,\n    reason: this.reason\n  });\n};\n\nvar UNAUTHORIZED = new PouchError({\n  status: 401,\n  error: 'unauthorized',\n  reason: \"Name or password is incorrect.\"\n});\n\nvar MISSING_BULK_DOCS = new PouchError({\n  status: 400,\n  error: 'bad_request',\n  reason: \"Missing JSON list of 'docs'\"\n});\n\nvar MISSING_DOC = new PouchError({\n  status: 404,\n  error: 'not_found',\n  reason: 'missing'\n});\n\nvar REV_CONFLICT = new PouchError({\n  status: 409,\n  error: 'conflict',\n  reason: 'Document update conflict'\n});\n\nvar INVALID_ID = new PouchError({\n  status: 400,\n  error: 'bad_request',\n  reason: '_id field must contain a string'\n});\n\nvar MISSING_ID = new PouchError({\n  status: 412,\n  error: 'missing_id',\n  reason: '_id is required for puts'\n});\n\nvar RESERVED_ID = new PouchError({\n  status: 400,\n  error: 'bad_request',\n  reason: 'Only reserved document ids may start with underscore.'\n});\n\nvar NOT_OPEN = new PouchError({\n  status: 412,\n  error: 'precondition_failed',\n  reason: 'Database not open'\n});\n\nvar UNKNOWN_ERROR = new PouchError({\n  status: 500,\n  error: 'unknown_error',\n  reason: 'Database encountered an unknown error'\n});\n\nvar BAD_ARG = new PouchError({\n  status: 500,\n  error: 'badarg',\n  reason: 'Some query argument is invalid'\n});\n\nvar INVALID_REQUEST = new PouchError({\n  status: 400,\n  error: 'invalid_request',\n  reason: 'Request was invalid'\n});\n\nvar QUERY_PARSE_ERROR = new PouchError({\n  status: 400,\n  error: 'query_parse_error',\n  reason: 'Some query parameter is invalid'\n});\n\nvar DOC_VALIDATION = new PouchError({\n  status: 500,\n  error: 'doc_validation',\n  reason: 'Bad special document member'\n});\n\nvar BAD_REQUEST = new PouchError({\n  status: 400,\n  error: 'bad_request',\n  reason: 'Something wrong with the request'\n});\n\nvar NOT_AN_OBJECT = new PouchError({\n  status: 400,\n  error: 'bad_request',\n  reason: 'Document must be a JSON object'\n});\n\nvar DB_MISSING = new PouchError({\n  status: 404,\n  error: 'not_found',\n  reason: 'Database not found'\n});\n\nvar IDB_ERROR = new PouchError({\n  status: 500,\n  error: 'indexed_db_went_bad',\n  reason: 'unknown'\n});\n\nvar WSQ_ERROR = new PouchError({\n  status: 500,\n  error: 'web_sql_went_bad',\n  reason: 'unknown'\n});\n\nvar LDB_ERROR = new PouchError({\n  status: 500,\n  error: 'levelDB_went_went_bad',\n  reason: 'unknown'\n});\n\nvar FORBIDDEN = new PouchError({\n  status: 403,\n  error: 'forbidden',\n  reason: 'Forbidden by design doc validate_doc_update function'\n});\n\nvar INVALID_REV = new PouchError({\n  status: 400,\n  error: 'bad_request',\n  reason: 'Invalid rev format'\n});\n\nvar FILE_EXISTS = new PouchError({\n  status: 412,\n  error: 'file_exists',\n  reason: 'The database could not be created, the file already exists.'\n});\n\nvar MISSING_STUB = new PouchError({\n  status: 412,\n  error: 'missing_stub'\n});\n\nvar INVALID_URL = new PouchError({\n  status: 413,\n  error: 'invalid_url',\n  reason: 'Provided URL is invalid'\n});\n\nfunction createError(error, reason) {\n  function CustomPouchError(reason) {\n    // inherit error properties from our parent error manually\n    // so as to allow proper JSON parsing.\n    /* jshint ignore:start */\n    for (var p in error) {\n      if (typeof error[p] !== 'function') {\n        this[p] = error[p];\n      }\n    }\n    /* jshint ignore:end */\n    if (reason !== undefined) {\n      this.reason = reason;\n    }\n  }\n  CustomPouchError.prototype = PouchError.prototype;\n  return new CustomPouchError(reason);\n}\n\nfunction generateErrorFromResponse(err) {\n\n  if (typeof err !== 'object') {\n    var data = err;\n    err = UNKNOWN_ERROR;\n    err.data = data;\n  }\n\n  if ('error' in err && err.error === 'conflict') {\n    err.name = 'conflict';\n    err.status = 409;\n  }\n\n  if (!('name' in err)) {\n    err.name = err.error || 'unknown';\n  }\n\n  if (!('status' in err)) {\n    err.status = 500;\n  }\n\n  if (!('message' in err)) {\n    err.message = err.message || err.reason;\n  }\n\n  return err;\n}\n\nfunction tryFilter(filter, doc, req) {\n  try {\n    return !filter(doc, req);\n  } catch (err) {\n    var msg = 'Filter function threw: ' + err.toString();\n    return createError(BAD_REQUEST, msg);\n  }\n}\n\nfunction filterChange(opts) {\n  var req = {};\n  var hasFilter = opts.filter && typeof opts.filter === 'function';\n  req.query = opts.query_params;\n\n  return function filter(change) {\n    if (!change.doc) {\n      // CSG sends events on the changes feed that don't have documents,\n      // this hack makes a whole lot of existing code robust.\n      change.doc = {};\n    }\n\n    var filterReturn = hasFilter && tryFilter(opts.filter, change.doc, req);\n\n    if (typeof filterReturn === 'object') {\n      return filterReturn;\n    }\n\n    if (filterReturn) {\n      return false;\n    }\n\n    if (!opts.include_docs) {\n      delete change.doc;\n    } else if (!opts.attachments) {\n      for (var att in change.doc._attachments) {\n        /* istanbul ignore else */\n        if (change.doc._attachments.hasOwnProperty(att)) {\n          change.doc._attachments[att].stub = true;\n        }\n      }\n    }\n    return true;\n  };\n}\n\nfunction flatten(arrs) {\n  var res = [];\n  for (var i = 0, len = arrs.length; i < len; i++) {\n    res = res.concat(arrs[i]);\n  }\n  return res;\n}\n\n// Determine id an ID is valid\n//   - invalid IDs begin with an underescore that does not begin '_design' or\n//     '_local'\n//   - any other string value is a valid id\n// Returns the specific error object for each case\nfunction invalidIdError(id) {\n  var err;\n  if (!id) {\n    err = createError(MISSING_ID);\n  } else if (typeof id !== 'string') {\n    err = createError(INVALID_ID);\n  } else if (/^_/.test(id) && !(/^_(design|local)/).test(id)) {\n    err = createError(RESERVED_ID);\n  }\n  if (err) {\n    throw err;\n  }\n}\n\nfunction listenerCount(ee, type) {\n  return 'listenerCount' in ee ? ee.listenerCount(type) :\n                                 events.EventEmitter.listenerCount(ee, type);\n}\n\nfunction parseDesignDocFunctionName(s) {\n  if (!s) {\n    return null;\n  }\n  var parts = s.split('/');\n  if (parts.length === 2) {\n    return parts;\n  }\n  if (parts.length === 1) {\n    return [s, s];\n  }\n  return null;\n}\n\nfunction normalizeDesignDocFunctionName(s) {\n  var normalized = parseDesignDocFunctionName(s);\n  return normalized ? normalized.join('/') : null;\n}\n\n// originally parseUri 1.2.2, now patched by us\n// (c) Steven Levithan <stevenlevithan.com>\n// MIT License\nvar keys = [\"source\", \"protocol\", \"authority\", \"userInfo\", \"user\", \"password\",\n    \"host\", \"port\", \"relative\", \"path\", \"directory\", \"file\", \"query\", \"anchor\"];\nvar qName =\"queryKey\";\nvar qParser = /(?:^|&)([^&=]*)=?([^&]*)/g;\n\n// use the \"loose\" parser\n/* jshint maxlen: false */\nvar parser = /^(?:(?![^:@]+:[^:@\\/]*@)([^:\\/?#.]+):)?(?:\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n\nfunction parseUri(str) {\n  var m = parser.exec(str);\n  var uri = {};\n  var i = 14;\n\n  while (i--) {\n    var key = keys[i];\n    var value = m[i] || \"\";\n    var encoded = ['user', 'password'].indexOf(key) !== -1;\n    uri[key] = encoded ? decodeURIComponent(value) : value;\n  }\n\n  uri[qName] = {};\n  uri[keys[12]].replace(qParser, function ($0, $1, $2) {\n    if ($1) {\n      uri[qName][$1] = $2;\n    }\n  });\n\n  return uri;\n}\n\n// this is essentially the \"update sugar\" function from daleharvey/pouchdb#1388\n// the diffFun tells us what delta to apply to the doc.  it either returns\n// the doc, or false if it doesn't need to do an update after all\nfunction upsert(db, docId, diffFun) {\n  return new PouchPromise(function (fulfill, reject) {\n    db.get(docId, function (err, doc) {\n      if (err) {\n        /* istanbul ignore next */\n        if (err.status !== 404) {\n          return reject(err);\n        }\n        doc = {};\n      }\n\n      // the user might change the _rev, so save it for posterity\n      var docRev = doc._rev;\n      var newDoc = diffFun(doc);\n\n      if (!newDoc) {\n        // if the diffFun returns falsy, we short-circuit as\n        // an optimization\n        return fulfill({updated: false, rev: docRev});\n      }\n\n      // users aren't allowed to modify these values,\n      // so reset them here\n      newDoc._id = docId;\n      newDoc._rev = docRev;\n      fulfill(tryAndPut(db, newDoc, diffFun));\n    });\n  });\n}\n\nfunction tryAndPut(db, doc, diffFun) {\n  return db.put(doc).then(function (res) {\n    return {\n      updated: true,\n      rev: res.rev\n    };\n  }, function (err) {\n    /* istanbul ignore next */\n    if (err.status !== 409) {\n      throw err;\n    }\n    return upsert(db, doc._id, diffFun);\n  });\n}\n\n// BEGIN Math.uuid.js\n\n/*!\nMath.uuid.js (v1.4)\nhttp://www.broofa.com\nmailto:robert@broofa.com\n\nCopyright (c) 2010 Robert Kieffer\nDual licensed under the MIT and GPL licenses.\n*/\n\n/*\n * Generate a random uuid.\n *\n * USAGE: Math.uuid(length, radix)\n *   length - the desired number of characters\n *   radix  - the number of allowable values for each character.\n *\n * EXAMPLES:\n *   // No arguments  - returns RFC4122, version 4 ID\n *   >>> Math.uuid()\n *   \"92329D39-6F5C-4520-ABFC-AAB64544E172\"\n *\n *   // One argument - returns ID of the specified length\n *   >>> Math.uuid(15)     // 15 character ID (default base=62)\n *   \"VcydxgltxrVZSTV\"\n *\n *   // Two arguments - returns ID of the specified length, and radix. \n *   // (Radix must be <= 62)\n *   >>> Math.uuid(8, 2)  // 8 character ID (base=2)\n *   \"01001010\"\n *   >>> Math.uuid(8, 10) // 8 character ID (base=10)\n *   \"47473046\"\n *   >>> Math.uuid(8, 16) // 8 character ID (base=16)\n *   \"098F4D35\"\n */\nvar chars = (\n  '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ' +\n  'abcdefghijklmnopqrstuvwxyz'\n).split('');\nfunction getValue(radix) {\n  return 0 | Math.random() * radix;\n}\nfunction uuid(len, radix) {\n  radix = radix || chars.length;\n  var out = '';\n  var i = -1;\n\n  if (len) {\n    // Compact form\n    while (++i < len) {\n      out += chars[getValue(radix)];\n    }\n    return out;\n  }\n    // rfc4122, version 4 form\n    // Fill in random data.  At i==19 set the high bits of clock sequence as\n    // per rfc4122, sec. 4.1.5\n  while (++i < 36) {\n    switch (i) {\n      case 8:\n      case 13:\n      case 18:\n      case 23:\n        out += '-';\n        break;\n      case 19:\n        out += chars[(getValue(16) & 0x3) | 0x8];\n        break;\n      default:\n        out += chars[getValue(16)];\n    }\n  }\n\n  return out;\n}\n\n// We fetch all leafs of the revision tree, and sort them based on tree length\n// and whether they were deleted, undeleted documents with the longest revision\n// tree (most edits) win\n// The final sort algorithm is slightly documented in a sidebar here:\n// http://guide.couchdb.org/draft/conflicts.html\nfunction winningRev(metadata) {\n  var winningId;\n  var winningPos;\n  var winningDeleted;\n  var toVisit = metadata.rev_tree.slice();\n  var node;\n  while ((node = toVisit.pop())) {\n    var tree = node.ids;\n    var branches = tree[2];\n    var pos = node.pos;\n    if (branches.length) { // non-leaf\n      for (var i = 0, len = branches.length; i < len; i++) {\n        toVisit.push({pos: pos + 1, ids: branches[i]});\n      }\n      continue;\n    }\n    var deleted = !!tree[1].deleted;\n    var id = tree[0];\n    // sort by deleted, then pos, then id\n    if (!winningId || (winningDeleted !== deleted ? winningDeleted :\n        winningPos !== pos ? winningPos < pos : winningId < id)) {\n      winningId = id;\n      winningPos = pos;\n      winningDeleted = deleted;\n    }\n  }\n\n  return winningPos + '-' + winningId;\n}\n\n// Pretty much all below can be combined into a higher order function to\n// traverse revisions\n// The return value from the callback will be passed as context to all\n// children of that node\nfunction traverseRevTree(revs, callback) {\n  var toVisit = revs.slice();\n\n  var node;\n  while ((node = toVisit.pop())) {\n    var pos = node.pos;\n    var tree = node.ids;\n    var branches = tree[2];\n    var newCtx =\n      callback(branches.length === 0, pos, tree[0], node.ctx, tree[1]);\n    for (var i = 0, len = branches.length; i < len; i++) {\n      toVisit.push({pos: pos + 1, ids: branches[i], ctx: newCtx});\n    }\n  }\n}\n\nfunction sortByPos(a, b) {\n  return a.pos - b.pos;\n}\n\nfunction collectLeaves(revs) {\n  var leaves = [];\n  traverseRevTree(revs, function (isLeaf, pos, id, acc, opts) {\n    if (isLeaf) {\n      leaves.push({rev: pos + \"-\" + id, pos: pos, opts: opts});\n    }\n  });\n  leaves.sort(sortByPos).reverse();\n  for (var i = 0, len = leaves.length; i < len; i++) {\n    delete leaves[i].pos;\n  }\n  return leaves;\n}\n\n// returns revs of all conflicts that is leaves such that\n// 1. are not deleted and\n// 2. are different than winning revision\nfunction collectConflicts(metadata) {\n  var win = winningRev(metadata);\n  var leaves = collectLeaves(metadata.rev_tree);\n  var conflicts = [];\n  for (var i = 0, len = leaves.length; i < len; i++) {\n    var leaf = leaves[i];\n    if (leaf.rev !== win && !leaf.opts.deleted) {\n      conflicts.push(leaf.rev);\n    }\n  }\n  return conflicts;\n}\n\n// compact a tree by marking its non-leafs as missing,\n// and return a list of revs to delete\nfunction compactTree(metadata) {\n  var revs = [];\n  traverseRevTree(metadata.rev_tree, function (isLeaf, pos,\n                                               revHash, ctx, opts) {\n    if (opts.status === 'available' && !isLeaf) {\n      revs.push(pos + '-' + revHash);\n      opts.status = 'missing';\n    }\n  });\n  return revs;\n}\n\n// build up a list of all the paths to the leafs in this revision tree\nfunction rootToLeaf(revs) {\n  var paths = [];\n  var toVisit = revs.slice();\n  var node;\n  while ((node = toVisit.pop())) {\n    var pos = node.pos;\n    var tree = node.ids;\n    var id = tree[0];\n    var opts = tree[1];\n    var branches = tree[2];\n    var isLeaf = branches.length === 0;\n\n    var history = node.history ? node.history.slice() : [];\n    history.push({id: id, opts: opts});\n    if (isLeaf) {\n      paths.push({pos: (pos + 1 - history.length), ids: history});\n    }\n    for (var i = 0, len = branches.length; i < len; i++) {\n      toVisit.push({pos: pos + 1, ids: branches[i], history: history});\n    }\n  }\n  return paths.reverse();\n}\n\n// for a better overview of what this is doing, read:\n// https://github.com/apache/couchdb-couch/blob/master/src/couch_key_tree.erl\n//\n// But for a quick intro, CouchDB uses a revision tree to store a documents\n// history, A -> B -> C, when a document has conflicts, that is a branch in the\n// tree, A -> (B1 | B2 -> C), We store these as a nested array in the format\n//\n// KeyTree = [Path ... ]\n// Path = {pos: position_from_root, ids: Tree}\n// Tree = [Key, Opts, [Tree, ...]], in particular single node: [Key, []]\n\nfunction sortByPos$1(a, b) {\n  return a.pos - b.pos;\n}\n\n// classic binary search\nfunction binarySearch(arr, item, comparator) {\n  var low = 0;\n  var high = arr.length;\n  var mid;\n  while (low < high) {\n    mid = (low + high) >>> 1;\n    if (comparator(arr[mid], item) < 0) {\n      low = mid + 1;\n    } else {\n      high = mid;\n    }\n  }\n  return low;\n}\n\n// assuming the arr is sorted, insert the item in the proper place\nfunction insertSorted(arr, item, comparator) {\n  var idx = binarySearch(arr, item, comparator);\n  arr.splice(idx, 0, item);\n}\n\n// Turn a path as a flat array into a tree with a single branch.\n// If any should be stemmed from the beginning of the array, that's passed\n// in as the second argument\nfunction pathToTree(path, numStemmed) {\n  var root;\n  var leaf;\n  for (var i = numStemmed, len = path.length; i < len; i++) {\n    var node = path[i];\n    var currentLeaf = [node.id, node.opts, []];\n    if (leaf) {\n      leaf[2].push(currentLeaf);\n      leaf = currentLeaf;\n    } else {\n      root = leaf = currentLeaf;\n    }\n  }\n  return root;\n}\n\n// compare the IDs of two trees\nfunction compareTree(a, b) {\n  return a[0] < b[0] ? -1 : 1;\n}\n\n// Merge two trees together\n// The roots of tree1 and tree2 must be the same revision\nfunction mergeTree(in_tree1, in_tree2) {\n  var queue = [{tree1: in_tree1, tree2: in_tree2}];\n  var conflicts = false;\n  while (queue.length > 0) {\n    var item = queue.pop();\n    var tree1 = item.tree1;\n    var tree2 = item.tree2;\n\n    if (tree1[1].status || tree2[1].status) {\n      tree1[1].status =\n        (tree1[1].status ===  'available' ||\n        tree2[1].status === 'available') ? 'available' : 'missing';\n    }\n\n    for (var i = 0; i < tree2[2].length; i++) {\n      if (!tree1[2][0]) {\n        conflicts = 'new_leaf';\n        tree1[2][0] = tree2[2][i];\n        continue;\n      }\n\n      var merged = false;\n      for (var j = 0; j < tree1[2].length; j++) {\n        if (tree1[2][j][0] === tree2[2][i][0]) {\n          queue.push({tree1: tree1[2][j], tree2: tree2[2][i]});\n          merged = true;\n        }\n      }\n      if (!merged) {\n        conflicts = 'new_branch';\n        insertSorted(tree1[2], tree2[2][i], compareTree);\n      }\n    }\n  }\n  return {conflicts: conflicts, tree: in_tree1};\n}\n\nfunction doMerge(tree, path, dontExpand) {\n  var restree = [];\n  var conflicts = false;\n  var merged = false;\n  var res;\n\n  if (!tree.length) {\n    return {tree: [path], conflicts: 'new_leaf'};\n  }\n\n  for (var i = 0, len = tree.length; i < len; i++) {\n    var branch = tree[i];\n    if (branch.pos === path.pos && branch.ids[0] === path.ids[0]) {\n      // Paths start at the same position and have the same root, so they need\n      // merged\n      res = mergeTree(branch.ids, path.ids);\n      restree.push({pos: branch.pos, ids: res.tree});\n      conflicts = conflicts || res.conflicts;\n      merged = true;\n    } else if (dontExpand !== true) {\n      // The paths start at a different position, take the earliest path and\n      // traverse up until it as at the same point from root as the path we\n      // want to merge.  If the keys match we return the longer path with the\n      // other merged After stemming we dont want to expand the trees\n\n      var t1 = branch.pos < path.pos ? branch : path;\n      var t2 = branch.pos < path.pos ? path : branch;\n      var diff = t2.pos - t1.pos;\n\n      var candidateParents = [];\n\n      var trees = [];\n      trees.push({ids: t1.ids, diff: diff, parent: null, parentIdx: null});\n      while (trees.length > 0) {\n        var item = trees.pop();\n        if (item.diff === 0) {\n          if (item.ids[0] === t2.ids[0]) {\n            candidateParents.push(item);\n          }\n          continue;\n        }\n        var elements = item.ids[2];\n        for (var j = 0, elementsLen = elements.length; j < elementsLen; j++) {\n          trees.push({\n            ids: elements[j],\n            diff: item.diff - 1,\n            parent: item.ids,\n            parentIdx: j\n          });\n        }\n      }\n\n      var el = candidateParents[0];\n\n      if (!el) {\n        restree.push(branch);\n      } else {\n        res = mergeTree(el.ids, t2.ids);\n        el.parent[2][el.parentIdx] = res.tree;\n        restree.push({pos: t1.pos, ids: t1.ids});\n        conflicts = conflicts || res.conflicts;\n        merged = true;\n      }\n    } else {\n      restree.push(branch);\n    }\n  }\n\n  // We didnt find\n  if (!merged) {\n    restree.push(path);\n  }\n\n  restree.sort(sortByPos$1);\n\n  return {\n    tree: restree,\n    conflicts: conflicts || 'internal_node'\n  };\n}\n\n// To ensure we dont grow the revision tree infinitely, we stem old revisions\nfunction stem(tree, depth) {\n  // First we break out the tree into a complete list of root to leaf paths\n  var paths = rootToLeaf(tree);\n  var maybeStem = {};\n\n  var result;\n  for (var i = 0, len = paths.length; i < len; i++) {\n    // Then for each path, we cut off the start of the path based on the\n    // `depth` to stem to, and generate a new set of flat trees\n    var path = paths[i];\n    var stemmed = path.ids;\n    var numStemmed = Math.max(0, stemmed.length - depth);\n    var stemmedNode = {\n      pos: path.pos + numStemmed,\n      ids: pathToTree(stemmed, numStemmed)\n    };\n\n    for (var s = 0; s < numStemmed; s++) {\n      var rev = (path.pos + s) + '-' + stemmed[s].id;\n      maybeStem[rev] = true;\n    }\n\n    // Then we remerge all those flat trees together, ensuring that we dont\n    // connect trees that would go beyond the depth limit\n    if (result) {\n      result = doMerge(result, stemmedNode, true).tree;\n    } else {\n      result = [stemmedNode];\n    }\n  }\n\n  traverseRevTree(result, function (isLeaf, pos, revHash) {\n    // some revisions may have been removed in a branch but not in another\n    delete maybeStem[pos + '-' + revHash];\n  });\n\n  return {\n    tree: result,\n    revs: Object.keys(maybeStem)\n  };\n}\n\nfunction merge(tree, path, depth) {\n  var newTree = doMerge(tree, path);\n  var stemmed = stem(newTree.tree, depth);\n  return {\n    tree: stemmed.tree,\n    stemmedRevs: stemmed.revs,\n    conflicts: newTree.conflicts\n  };\n}\n\n// return true if a rev exists in the rev tree, false otherwise\nfunction revExists(revs, rev) {\n  var toVisit = revs.slice();\n  var splitRev = rev.split('-');\n  var targetPos = parseInt(splitRev[0], 10);\n  var targetId = splitRev[1];\n\n  var node;\n  while ((node = toVisit.pop())) {\n    if (node.pos === targetPos && node.ids[0] === targetId) {\n      return true;\n    }\n    var branches = node.ids[2];\n    for (var i = 0, len = branches.length; i < len; i++) {\n      toVisit.push({pos: node.pos + 1, ids: branches[i]});\n    }\n  }\n  return false;\n}\n\nfunction getTrees(node) {\n  return node.ids;\n}\n\n// check if a specific revision of a doc has been deleted\n//  - metadata: the metadata object from the doc store\n//  - rev: (optional) the revision to check. defaults to winning revision\nfunction isDeleted(metadata, rev) {\n  if (!rev) {\n    rev = winningRev(metadata);\n  }\n  var id = rev.substring(rev.indexOf('-') + 1);\n  var toVisit = metadata.rev_tree.map(getTrees);\n\n  var tree;\n  while ((tree = toVisit.pop())) {\n    if (tree[0] === id) {\n      return !!tree[1].deleted;\n    }\n    toVisit = toVisit.concat(tree[2]);\n  }\n}\n\nfunction isLocalId(id) {\n  return (/^_local/).test(id);\n}\n\nfunction evalFilter(input) {\n  return scopedEval('\"use strict\";\\nreturn ' + input + ';', {});\n}\n\nfunction evalView(input) {\n  var code = [\n    'return function(doc) {',\n    '  \"use strict\";',\n    '  var emitted = false;',\n    '  var emit = function (a, b) {',\n    '    emitted = true;',\n    '  };',\n    '  var view = ' + input + ';',\n    '  view(doc);',\n    '  if (emitted) {',\n    '    return true;',\n    '  }',\n    '};'\n  ].join('\\n');\n\n  return scopedEval(code, {});\n}\n\ninherits(Changes, events.EventEmitter);\n\nfunction tryCatchInChangeListener(self, change) {\n  // isolate try/catches to avoid V8 deoptimizations\n  try {\n    self.emit('change', change);\n  } catch (e) {\n    guardedConsole('error', 'Error in .on(\"change\", function):', e);\n  }\n}\n\nfunction Changes(db, opts, callback) {\n  events.EventEmitter.call(this);\n  var self = this;\n  this.db = db;\n  opts = opts ? clone(opts) : {};\n  var complete = opts.complete = once(function (err, resp) {\n    if (err) {\n      if (listenerCount(self, 'error') > 0) {\n        self.emit('error', err);\n      }\n    } else {\n      self.emit('complete', resp);\n    }\n    self.removeAllListeners();\n    db.removeListener('destroyed', onDestroy);\n  });\n  if (callback) {\n    self.on('complete', function (resp) {\n      callback(null, resp);\n    });\n    self.on('error', callback);\n  }\n  function onDestroy() {\n    self.cancel();\n  }\n  db.once('destroyed', onDestroy);\n\n  opts.onChange = function (change) {\n    /* istanbul ignore if */\n    if (opts.isCancelled) {\n      return;\n    }\n    tryCatchInChangeListener(self, change);\n  };\n\n  var promise = new PouchPromise(function (fulfill, reject) {\n    opts.complete = function (err, res) {\n      if (err) {\n        reject(err);\n      } else {\n        fulfill(res);\n      }\n    };\n  });\n  self.once('cancel', function () {\n    db.removeListener('destroyed', onDestroy);\n    opts.complete(null, {status: 'cancelled'});\n  });\n  this.then = promise.then.bind(promise);\n  this['catch'] = promise['catch'].bind(promise);\n  this.then(function (result) {\n    complete(null, result);\n  }, complete);\n\n\n\n  if (!db.taskqueue.isReady) {\n    db.taskqueue.addTask(function (failed) {\n      if (failed) {\n        opts.complete(failed);\n      } else if (self.isCancelled) {\n        self.emit('cancel');\n      } else {\n        self.doChanges(opts);\n      }\n    });\n  } else {\n    self.doChanges(opts);\n  }\n}\nChanges.prototype.cancel = function () {\n  this.isCancelled = true;\n  if (this.db.taskqueue.isReady) {\n    this.emit('cancel');\n  }\n};\nfunction processChange(doc, metadata, opts) {\n  var changeList = [{rev: doc._rev}];\n  if (opts.style === 'all_docs') {\n    changeList = collectLeaves(metadata.rev_tree)\n    .map(function (x) { return {rev: x.rev}; });\n  }\n  var change = {\n    id: metadata.id,\n    changes: changeList,\n    doc: doc\n  };\n\n  if (isDeleted(metadata, doc._rev)) {\n    change.deleted = true;\n  }\n  if (opts.conflicts) {\n    change.doc._conflicts = collectConflicts(metadata);\n    if (!change.doc._conflicts.length) {\n      delete change.doc._conflicts;\n    }\n  }\n  return change;\n}\n\nChanges.prototype.doChanges = function (opts) {\n  var self = this;\n  var callback = opts.complete;\n\n  opts = clone(opts);\n  if ('live' in opts && !('continuous' in opts)) {\n    opts.continuous = opts.live;\n  }\n  opts.processChange = processChange;\n\n  if (opts.since === 'latest') {\n    opts.since = 'now';\n  }\n  if (!opts.since) {\n    opts.since = 0;\n  }\n  if (opts.since === 'now') {\n    this.db.info().then(function (info) {\n      /* istanbul ignore if */\n      if (self.isCancelled) {\n        callback(null, {status: 'cancelled'});\n        return;\n      }\n      opts.since = info.update_seq;\n      self.doChanges(opts);\n    }, callback);\n    return;\n  }\n\n\n  if (opts.view && !opts.filter) {\n    opts.filter = '_view';\n  }\n\n  if (opts.filter && typeof opts.filter === 'string') {\n    if (opts.filter === '_view') {\n      opts.view = normalizeDesignDocFunctionName(opts.view);\n    } else {\n      opts.filter = normalizeDesignDocFunctionName(opts.filter);\n    }\n\n    if (this.db.type() !== 'http' && !opts.doc_ids) {\n      return this.filterChanges(opts);\n    }\n  }\n\n  if (!('descending' in opts)) {\n    opts.descending = false;\n  }\n\n  // 0 and 1 should return 1 document\n  opts.limit = opts.limit === 0 ? 1 : opts.limit;\n  opts.complete = callback;\n  var newPromise = this.db._changes(opts);\n  /* istanbul ignore else */\n  if (newPromise && typeof newPromise.cancel === 'function') {\n    var cancel = self.cancel;\n    self.cancel = getArguments(function (args) {\n      newPromise.cancel();\n      cancel.apply(this, args);\n    });\n  }\n};\n\nChanges.prototype.filterChanges = function (opts) {\n  var self = this;\n  var callback = opts.complete;\n  if (opts.filter === '_view') {\n    if (!opts.view || typeof opts.view !== 'string') {\n      var err = createError(BAD_REQUEST,\n        '`view` filter parameter not found or invalid.');\n      return callback(err);\n    }\n    // fetch a view from a design doc, make it behave like a filter\n    var viewName = parseDesignDocFunctionName(opts.view);\n    this.db.get('_design/' + viewName[0], function (err, ddoc) {\n      /* istanbul ignore if */\n      if (self.isCancelled) {\n        return callback(null, {status: 'cancelled'});\n      }\n      /* istanbul ignore next */\n      if (err) {\n        return callback(generateErrorFromResponse(err));\n      }\n      var mapFun = ddoc && ddoc.views && ddoc.views[viewName[1]] &&\n        ddoc.views[viewName[1]].map;\n      if (!mapFun) {\n        return callback(createError(MISSING_DOC,\n          (ddoc.views ? 'missing json key: ' + viewName[1] :\n            'missing json key: views')));\n      }\n      opts.filter = evalView(mapFun);\n      self.doChanges(opts);\n    });\n  } else {\n    // fetch a filter from a design doc\n    var filterName = parseDesignDocFunctionName(opts.filter);\n    if (!filterName) {\n      return self.doChanges(opts);\n    }\n    this.db.get('_design/' + filterName[0], function (err, ddoc) {\n      /* istanbul ignore if */\n      if (self.isCancelled) {\n        return callback(null, {status: 'cancelled'});\n      }\n      /* istanbul ignore next */\n      if (err) {\n        return callback(generateErrorFromResponse(err));\n      }\n      var filterFun = ddoc && ddoc.filters && ddoc.filters[filterName[1]];\n      if (!filterFun) {\n        return callback(createError(MISSING_DOC,\n          ((ddoc && ddoc.filters) ? 'missing json key: ' + filterName[1]\n            : 'missing json key: filters')));\n      }\n      opts.filter = evalFilter(filterFun);\n      self.doChanges(opts);\n    });\n  }\n};\n\n/*\n * A generic pouch adapter\n */\n\nfunction compare(left, right) {\n  return left < right ? -1 : left > right ? 1 : 0;\n}\n\n// returns first element of arr satisfying callback predicate\nfunction arrayFirst(arr, callback) {\n  for (var i = 0; i < arr.length; i++) {\n    if (callback(arr[i], i) === true) {\n      return arr[i];\n    }\n  }\n}\n\n// Wrapper for functions that call the bulkdocs api with a single doc,\n// if the first result is an error, return an error\nfunction yankError(callback) {\n  return function (err, results) {\n    if (err || (results[0] && results[0].error)) {\n      callback(err || results[0]);\n    } else {\n      callback(null, results.length ? results[0]  : results);\n    }\n  };\n}\n\n// clean docs given to us by the user\nfunction cleanDocs(docs) {\n  for (var i = 0; i < docs.length; i++) {\n    var doc = docs[i];\n    if (doc._deleted) {\n      delete doc._attachments; // ignore atts for deleted docs\n    } else if (doc._attachments) {\n      // filter out extraneous keys from _attachments\n      var atts = Object.keys(doc._attachments);\n      for (var j = 0; j < atts.length; j++) {\n        var att = atts[j];\n        doc._attachments[att] = pick(doc._attachments[att],\n          ['data', 'digest', 'content_type', 'length', 'revpos', 'stub']);\n      }\n    }\n  }\n}\n\n// compare two docs, first by _id then by _rev\nfunction compareByIdThenRev(a, b) {\n  var idCompare = compare(a._id, b._id);\n  if (idCompare !== 0) {\n    return idCompare;\n  }\n  var aStart = a._revisions ? a._revisions.start : 0;\n  var bStart = b._revisions ? b._revisions.start : 0;\n  return compare(aStart, bStart);\n}\n\n// for every node in a revision tree computes its distance from the closest\n// leaf\nfunction computeHeight(revs) {\n  var height = {};\n  var edges = [];\n  traverseRevTree(revs, function (isLeaf, pos, id, prnt) {\n    var rev = pos + \"-\" + id;\n    if (isLeaf) {\n      height[rev] = 0;\n    }\n    if (prnt !== undefined) {\n      edges.push({from: prnt, to: rev});\n    }\n    return rev;\n  });\n\n  edges.reverse();\n  edges.forEach(function (edge) {\n    if (height[edge.from] === undefined) {\n      height[edge.from] = 1 + height[edge.to];\n    } else {\n      height[edge.from] = Math.min(height[edge.from], 1 + height[edge.to]);\n    }\n  });\n  return height;\n}\n\nfunction allDocsKeysQuery(api, opts, callback) {\n  var keys =  ('limit' in opts) ?\n      opts.keys.slice(opts.skip, opts.limit + opts.skip) :\n      (opts.skip > 0) ? opts.keys.slice(opts.skip) : opts.keys;\n  if (opts.descending) {\n    keys.reverse();\n  }\n  if (!keys.length) {\n    return api._allDocs({limit: 0}, callback);\n  }\n  var finalResults = {\n    offset: opts.skip\n  };\n  return PouchPromise.all(keys.map(function (key) {\n    var subOpts = jsExtend.extend({key: key, deleted: 'ok'}, opts);\n    ['limit', 'skip', 'keys'].forEach(function (optKey) {\n      delete subOpts[optKey];\n    });\n    return new PouchPromise(function (resolve, reject) {\n      api._allDocs(subOpts, function (err, res) {\n        /* istanbul ignore if */\n        if (err) {\n          return reject(err);\n        }\n        finalResults.total_rows = res.total_rows;\n        resolve(res.rows[0] || {key: key, error: 'not_found'});\n      });\n    });\n  })).then(function (results) {\n    finalResults.rows = results;\n    return finalResults;\n  });\n}\n\n// all compaction is done in a queue, to avoid attaching\n// too many listeners at once\nfunction doNextCompaction(self) {\n  var task = self._compactionQueue[0];\n  var opts = task.opts;\n  var callback = task.callback;\n  self.get('_local/compaction').catch(function () {\n    return false;\n  }).then(function (doc) {\n    if (doc && doc.last_seq) {\n      opts.last_seq = doc.last_seq;\n    }\n    self._compact(opts, function (err, res) {\n      /* istanbul ignore if */\n      if (err) {\n        callback(err);\n      } else {\n        callback(null, res);\n      }\n      process.nextTick(function () {\n        self._compactionQueue.shift();\n        if (self._compactionQueue.length) {\n          doNextCompaction(self);\n        }\n      });\n    });\n  });\n}\n\nfunction attachmentNameError(name) {\n  if (name.charAt(0) === '_') {\n    return name + 'is not a valid attachment name, attachment ' +\n      'names cannot start with \\'_\\'';\n  }\n  return false;\n}\n\ninherits(AbstractPouchDB, events.EventEmitter);\n\nfunction AbstractPouchDB() {\n  events.EventEmitter.call(this);\n}\n\nAbstractPouchDB.prototype.post =\n  adapterFun('post', function (doc, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  if (typeof doc !== 'object' || Array.isArray(doc)) {\n    return callback(createError(NOT_AN_OBJECT));\n  }\n  this.bulkDocs({docs: [doc]}, opts, yankError(callback));\n});\n\nAbstractPouchDB.prototype.put = adapterFun('put', function (doc, opts, cb) {\n  if (typeof opts === 'function') {\n    cb = opts;\n    opts = {};\n  }\n  if (typeof doc !== 'object' || Array.isArray(doc)) {\n    return cb(createError(NOT_AN_OBJECT));\n  }\n  invalidIdError(doc._id);\n  if (isLocalId(doc._id) && typeof this._putLocal === 'function') {\n    if (doc._deleted) {\n      return this._removeLocal(doc, cb);\n    } else {\n      return this._putLocal(doc, cb);\n    }\n  }\n  if (typeof this._put === 'function' && opts.new_edits !== false) {\n    this._put(doc, opts, cb);\n  } else {\n    this.bulkDocs({docs: [doc]}, opts, yankError(cb));\n  }\n});\n\nAbstractPouchDB.prototype.putAttachment =\n  adapterFun('putAttachment', function (docId, attachmentId, rev,\n                                              blob, type) {\n  var api = this;\n  if (typeof type === 'function') {\n    type = blob;\n    blob = rev;\n    rev = null;\n  }\n  // Lets fix in https://github.com/pouchdb/pouchdb/issues/3267\n  /* istanbul ignore if */\n  if (typeof type === 'undefined') {\n    type = blob;\n    blob = rev;\n    rev = null;\n  }\n\n  function createAttachment(doc) {\n    var prevrevpos = '_rev' in doc ? parseInt(doc._rev, 10) : 0;\n    doc._attachments = doc._attachments || {};\n    doc._attachments[attachmentId] = {\n      content_type: type,\n      data: blob,\n      revpos: ++prevrevpos\n    };\n    return api.put(doc);\n  }\n\n  return api.get(docId).then(function (doc) {\n    if (doc._rev !== rev) {\n      throw createError(REV_CONFLICT);\n    }\n\n    return createAttachment(doc);\n  }, function (err) {\n     // create new doc\n    /* istanbul ignore else */\n    if (err.reason === MISSING_DOC.message) {\n      return createAttachment({_id: docId});\n    } else {\n      throw err;\n    }\n  });\n});\n\nAbstractPouchDB.prototype.removeAttachment =\n  adapterFun('removeAttachment', function (docId, attachmentId, rev,\n                                                 callback) {\n  var self = this;\n  self.get(docId, function (err, obj) {\n    /* istanbul ignore if */\n    if (err) {\n      callback(err);\n      return;\n    }\n    if (obj._rev !== rev) {\n      callback(createError(REV_CONFLICT));\n      return;\n    }\n    /* istanbul ignore if */\n    if (!obj._attachments) {\n      return callback();\n    }\n    delete obj._attachments[attachmentId];\n    if (Object.keys(obj._attachments).length === 0) {\n      delete obj._attachments;\n    }\n    self.put(obj, callback);\n  });\n});\n\nAbstractPouchDB.prototype.remove =\n  adapterFun('remove', function (docOrId, optsOrRev, opts, callback) {\n  var doc;\n  if (typeof optsOrRev === 'string') {\n    // id, rev, opts, callback style\n    doc = {\n      _id: docOrId,\n      _rev: optsOrRev\n    };\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n  } else {\n    // doc, opts, callback style\n    doc = docOrId;\n    if (typeof optsOrRev === 'function') {\n      callback = optsOrRev;\n      opts = {};\n    } else {\n      callback = opts;\n      opts = optsOrRev;\n    }\n  }\n  opts = opts || {};\n  opts.was_delete = true;\n  var newDoc = {_id: doc._id, _rev: (doc._rev || opts.rev)};\n  newDoc._deleted = true;\n  if (isLocalId(newDoc._id) && typeof this._removeLocal === 'function') {\n    return this._removeLocal(doc, callback);\n  }\n  this.bulkDocs({docs: [newDoc]}, opts, yankError(callback));\n});\n\nAbstractPouchDB.prototype.revsDiff =\n  adapterFun('revsDiff', function (req, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  var ids = Object.keys(req);\n\n  if (!ids.length) {\n    return callback(null, {});\n  }\n\n  var count = 0;\n  var missing = new _Map();\n\n  function addToMissing(id, revId) {\n    if (!missing.has(id)) {\n      missing.set(id, {missing: []});\n    }\n    missing.get(id).missing.push(revId);\n  }\n\n  function processDoc(id, rev_tree) {\n    // Is this fast enough? Maybe we should switch to a set simulated by a map\n    var missingForId = req[id].slice(0);\n    traverseRevTree(rev_tree, function (isLeaf, pos, revHash, ctx,\n      opts) {\n        var rev = pos + '-' + revHash;\n        var idx = missingForId.indexOf(rev);\n        if (idx === -1) {\n          return;\n        }\n\n        missingForId.splice(idx, 1);\n        /* istanbul ignore if */\n        if (opts.status !== 'available') {\n          addToMissing(id, rev);\n        }\n      });\n\n    // Traversing the tree is synchronous, so now `missingForId` contains\n    // revisions that were not found in the tree\n    missingForId.forEach(function (rev) {\n      addToMissing(id, rev);\n    });\n  }\n\n  ids.map(function (id) {\n    this._getRevisionTree(id, function (err, rev_tree) {\n      if (err && err.status === 404 && err.message === 'missing') {\n        missing.set(id, {missing: req[id]});\n      } else if (err) {\n        /* istanbul ignore next */\n        return callback(err);\n      } else {\n        processDoc(id, rev_tree);\n      }\n\n      if (++count === ids.length) {\n        // convert LazyMap to object\n        var missingObj = {};\n        missing.forEach(function (value, key) {\n          missingObj[key] = value;\n        });\n        return callback(null, missingObj);\n      }\n    });\n  }, this);\n});\n\n// _bulk_get API for faster replication, as described in\n// https://github.com/apache/couchdb-chttpd/pull/33\n// At the \"abstract\" level, it will just run multiple get()s in\n// parallel, because this isn't much of a performance cost\n// for local databases (except the cost of multiple transactions, which is\n// small). The http adapter overrides this in order\n// to do a more efficient single HTTP request.\nAbstractPouchDB.prototype.bulkGet =\n  adapterFun('bulkGet', function (opts, callback) {\n  bulkGet(this, opts, callback);\n});\n\n// compact one document and fire callback\n// by compacting we mean removing all revisions which\n// are further from the leaf in revision tree than max_height\nAbstractPouchDB.prototype.compactDocument =\n  adapterFun('compactDocument', function (docId, maxHeight, callback) {\n  var self = this;\n  this._getRevisionTree(docId, function (err, revTree) {\n    /* istanbul ignore if */\n    if (err) {\n      return callback(err);\n    }\n    var height = computeHeight(revTree);\n    var candidates = [];\n    var revs = [];\n    Object.keys(height).forEach(function (rev) {\n      if (height[rev] > maxHeight) {\n        candidates.push(rev);\n      }\n    });\n\n    traverseRevTree(revTree, function (isLeaf, pos, revHash, ctx, opts) {\n      var rev = pos + '-' + revHash;\n      if (opts.status === 'available' && candidates.indexOf(rev) !== -1) {\n        revs.push(rev);\n      }\n    });\n    self._doCompaction(docId, revs, callback);\n  });\n});\n\n// compact the whole database using single document\n// compaction\nAbstractPouchDB.prototype.compact =\n  adapterFun('compact', function (opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n\n  var self = this;\n  opts = opts || {};\n\n  self._compactionQueue = self._compactionQueue || [];\n  self._compactionQueue.push({opts: opts, callback: callback});\n  if (self._compactionQueue.length === 1) {\n    doNextCompaction(self);\n  }\n});\nAbstractPouchDB.prototype._compact = function (opts, callback) {\n  var self = this;\n  var changesOpts = {\n    return_docs: false,\n    last_seq: opts.last_seq || 0\n  };\n  var promises = [];\n\n  function onChange(row) {\n    promises.push(self.compactDocument(row.id, 0));\n  }\n  function onComplete(resp) {\n    var lastSeq = resp.last_seq;\n    PouchPromise.all(promises).then(function () {\n      return upsert(self, '_local/compaction', function deltaFunc(doc) {\n        if (!doc.last_seq || doc.last_seq < lastSeq) {\n          doc.last_seq = lastSeq;\n          return doc;\n        }\n        return false; // somebody else got here first, don't update\n      });\n    }).then(function () {\n      callback(null, {ok: true});\n    }).catch(callback);\n  }\n  self.changes(changesOpts)\n    .on('change', onChange)\n    .on('complete', onComplete)\n    .on('error', callback);\n};\n\n/* Begin api wrappers. Specific functionality to storage belongs in the\n   _[method] */\nAbstractPouchDB.prototype.get = adapterFun('get', function (id, opts, cb) {\n  if (typeof opts === 'function') {\n    cb = opts;\n    opts = {};\n  }\n  if (typeof id !== 'string') {\n    return cb(createError(INVALID_ID));\n  }\n  if (isLocalId(id) && typeof this._getLocal === 'function') {\n    return this._getLocal(id, cb);\n  }\n  var leaves = [], self = this;\n\n  function finishOpenRevs() {\n    var result = [];\n    var count = leaves.length;\n    /* istanbul ignore if */\n    if (!count) {\n      return cb(null, result);\n    }\n    // order with open_revs is unspecified\n    leaves.forEach(function (leaf) {\n      self.get(id, {\n        rev: leaf,\n        revs: opts.revs,\n        attachments: opts.attachments\n      }, function (err, doc) {\n        if (!err) {\n          result.push({ok: doc});\n        } else {\n          result.push({missing: leaf});\n        }\n        count--;\n        if (!count) {\n          cb(null, result);\n        }\n      });\n    });\n  }\n\n  if (opts.open_revs) {\n    if (opts.open_revs === \"all\") {\n      this._getRevisionTree(id, function (err, rev_tree) {\n        if (err) {\n          return cb(err);\n        }\n        leaves = collectLeaves(rev_tree).map(function (leaf) {\n          return leaf.rev;\n        });\n        finishOpenRevs();\n      });\n    } else {\n      if (Array.isArray(opts.open_revs)) {\n        leaves = opts.open_revs;\n        for (var i = 0; i < leaves.length; i++) {\n          var l = leaves[i];\n          // looks like it's the only thing couchdb checks\n          if (!(typeof (l) === \"string\" && /^\\d+-/.test(l))) {\n            return cb(createError(INVALID_REV));\n          }\n        }\n        finishOpenRevs();\n      } else {\n        return cb(createError(UNKNOWN_ERROR, 'function_clause'));\n      }\n    }\n    return; // open_revs does not like other options\n  }\n\n  return this._get(id, opts, function (err, result) {\n    if (err) {\n      return cb(err);\n    }\n\n    var doc = result.doc;\n    var metadata = result.metadata;\n    var ctx = result.ctx;\n\n    if (opts.conflicts) {\n      var conflicts = collectConflicts(metadata);\n      if (conflicts.length) {\n        doc._conflicts = conflicts;\n      }\n    }\n\n    if (isDeleted(metadata, doc._rev)) {\n      doc._deleted = true;\n    }\n\n    if (opts.revs || opts.revs_info) {\n      var paths = rootToLeaf(metadata.rev_tree);\n      var path = arrayFirst(paths, function (arr) {\n        return arr.ids.map(function (x) { return x.id; })\n          .indexOf(doc._rev.split('-')[1]) !== -1;\n      });\n\n      var indexOfRev = path.ids.map(function (x) {return x.id; })\n        .indexOf(doc._rev.split('-')[1]) + 1;\n      var howMany = path.ids.length - indexOfRev;\n      path.ids.splice(indexOfRev, howMany);\n      path.ids.reverse();\n\n      if (opts.revs) {\n        doc._revisions = {\n          start: (path.pos + path.ids.length) - 1,\n          ids: path.ids.map(function (rev) {\n            return rev.id;\n          })\n        };\n      }\n      if (opts.revs_info) {\n        var pos =  path.pos + path.ids.length;\n        doc._revs_info = path.ids.map(function (rev) {\n          pos--;\n          return {\n            rev: pos + '-' + rev.id,\n            status: rev.opts.status\n          };\n        });\n      }\n    }\n\n    if (opts.attachments && doc._attachments) {\n      var attachments = doc._attachments;\n      var count = Object.keys(attachments).length;\n      if (count === 0) {\n        return cb(null, doc);\n      }\n      Object.keys(attachments).forEach(function (key) {\n        this._getAttachment(doc._id, key, attachments[key], {\n          // Previously the revision handling was done in adapter.js\n          // getAttachment, however since idb-next doesnt we need to\n          // pass the rev through\n          rev: doc._rev,\n          binary: opts.binary,\n          ctx: ctx\n        }, function (err, data) {\n          var att = doc._attachments[key];\n          att.data = data;\n          delete att.stub;\n          delete att.length;\n          if (!--count) {\n            cb(null, doc);\n          }\n        });\n      }, self);\n    } else {\n      if (doc._attachments) {\n        for (var key in doc._attachments) {\n          /* istanbul ignore else */\n          if (doc._attachments.hasOwnProperty(key)) {\n            doc._attachments[key].stub = true;\n          }\n        }\n      }\n      cb(null, doc);\n    }\n  });\n});\n\n// TODO: I dont like this, it forces an extra read for every\n// attachment read and enforces a confusing api between\n// adapter.js and the adapter implementation\nAbstractPouchDB.prototype.getAttachment =\n  adapterFun('getAttachment', function (docId, attachmentId, opts, callback) {\n  var self = this;\n  if (opts instanceof Function) {\n    callback = opts;\n    opts = {};\n  }\n  this._get(docId, opts, function (err, res) {\n    if (err) {\n      return callback(err);\n    }\n    if (res.doc._attachments && res.doc._attachments[attachmentId]) {\n      opts.ctx = res.ctx;\n      opts.binary = true;\n      self._getAttachment(docId, attachmentId,\n                          res.doc._attachments[attachmentId], opts, callback);\n    } else {\n      return callback(createError(MISSING_DOC));\n    }\n  });\n});\n\nAbstractPouchDB.prototype.allDocs =\n  adapterFun('allDocs', function (opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  opts.skip = typeof opts.skip !== 'undefined' ? opts.skip : 0;\n  if (opts.start_key) {\n    opts.startkey = opts.start_key;\n  }\n  if (opts.end_key) {\n    opts.endkey = opts.end_key;\n  }\n  if ('keys' in opts) {\n    if (!Array.isArray(opts.keys)) {\n      return callback(new TypeError('options.keys must be an array'));\n    }\n    var incompatibleOpt =\n      ['startkey', 'endkey', 'key'].filter(function (incompatibleOpt) {\n      return incompatibleOpt in opts;\n    })[0];\n    if (incompatibleOpt) {\n      callback(createError(QUERY_PARSE_ERROR,\n        'Query parameter `' + incompatibleOpt +\n        '` is not compatible with multi-get'\n      ));\n      return;\n    }\n    if (this.type() !== 'http') {\n      return allDocsKeysQuery(this, opts, callback);\n    }\n  }\n\n  return this._allDocs(opts, callback);\n});\n\nAbstractPouchDB.prototype.changes = function (opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  return new Changes(this, opts, callback);\n};\n\nAbstractPouchDB.prototype.close = adapterFun('close', function (callback) {\n  this._closed = true;\n  return this._close(callback);\n});\n\nAbstractPouchDB.prototype.info = adapterFun('info', function (callback) {\n  var self = this;\n  this._info(function (err, info) {\n    if (err) {\n      return callback(err);\n    }\n    // assume we know better than the adapter, unless it informs us\n    info.db_name = info.db_name || self.name;\n    info.auto_compaction = !!(self.auto_compaction && self.type() !== 'http');\n    info.adapter = self.type();\n    callback(null, info);\n  });\n});\n\nAbstractPouchDB.prototype.id = adapterFun('id', function (callback) {\n  return this._id(callback);\n});\n\n/* istanbul ignore next */\nAbstractPouchDB.prototype.type = function () {\n  return (typeof this._type === 'function') ? this._type() : this.adapter;\n};\n\nAbstractPouchDB.prototype.bulkDocs =\n  adapterFun('bulkDocs', function (req, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n\n  opts = opts || {};\n\n  if (Array.isArray(req)) {\n    req = {\n      docs: req\n    };\n  }\n\n  if (!req || !req.docs || !Array.isArray(req.docs)) {\n    return callback(createError(MISSING_BULK_DOCS));\n  }\n\n  for (var i = 0; i < req.docs.length; ++i) {\n    if (typeof req.docs[i] !== 'object' || Array.isArray(req.docs[i])) {\n      return callback(createError(NOT_AN_OBJECT));\n    }\n  }\n\n  var attachmentError;\n  req.docs.forEach(function (doc) {\n    if (doc._attachments) {\n      Object.keys(doc._attachments).forEach(function (name) {\n        attachmentError = attachmentError || attachmentNameError(name);\n      });\n    }\n  });\n\n  if (attachmentError) {\n    return callback(createError(BAD_REQUEST, attachmentError));\n  }\n\n  if (!('new_edits' in opts)) {\n    if ('new_edits' in req) {\n      opts.new_edits = req.new_edits;\n    } else {\n      opts.new_edits = true;\n    }\n  }\n\n  if (!opts.new_edits && this.type() !== 'http') {\n    // ensure revisions of the same doc are sorted, so that\n    // the local adapter processes them correctly (#2935)\n    req.docs.sort(compareByIdThenRev);\n  }\n\n  cleanDocs(req.docs);\n\n  return this._bulkDocs(req, opts, function (err, res) {\n    if (err) {\n      return callback(err);\n    }\n    if (!opts.new_edits) {\n      // this is what couch does when new_edits is false\n      res = res.filter(function (x) {\n        return x.error;\n      });\n    }\n    callback(null, res);\n  });\n});\n\nAbstractPouchDB.prototype.registerDependentDatabase =\n  adapterFun('registerDependentDatabase', function (dependentDb,\n                                                          callback) {\n  var depDB = new this.constructor(dependentDb, this.__opts);\n\n  function diffFun(doc) {\n    doc.dependentDbs = doc.dependentDbs || {};\n    if (doc.dependentDbs[dependentDb]) {\n      return false; // no update required\n    }\n    doc.dependentDbs[dependentDb] = true;\n    return doc;\n  }\n  upsert(this, '_local/_pouch_dependentDbs', diffFun)\n    .then(function () {\n      callback(null, {db: depDB});\n    }).catch(callback);\n});\n\nAbstractPouchDB.prototype.destroy =\n  adapterFun('destroy', function (opts, callback) {\n\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n\n  var self = this;\n  var usePrefix = 'use_prefix' in self ? self.use_prefix : true;\n\n  function destroyDb() {\n    // call destroy method of the particular adaptor\n    self._destroy(opts, function (err, resp) {\n      if (err) {\n        return callback(err);\n      }\n      self._destroyed = true;\n      self.emit('destroyed');\n      callback(null, resp || { 'ok': true });\n    });\n  }\n\n  if (self.type() === 'http') {\n    // no need to check for dependent DBs if it's a remote DB\n    return destroyDb();\n  }\n\n  self.get('_local/_pouch_dependentDbs', function (err, localDoc) {\n    if (err) {\n      /* istanbul ignore if */\n      if (err.status !== 404) {\n        return callback(err);\n      } else { // no dependencies\n        return destroyDb();\n      }\n    }\n    var dependentDbs = localDoc.dependentDbs;\n    var PouchDB = self.constructor;\n    var deletedMap = Object.keys(dependentDbs).map(function (name) {\n      // use_prefix is only false in the browser\n      /* istanbul ignore next */\n      var trueName = usePrefix ?\n        name.replace(new RegExp('^' + PouchDB.prefix), '') : name;\n      return new PouchDB(trueName, self.__opts).destroy();\n    });\n    PouchPromise.all(deletedMap).then(destroyDb, callback);\n  });\n});\n\nfunction TaskQueue() {\n  this.isReady = false;\n  this.failed = false;\n  this.queue = [];\n}\n\nTaskQueue.prototype.execute = function () {\n  var fun;\n  if (this.failed) {\n    while ((fun = this.queue.shift())) {\n      fun(this.failed);\n    }\n  } else {\n    while ((fun = this.queue.shift())) {\n      fun();\n    }\n  }\n};\n\nTaskQueue.prototype.fail = function (err) {\n  this.failed = err;\n  this.execute();\n};\n\nTaskQueue.prototype.ready = function (db) {\n  this.isReady = true;\n  this.db = db;\n  this.execute();\n};\n\nTaskQueue.prototype.addTask = function (fun) {\n  this.queue.push(fun);\n  if (this.failed) {\n    this.execute();\n  }\n};\n\nfunction parseAdapter(name, opts) {\n  var match = name.match(/([a-z\\-]*):\\/\\/(.*)/);\n  if (match) {\n    // the http adapter expects the fully qualified name\n    name = /http(s?)/.test(match[1]) ? match[1] + '://' + match[2] : match[2];\n    return {name: name, adapter: match[1]};\n  }\n\n  // check for browsers that have been upgraded from websql-only to websql+idb\n  var skipIdb = 'idb' in PouchDB.adapters && 'websql' in PouchDB.adapters &&\n    hasLocalStorage() &&\n    localStorage['_pouch__websqldb_' + PouchDB.prefix + name];\n\n  var adapterName;\n\n  if (opts.adapter) {\n    adapterName = opts.adapter;\n  } else if (typeof opts !== 'undefined' && opts.db) {\n    adapterName = 'leveldb';\n  } else { // automatically determine adapter\n    for (var i = 0; i < PouchDB.preferredAdapters.length; ++i) {\n      adapterName = PouchDB.preferredAdapters[i];\n      /* istanbul ignore if */\n      if (skipIdb && adapterName === 'idb') {\n        // log it, because this can be confusing during development\n        guardedConsole('log', 'PouchDB is downgrading \"' + name + '\" to WebSQL to' +\n          ' avoid data loss, because it was already opened with WebSQL.');\n        continue; // keep using websql to avoid user data loss\n      }\n      break;\n    }\n  }\n\n  var adapter = PouchDB.adapters[adapterName];\n\n  // if adapter is invalid, then an error will be thrown later\n  var usePrefix = (adapter && 'use_prefix' in adapter) ?\n    adapter.use_prefix : true;\n\n  return {\n    name: usePrefix ? (PouchDB.prefix + name) : name,\n    adapter: adapterName\n  };\n}\n\n// OK, so here's the deal. Consider this code:\n//     var db1 = new PouchDB('foo');\n//     var db2 = new PouchDB('foo');\n//     db1.destroy();\n// ^ these two both need to emit 'destroyed' events,\n// as well as the PouchDB constructor itself.\n// So we have one db object (whichever one got destroy() called on it)\n// responsible for emitting the initial event, which then gets emitted\n// by the constructor, which then broadcasts it to any other dbs\n// that may have been created with the same name.\nfunction prepareForDestruction(self) {\n\n  var destructionListeners = self.constructor._destructionListeners;\n\n  function onDestroyed() {\n    self.constructor.emit('destroyed', self.name);\n  }\n\n  function onConstructorDestroyed() {\n    self.removeListener('destroyed', onDestroyed);\n    self.emit('destroyed', self);\n  }\n\n  self.once('destroyed', onDestroyed);\n\n  // in setup.js, the constructor is primed to listen for destroy events\n  if (!destructionListeners.has(self.name)) {\n    destructionListeners.set(self.name, []);\n  }\n  destructionListeners.get(self.name).push(onConstructorDestroyed);\n}\n\ninherits(PouchDB, AbstractPouchDB);\nfunction PouchDB(name, opts) {\n  // In Node our test suite only tests this for PouchAlt unfortunately\n  /* istanbul ignore if */\n  if (!(this instanceof PouchDB)) {\n    return new PouchDB(name, opts);\n  }\n\n  var self = this;\n  opts = opts || {};\n\n  if (name && typeof name === 'object') {\n    opts = name;\n    name = opts.name;\n    delete opts.name;\n  }\n\n  this.__opts = opts = clone(opts);\n\n  self.auto_compaction = opts.auto_compaction;\n  self.prefix = PouchDB.prefix;\n\n  if (typeof name !== 'string') {\n    throw new Error('Missing/invalid DB name');\n  }\n\n  var prefixedName = (opts.prefix || '') + name;\n  var backend = parseAdapter(prefixedName, opts);\n\n  opts.name = backend.name;\n  opts.adapter = opts.adapter || backend.adapter;\n\n  self.name = name;\n  self._adapter = opts.adapter;\n  debug('pouchdb:adapter')('Picked adapter: ' + opts.adapter);\n\n  if (!PouchDB.adapters[opts.adapter] ||\n      !PouchDB.adapters[opts.adapter].valid()) {\n    throw new Error('Invalid Adapter: ' + opts.adapter);\n  }\n\n  AbstractPouchDB.call(self);\n  self.taskqueue = new TaskQueue();\n\n  self.adapter = opts.adapter;\n\n  PouchDB.adapters[opts.adapter].call(self, opts, function (err) {\n    if (err) {\n      return self.taskqueue.fail(err);\n    }\n    prepareForDestruction(self);\n\n    self.emit('created', self);\n    PouchDB.emit('created', self.name);\n    self.taskqueue.ready(self);\n  });\n\n}\n\nPouchDB.debug = debug;\n\nPouchDB.adapters = {};\nPouchDB.preferredAdapters = [];\n\nPouchDB.prefix = '_pouch_';\n\nvar eventEmitter = new events.EventEmitter();\n\nfunction setUpEventEmitter(Pouch) {\n  Object.keys(events.EventEmitter.prototype).forEach(function (key) {\n    if (typeof events.EventEmitter.prototype[key] === 'function') {\n      Pouch[key] = eventEmitter[key].bind(eventEmitter);\n    }\n  });\n\n  // these are created in constructor.js, and allow us to notify each DB with\n  // the same name that it was destroyed, via the constructor object\n  var destructListeners = Pouch._destructionListeners = new _Map();\n  Pouch.on('destroyed', function onConstructorDestroyed(name) {\n    destructListeners.get(name).forEach(function (callback) {\n      callback();\n    });\n    destructListeners.delete(name);\n  });\n}\n\nsetUpEventEmitter(PouchDB);\n\nPouchDB.adapter = function (id, obj, addToPreferredAdapters) {\n  /* istanbul ignore else */\n  if (obj.valid()) {\n    PouchDB.adapters[id] = obj;\n    if (addToPreferredAdapters) {\n      PouchDB.preferredAdapters.push(id);\n    }\n  }\n};\n\nPouchDB.plugin = function (obj) {\n  if (typeof obj === 'function') { // function style for plugins\n    obj(PouchDB);\n  } else if (typeof obj !== 'object' || Object.keys(obj).length === 0){\n    throw new Error('Invalid plugin: object passed in is empty or not an object');\n  } else {\n    Object.keys(obj).forEach(function (id) { // object style for plugins\n      PouchDB.prototype[id] = obj[id];\n    });\n  }\n  return PouchDB;\n};\n\nPouchDB.defaults = function (defaultOpts) {\n  function PouchAlt(name, opts) {\n    if (!(this instanceof PouchAlt)) {\n      return new PouchAlt(name, opts);\n    }\n\n    opts = opts || {};\n\n    if (name && typeof name === 'object') {\n      opts = name;\n      name = opts.name;\n      delete opts.name;\n    }\n\n    opts = jsExtend.extend({}, defaultOpts, opts);\n    PouchDB.call(this, name, opts);\n  }\n\n  inherits(PouchAlt, PouchDB);\n\n  PouchAlt.preferredAdapters = PouchDB.preferredAdapters.slice();\n  Object.keys(PouchDB).forEach(function (key) {\n    if (!(key in PouchAlt)) {\n      PouchAlt[key] = PouchDB[key];\n    }\n  });\n\n  return PouchAlt;\n};\n\n// managed automatically by set-version.js\nvar version = \"6.0.6\";\n\nPouchDB.version = version;\n\nfunction toObject(array) {\n  return array.reduce(function (obj, item) {\n    obj[item] = true;\n    return obj;\n  }, {});\n}\n// List of top level reserved words for doc\nvar reservedWords = toObject([\n  '_id',\n  '_rev',\n  '_attachments',\n  '_deleted',\n  '_revisions',\n  '_revs_info',\n  '_conflicts',\n  '_deleted_conflicts',\n  '_local_seq',\n  '_rev_tree',\n  //replication documents\n  '_replication_id',\n  '_replication_state',\n  '_replication_state_time',\n  '_replication_state_reason',\n  '_replication_stats',\n  // Specific to Couchbase Sync Gateway\n  '_removed'\n]);\n\n// List of reserved words that should end up the document\nvar dataWords = toObject([\n  '_attachments',\n  //replication documents\n  '_replication_id',\n  '_replication_state',\n  '_replication_state_time',\n  '_replication_state_reason',\n  '_replication_stats'\n]);\n\nfunction parseRevisionInfo(rev) {\n  if (!/^\\d+\\-./.test(rev)) {\n    return createError(INVALID_REV);\n  }\n  var idx = rev.indexOf('-');\n  var left = rev.substring(0, idx);\n  var right = rev.substring(idx + 1);\n  return {\n    prefix: parseInt(left, 10),\n    id: right\n  };\n}\n\nfunction makeRevTreeFromRevisions(revisions, opts) {\n  var pos = revisions.start - revisions.ids.length + 1;\n\n  var revisionIds = revisions.ids;\n  var ids = [revisionIds[0], opts, []];\n\n  for (var i = 1, len = revisionIds.length; i < len; i++) {\n    ids = [revisionIds[i], {status: 'missing'}, [ids]];\n  }\n\n  return [{\n    pos: pos,\n    ids: ids\n  }];\n}\n\n// Preprocess documents, parse their revisions, assign an id and a\n// revision for new writes that are missing them, etc\nfunction parseDoc(doc, newEdits) {\n\n  var nRevNum;\n  var newRevId;\n  var revInfo;\n  var opts = {status: 'available'};\n  if (doc._deleted) {\n    opts.deleted = true;\n  }\n\n  if (newEdits) {\n    if (!doc._id) {\n      doc._id = uuid();\n    }\n    newRevId = uuid(32, 16).toLowerCase();\n    if (doc._rev) {\n      revInfo = parseRevisionInfo(doc._rev);\n      if (revInfo.error) {\n        return revInfo;\n      }\n      doc._rev_tree = [{\n        pos: revInfo.prefix,\n        ids: [revInfo.id, {status: 'missing'}, [[newRevId, opts, []]]]\n      }];\n      nRevNum = revInfo.prefix + 1;\n    } else {\n      doc._rev_tree = [{\n        pos: 1,\n        ids : [newRevId, opts, []]\n      }];\n      nRevNum = 1;\n    }\n  } else {\n    if (doc._revisions) {\n      doc._rev_tree = makeRevTreeFromRevisions(doc._revisions, opts);\n      nRevNum = doc._revisions.start;\n      newRevId = doc._revisions.ids[0];\n    }\n    if (!doc._rev_tree) {\n      revInfo = parseRevisionInfo(doc._rev);\n      if (revInfo.error) {\n        return revInfo;\n      }\n      nRevNum = revInfo.prefix;\n      newRevId = revInfo.id;\n      doc._rev_tree = [{\n        pos: nRevNum,\n        ids: [newRevId, opts, []]\n      }];\n    }\n  }\n\n  invalidIdError(doc._id);\n\n  doc._rev = nRevNum + '-' + newRevId;\n\n  var result = {metadata : {}, data : {}};\n  for (var key in doc) {\n    /* istanbul ignore else */\n    if (Object.prototype.hasOwnProperty.call(doc, key)) {\n      var specialKey = key[0] === '_';\n      if (specialKey && !reservedWords[key]) {\n        var error = createError(DOC_VALIDATION, key);\n        error.message = DOC_VALIDATION.message + ': ' + key;\n        throw error;\n      } else if (specialKey && !dataWords[key]) {\n        result.metadata[key.slice(1)] = doc[key];\n      } else {\n        result.data[key] = doc[key];\n      }\n    }\n  }\n  return result;\n}\n\nvar atob$1 = function (str) {\n  return atob(str);\n};\n\nvar btoa$1 = function (str) {\n  return btoa(str);\n};\n\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor (e.g.\n// old QtWebKit versions, Android < 4.4).\nfunction createBlob(parts, properties) {\n  /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n  parts = parts || [];\n  properties = properties || {};\n  try {\n    return new Blob(parts, properties);\n  } catch (e) {\n    if (e.name !== \"TypeError\") {\n      throw e;\n    }\n    var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder :\n                  typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder :\n                  typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder :\n                  WebKitBlobBuilder;\n    var builder = new Builder();\n    for (var i = 0; i < parts.length; i += 1) {\n      builder.append(parts[i]);\n    }\n    return builder.getBlob(properties.type);\n  }\n}\n\n// From http://stackoverflow.com/questions/14967647/ (continues on next line)\n// encode-decode-image-with-base64-breaks-image (2013-04-21)\nfunction binaryStringToArrayBuffer(bin) {\n  var length = bin.length;\n  var buf = new ArrayBuffer(length);\n  var arr = new Uint8Array(buf);\n  for (var i = 0; i < length; i++) {\n    arr[i] = bin.charCodeAt(i);\n  }\n  return buf;\n}\n\nfunction binStringToBluffer(binString, type) {\n  return createBlob([binaryStringToArrayBuffer(binString)], {type: type});\n}\n\nfunction b64ToBluffer(b64, type) {\n  return binStringToBluffer(atob$1(b64), type);\n}\n\n//Can't find original post, but this is close\n//http://stackoverflow.com/questions/6965107/ (continues on next line)\n//converting-between-strings-and-arraybuffers\nfunction arrayBufferToBinaryString(buffer) {\n  var binary = '';\n  var bytes = new Uint8Array(buffer);\n  var length = bytes.byteLength;\n  for (var i = 0; i < length; i++) {\n    binary += String.fromCharCode(bytes[i]);\n  }\n  return binary;\n}\n\n// shim for browsers that don't support it\nfunction readAsBinaryString(blob, callback) {\n  if (typeof FileReader === 'undefined') {\n    // fix for Firefox in a web worker\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=901097\n    return callback(arrayBufferToBinaryString(\n      new FileReaderSync().readAsArrayBuffer(blob)));\n  }\n\n  var reader = new FileReader();\n  var hasBinaryString = typeof reader.readAsBinaryString === 'function';\n  reader.onloadend = function (e) {\n    var result = e.target.result || '';\n    if (hasBinaryString) {\n      return callback(result);\n    }\n    callback(arrayBufferToBinaryString(result));\n  };\n  if (hasBinaryString) {\n    reader.readAsBinaryString(blob);\n  } else {\n    reader.readAsArrayBuffer(blob);\n  }\n}\n\nfunction blobToBinaryString(blobOrBuffer, callback) {\n  readAsBinaryString(blobOrBuffer, function (bin) {\n    callback(bin);\n  });\n}\n\nfunction blobToBase64(blobOrBuffer, callback) {\n  blobToBinaryString(blobOrBuffer, function (base64) {\n    callback(btoa$1(base64));\n  });\n}\n\n// simplified API. universal browser support is assumed\nfunction readAsArrayBuffer(blob, callback) {\n  if (typeof FileReader === 'undefined') {\n    // fix for Firefox in a web worker:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=901097\n    return callback(new FileReaderSync().readAsArrayBuffer(blob));\n  }\n\n  var reader = new FileReader();\n  reader.onloadend = function (e) {\n    var result = e.target.result || new ArrayBuffer(0);\n    callback(result);\n  };\n  reader.readAsArrayBuffer(blob);\n}\n\nvar setImmediateShim = global.setImmediate || global.setTimeout;\nvar MD5_CHUNK_SIZE = 32768;\n\nfunction rawToBase64(raw) {\n  return btoa$1(raw);\n}\n\nfunction sliceBlob(blob, start, end) {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  }\n  return blob.slice(start, end);\n}\n\nfunction appendBlob(buffer, blob, start, end, callback) {\n  if (start > 0 || end < blob.size) {\n    // only slice blob if we really need to\n    blob = sliceBlob(blob, start, end);\n  }\n  readAsArrayBuffer(blob, function (arrayBuffer) {\n    buffer.append(arrayBuffer);\n    callback();\n  });\n}\n\nfunction appendString(buffer, string, start, end, callback) {\n  if (start > 0 || end < string.length) {\n    // only create a substring if we really need to\n    string = string.substring(start, end);\n  }\n  buffer.appendBinary(string);\n  callback();\n}\n\nfunction binaryMd5(data, callback) {\n  var inputIsString = typeof data === 'string';\n  var len = inputIsString ? data.length : data.size;\n  var chunkSize = Math.min(MD5_CHUNK_SIZE, len);\n  var chunks = Math.ceil(len / chunkSize);\n  var currentChunk = 0;\n  var buffer = inputIsString ? new Md5() : new Md5.ArrayBuffer();\n\n  var append = inputIsString ? appendString : appendBlob;\n\n  function next() {\n    setImmediateShim(loadNextChunk);\n  }\n\n  function done() {\n    var raw = buffer.end(true);\n    var base64 = rawToBase64(raw);\n    callback(base64);\n    buffer.destroy();\n  }\n\n  function loadNextChunk() {\n    var start = currentChunk * chunkSize;\n    var end = start + chunkSize;\n    currentChunk++;\n    if (currentChunk < chunks) {\n      append(buffer, data, start, end, next);\n    } else {\n      append(buffer, data, start, end, done);\n    }\n  }\n  loadNextChunk();\n}\n\nfunction stringMd5(string) {\n  return Md5.hash(string);\n}\n\nfunction parseBase64(data) {\n  try {\n    return atob$1(data);\n  } catch (e) {\n    var err = createError(BAD_ARG,\n      'Attachment is not a valid base64 string');\n    return {error: err};\n  }\n}\n\nfunction preprocessString(att, blobType, callback) {\n  var asBinary = parseBase64(att.data);\n  if (asBinary.error) {\n    return callback(asBinary.error);\n  }\n\n  att.length = asBinary.length;\n  if (blobType === 'blob') {\n    att.data = binStringToBluffer(asBinary, att.content_type);\n  } else if (blobType === 'base64') {\n    att.data = btoa$1(asBinary);\n  } else { // binary\n    att.data = asBinary;\n  }\n  binaryMd5(asBinary, function (result) {\n    att.digest = 'md5-' + result;\n    callback();\n  });\n}\n\nfunction preprocessBlob(att, blobType, callback) {\n  binaryMd5(att.data, function (md5) {\n    att.digest = 'md5-' + md5;\n    // size is for blobs (browser), length is for buffers (node)\n    att.length = att.data.size || att.data.length || 0;\n    if (blobType === 'binary') {\n      blobToBinaryString(att.data, function (binString) {\n        att.data = binString;\n        callback();\n      });\n    } else if (blobType === 'base64') {\n      blobToBase64(att.data, function (b64) {\n        att.data = b64;\n        callback();\n      });\n    } else {\n      callback();\n    }\n  });\n}\n\nfunction preprocessAttachment(att, blobType, callback) {\n  if (att.stub) {\n    return callback();\n  }\n  if (typeof att.data === 'string') { // input is a base64 string\n    preprocessString(att, blobType, callback);\n  } else { // input is a blob\n    preprocessBlob(att, blobType, callback);\n  }\n}\n\nfunction preprocessAttachments(docInfos, blobType, callback) {\n\n  if (!docInfos.length) {\n    return callback();\n  }\n\n  var docv = 0;\n  var overallErr;\n\n  docInfos.forEach(function (docInfo) {\n    var attachments = docInfo.data && docInfo.data._attachments ?\n      Object.keys(docInfo.data._attachments) : [];\n    var recv = 0;\n\n    if (!attachments.length) {\n      return done();\n    }\n\n    function processedAttachment(err) {\n      overallErr = err;\n      recv++;\n      if (recv === attachments.length) {\n        done();\n      }\n    }\n\n    for (var key in docInfo.data._attachments) {\n      if (docInfo.data._attachments.hasOwnProperty(key)) {\n        preprocessAttachment(docInfo.data._attachments[key],\n          blobType, processedAttachment);\n      }\n    }\n  });\n\n  function done() {\n    docv++;\n    if (docInfos.length === docv) {\n      if (overallErr) {\n        callback(overallErr);\n      } else {\n        callback();\n      }\n    }\n  }\n}\n\nfunction updateDoc(revLimit, prev, docInfo, results,\n                   i, cb, writeDoc, newEdits) {\n\n  if (revExists(prev.rev_tree, docInfo.metadata.rev)) {\n    results[i] = docInfo;\n    return cb();\n  }\n\n  // sometimes this is pre-calculated. historically not always\n  var previousWinningRev = prev.winningRev || winningRev(prev);\n  var previouslyDeleted = 'deleted' in prev ? prev.deleted :\n    isDeleted(prev, previousWinningRev);\n  var deleted = 'deleted' in docInfo.metadata ? docInfo.metadata.deleted :\n    isDeleted(docInfo.metadata);\n  var isRoot = /^1-/.test(docInfo.metadata.rev);\n\n  if (previouslyDeleted && !deleted && newEdits && isRoot) {\n    var newDoc = docInfo.data;\n    newDoc._rev = previousWinningRev;\n    newDoc._id = docInfo.metadata.id;\n    docInfo = parseDoc(newDoc, newEdits);\n  }\n\n  var merged = merge(prev.rev_tree, docInfo.metadata.rev_tree[0], revLimit);\n\n  var inConflict = newEdits && (((previouslyDeleted && deleted) ||\n    (!previouslyDeleted && merged.conflicts !== 'new_leaf') ||\n    (previouslyDeleted && !deleted && merged.conflicts === 'new_branch')));\n\n  if (inConflict) {\n    var err = createError(REV_CONFLICT);\n    results[i] = err;\n    return cb();\n  }\n\n  var newRev = docInfo.metadata.rev;\n  docInfo.metadata.rev_tree = merged.tree;\n  docInfo.stemmedRevs = merged.stemmedRevs || [];\n  /* istanbul ignore else */\n  if (prev.rev_map) {\n    docInfo.metadata.rev_map = prev.rev_map; // used only by leveldb\n  }\n\n  // recalculate\n  var winningRev$$ = winningRev(docInfo.metadata);\n  var winningRevIsDeleted = isDeleted(docInfo.metadata, winningRev$$);\n\n  // calculate the total number of documents that were added/removed,\n  // from the perspective of total_rows/doc_count\n  var delta = (previouslyDeleted === winningRevIsDeleted) ? 0 :\n    previouslyDeleted < winningRevIsDeleted ? -1 : 1;\n\n  var newRevIsDeleted;\n  if (newRev === winningRev$$) {\n    // if the new rev is the same as the winning rev, we can reuse that value\n    newRevIsDeleted = winningRevIsDeleted;\n  } else {\n    // if they're not the same, then we need to recalculate\n    newRevIsDeleted = isDeleted(docInfo.metadata, newRev);\n  }\n\n  writeDoc(docInfo, winningRev$$, winningRevIsDeleted, newRevIsDeleted,\n    true, delta, i, cb);\n}\n\nfunction rootIsMissing(docInfo) {\n  return docInfo.metadata.rev_tree[0].ids[1].status === 'missing';\n}\n\nfunction processDocs(revLimit, docInfos, api, fetchedDocs, tx, results,\n                     writeDoc, opts, overallCallback) {\n\n  // Default to 1000 locally\n  revLimit = revLimit || 1000;\n\n  function insertDoc(docInfo, resultsIdx, callback) {\n    // Cant insert new deleted documents\n    var winningRev$$ = winningRev(docInfo.metadata);\n    var deleted = isDeleted(docInfo.metadata, winningRev$$);\n    if ('was_delete' in opts && deleted) {\n      results[resultsIdx] = createError(MISSING_DOC, 'deleted');\n      return callback();\n    }\n\n    // 4712 - detect whether a new document was inserted with a _rev\n    var inConflict = newEdits && rootIsMissing(docInfo);\n\n    if (inConflict) {\n      var err = createError(REV_CONFLICT);\n      results[resultsIdx] = err;\n      return callback();\n    }\n\n    var delta = deleted ? 0 : 1;\n\n    writeDoc(docInfo, winningRev$$, deleted, deleted, false,\n      delta, resultsIdx, callback);\n  }\n\n  var newEdits = opts.new_edits;\n  var idsToDocs = new _Map();\n\n  var docsDone = 0;\n  var docsToDo = docInfos.length;\n\n  function checkAllDocsDone() {\n    if (++docsDone === docsToDo && overallCallback) {\n      overallCallback();\n    }\n  }\n\n  docInfos.forEach(function (currentDoc, resultsIdx) {\n\n    if (currentDoc._id && isLocalId(currentDoc._id)) {\n      var fun = currentDoc._deleted ? '_removeLocal' : '_putLocal';\n      api[fun](currentDoc, {ctx: tx}, function (err, res) {\n        results[resultsIdx] = err || res;\n        checkAllDocsDone();\n      });\n      return;\n    }\n\n    var id = currentDoc.metadata.id;\n    if (idsToDocs.has(id)) {\n      docsToDo--; // duplicate\n      idsToDocs.get(id).push([currentDoc, resultsIdx]);\n    } else {\n      idsToDocs.set(id, [[currentDoc, resultsIdx]]);\n    }\n  });\n\n  // in the case of new_edits, the user can provide multiple docs\n  // with the same id. these need to be processed sequentially\n  idsToDocs.forEach(function (docs, id) {\n    var numDone = 0;\n\n    function docWritten() {\n      if (++numDone < docs.length) {\n        nextDoc();\n      } else {\n        checkAllDocsDone();\n      }\n    }\n    function nextDoc() {\n      var value = docs[numDone];\n      var currentDoc = value[0];\n      var resultsIdx = value[1];\n\n      if (fetchedDocs.has(id)) {\n        updateDoc(revLimit, fetchedDocs.get(id), currentDoc, results,\n          resultsIdx, docWritten, writeDoc, newEdits);\n      } else {\n        // Ensure stemming applies to new writes as well\n        var merged = merge([], currentDoc.metadata.rev_tree[0], revLimit);\n        currentDoc.metadata.rev_tree = merged.tree;\n        currentDoc.stemmedRevs = merged.stemmedRevs || [];\n        insertDoc(currentDoc, resultsIdx, docWritten);\n      }\n    }\n    nextDoc();\n  });\n}\n\n// IndexedDB requires a versioned database structure, so we use the\n// version here to manage migrations.\nvar ADAPTER_VERSION = 5;\n\n// The object stores created for each database\n// DOC_STORE stores the document meta data, its revision history and state\n// Keyed by document id\nvar DOC_STORE = 'document-store';\n// BY_SEQ_STORE stores a particular version of a document, keyed by its\n// sequence id\nvar BY_SEQ_STORE = 'by-sequence';\n// Where we store attachments\nvar ATTACH_STORE = 'attach-store';\n// Where we store many-to-many relations\n// between attachment digests and seqs\nvar ATTACH_AND_SEQ_STORE = 'attach-seq-store';\n\n// Where we store database-wide meta data in a single record\n// keyed by id: META_STORE\nvar META_STORE = 'meta-store';\n// Where we store local documents\nvar LOCAL_STORE = 'local-store';\n// Where we detect blob support\nvar DETECT_BLOB_SUPPORT_STORE = 'detect-blob-support';\n\nfunction slowJsonParse(str) {\n  try {\n    return JSON.parse(str);\n  } catch (e) {\n    /* istanbul ignore next */\n    return vuvuzela.parse(str);\n  }\n}\n\nfunction safeJsonParse(str) {\n  // try/catch is deoptimized in V8, leading to slower\n  // times than we'd like to have. Most documents are _not_\n  // huge, and do not require a slower code path just to parse them.\n  // We can be pretty sure that a document under 50000 characters\n  // will not be so deeply nested as to throw a stack overflow error\n  // (depends on the engine and available memory, though, so this is\n  // just a hunch). 50000 was chosen based on the average length\n  // of this string in our test suite, to try to find a number that covers\n  // most of our test cases (26 over this size, 26378 under it).\n  if (str.length < 50000) {\n    return JSON.parse(str);\n  }\n  return slowJsonParse(str);\n}\n\nfunction safeJsonStringify(json) {\n  try {\n    return JSON.stringify(json);\n  } catch (e) {\n    /* istanbul ignore next */\n    return vuvuzela.stringify(json);\n  }\n}\n\nfunction tryCode(fun, that, args, PouchDB) {\n  try {\n    fun.apply(that, args);\n  } catch (err) {\n    // Shouldn't happen, but in some odd cases\n    // IndexedDB implementations might throw a sync\n    // error, in which case this will at least log it.\n    PouchDB.emit('error', err);\n  }\n}\n\nvar taskQueue = {\n  running: false,\n  queue: []\n};\n\nfunction applyNext(PouchDB) {\n  if (taskQueue.running || !taskQueue.queue.length) {\n    return;\n  }\n  taskQueue.running = true;\n  var item = taskQueue.queue.shift();\n  item.action(function (err, res) {\n    tryCode(item.callback, this, [err, res], PouchDB);\n    taskQueue.running = false;\n    process.nextTick(function () {\n      applyNext(PouchDB);\n    });\n  });\n}\n\nfunction idbError(callback) {\n  return function (evt) {\n    var message = 'unknown_error';\n    if (evt.target && evt.target.error) {\n      message = evt.target.error.name || evt.target.error.message;\n    }\n    callback(createError(IDB_ERROR, message, evt.type));\n  };\n}\n\n// Unfortunately, the metadata has to be stringified\n// when it is put into the database, because otherwise\n// IndexedDB can throw errors for deeply-nested objects.\n// Originally we just used JSON.parse/JSON.stringify; now\n// we use this custom vuvuzela library that avoids recursion.\n// If we could do it all over again, we'd probably use a\n// format for the revision trees other than JSON.\nfunction encodeMetadata(metadata, winningRev, deleted) {\n  return {\n    data: safeJsonStringify(metadata),\n    winningRev: winningRev,\n    deletedOrLocal: deleted ? '1' : '0',\n    seq: metadata.seq, // highest seq for this doc\n    id: metadata.id\n  };\n}\n\nfunction decodeMetadata(storedObject) {\n  if (!storedObject) {\n    return null;\n  }\n  var metadata = safeJsonParse(storedObject.data);\n  metadata.winningRev = storedObject.winningRev;\n  metadata.deleted = storedObject.deletedOrLocal === '1';\n  metadata.seq = storedObject.seq;\n  return metadata;\n}\n\n// read the doc back out from the database. we don't store the\n// _id or _rev because we already have _doc_id_rev.\nfunction decodeDoc(doc) {\n  if (!doc) {\n    return doc;\n  }\n  var idx = doc._doc_id_rev.lastIndexOf(':');\n  doc._id = doc._doc_id_rev.substring(0, idx - 1);\n  doc._rev = doc._doc_id_rev.substring(idx + 1);\n  delete doc._doc_id_rev;\n  return doc;\n}\n\n// Read a blob from the database, encoding as necessary\n// and translating from base64 if the IDB doesn't support\n// native Blobs\nfunction readBlobData(body, type, asBlob, callback) {\n  if (asBlob) {\n    if (!body) {\n      callback(createBlob([''], {type: type}));\n    } else if (typeof body !== 'string') { // we have blob support\n      callback(body);\n    } else { // no blob support\n      callback(b64ToBluffer(body, type));\n    }\n  } else { // as base64 string\n    if (!body) {\n      callback('');\n    } else if (typeof body !== 'string') { // we have blob support\n      readAsBinaryString(body, function (binary) {\n        callback(btoa$1(binary));\n      });\n    } else { // no blob support\n      callback(body);\n    }\n  }\n}\n\nfunction fetchAttachmentsIfNecessary(doc, opts, txn, cb) {\n  var attachments = Object.keys(doc._attachments || {});\n  if (!attachments.length) {\n    return cb && cb();\n  }\n  var numDone = 0;\n\n  function checkDone() {\n    if (++numDone === attachments.length && cb) {\n      cb();\n    }\n  }\n\n  function fetchAttachment(doc, att) {\n    var attObj = doc._attachments[att];\n    var digest = attObj.digest;\n    var req = txn.objectStore(ATTACH_STORE).get(digest);\n    req.onsuccess = function (e) {\n      attObj.body = e.target.result.body;\n      checkDone();\n    };\n  }\n\n  attachments.forEach(function (att) {\n    if (opts.attachments && opts.include_docs) {\n      fetchAttachment(doc, att);\n    } else {\n      doc._attachments[att].stub = true;\n      checkDone();\n    }\n  });\n}\n\n// IDB-specific postprocessing necessary because\n// we don't know whether we stored a true Blob or\n// a base64-encoded string, and if it's a Blob it\n// needs to be read outside of the transaction context\nfunction postProcessAttachments(results, asBlob) {\n  return PouchPromise.all(results.map(function (row) {\n    if (row.doc && row.doc._attachments) {\n      var attNames = Object.keys(row.doc._attachments);\n      return PouchPromise.all(attNames.map(function (att) {\n        var attObj = row.doc._attachments[att];\n        if (!('body' in attObj)) { // already processed\n          return;\n        }\n        var body = attObj.body;\n        var type = attObj.content_type;\n        return new PouchPromise(function (resolve) {\n          readBlobData(body, type, asBlob, function (data) {\n            row.doc._attachments[att] = jsExtend.extend(\n              pick(attObj, ['digest', 'content_type']),\n              {data: data}\n            );\n            resolve();\n          });\n        });\n      }));\n    }\n  }));\n}\n\nfunction compactRevs(revs, docId, txn) {\n\n  var possiblyOrphanedDigests = [];\n  var seqStore = txn.objectStore(BY_SEQ_STORE);\n  var attStore = txn.objectStore(ATTACH_STORE);\n  var attAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE);\n  var count = revs.length;\n\n  function checkDone() {\n    count--;\n    if (!count) { // done processing all revs\n      deleteOrphanedAttachments();\n    }\n  }\n\n  function deleteOrphanedAttachments() {\n    if (!possiblyOrphanedDigests.length) {\n      return;\n    }\n    possiblyOrphanedDigests.forEach(function (digest) {\n      var countReq = attAndSeqStore.index('digestSeq').count(\n        IDBKeyRange.bound(\n          digest + '::', digest + '::\\uffff', false, false));\n      countReq.onsuccess = function (e) {\n        var count = e.target.result;\n        if (!count) {\n          // orphaned\n          attStore.delete(digest);\n        }\n      };\n    });\n  }\n\n  revs.forEach(function (rev) {\n    var index = seqStore.index('_doc_id_rev');\n    var key = docId + \"::\" + rev;\n    index.getKey(key).onsuccess = function (e) {\n      var seq = e.target.result;\n      if (typeof seq !== 'number') {\n        return checkDone();\n      }\n      seqStore.delete(seq);\n\n      var cursor = attAndSeqStore.index('seq')\n        .openCursor(IDBKeyRange.only(seq));\n\n      cursor.onsuccess = function (event) {\n        var cursor = event.target.result;\n        if (cursor) {\n          var digest = cursor.value.digestSeq.split('::')[0];\n          possiblyOrphanedDigests.push(digest);\n          attAndSeqStore.delete(cursor.primaryKey);\n          cursor.continue();\n        } else { // done\n          checkDone();\n        }\n      };\n    };\n  });\n}\n\nfunction openTransactionSafely(idb, stores, mode) {\n  try {\n    return {\n      txn: idb.transaction(stores, mode)\n    };\n  } catch (err) {\n    return {\n      error: err\n    };\n  }\n}\n\nfunction idbBulkDocs(dbOpts, req, opts, api, idb, idbChanges, callback) {\n  var docInfos = req.docs;\n  var txn;\n  var docStore;\n  var bySeqStore;\n  var attachStore;\n  var attachAndSeqStore;\n  var docInfoError;\n  var docCountDelta = 0;\n\n  for (var i = 0, len = docInfos.length; i < len; i++) {\n    var doc = docInfos[i];\n    if (doc._id && isLocalId(doc._id)) {\n      continue;\n    }\n    doc = docInfos[i] = parseDoc(doc, opts.new_edits);\n    if (doc.error && !docInfoError) {\n      docInfoError = doc;\n    }\n  }\n\n  if (docInfoError) {\n    return callback(docInfoError);\n  }\n\n  var results = new Array(docInfos.length);\n  var fetchedDocs = new _Map();\n  var preconditionErrored = false;\n  var blobType = api._meta.blobSupport ? 'blob' : 'base64';\n\n  preprocessAttachments(docInfos, blobType, function (err) {\n    if (err) {\n      return callback(err);\n    }\n    startTransaction();\n  });\n\n  function startTransaction() {\n\n    var stores = [\n      DOC_STORE, BY_SEQ_STORE,\n      ATTACH_STORE,\n      LOCAL_STORE, ATTACH_AND_SEQ_STORE\n    ];\n    var txnResult = openTransactionSafely(idb, stores, 'readwrite');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    txn = txnResult.txn;\n    txn.onabort = idbError(callback);\n    txn.ontimeout = idbError(callback);\n    txn.oncomplete = complete;\n    docStore = txn.objectStore(DOC_STORE);\n    bySeqStore = txn.objectStore(BY_SEQ_STORE);\n    attachStore = txn.objectStore(ATTACH_STORE);\n    attachAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE);\n\n    verifyAttachments(function (err) {\n      if (err) {\n        preconditionErrored = true;\n        return callback(err);\n      }\n      fetchExistingDocs();\n    });\n  }\n\n  function idbProcessDocs() {\n    processDocs(dbOpts.revs_limit, docInfos, api, fetchedDocs,\n                txn, results, writeDoc, opts);\n  }\n\n  function fetchExistingDocs() {\n\n    if (!docInfos.length) {\n      return;\n    }\n\n    var numFetched = 0;\n\n    function checkDone() {\n      if (++numFetched === docInfos.length) {\n        idbProcessDocs();\n      }\n    }\n\n    function readMetadata(event) {\n      var metadata = decodeMetadata(event.target.result);\n\n      if (metadata) {\n        fetchedDocs.set(metadata.id, metadata);\n      }\n      checkDone();\n    }\n\n    for (var i = 0, len = docInfos.length; i < len; i++) {\n      var docInfo = docInfos[i];\n      if (docInfo._id && isLocalId(docInfo._id)) {\n        checkDone(); // skip local docs\n        continue;\n      }\n      var req = docStore.get(docInfo.metadata.id);\n      req.onsuccess = readMetadata;\n    }\n  }\n\n  function complete() {\n    if (preconditionErrored) {\n      return;\n    }\n\n    idbChanges.notify(api._meta.name);\n    api._meta.docCount += docCountDelta;\n    callback(null, results);\n  }\n\n  function verifyAttachment(digest, callback) {\n\n    var req = attachStore.get(digest);\n    req.onsuccess = function (e) {\n      if (!e.target.result) {\n        var err = createError(MISSING_STUB,\n          'unknown stub attachment with digest ' +\n          digest);\n        err.status = 412;\n        callback(err);\n      } else {\n        callback();\n      }\n    };\n  }\n\n  function verifyAttachments(finish) {\n\n\n    var digests = [];\n    docInfos.forEach(function (docInfo) {\n      if (docInfo.data && docInfo.data._attachments) {\n        Object.keys(docInfo.data._attachments).forEach(function (filename) {\n          var att = docInfo.data._attachments[filename];\n          if (att.stub) {\n            digests.push(att.digest);\n          }\n        });\n      }\n    });\n    if (!digests.length) {\n      return finish();\n    }\n    var numDone = 0;\n    var err;\n\n    function checkDone() {\n      if (++numDone === digests.length) {\n        finish(err);\n      }\n    }\n    digests.forEach(function (digest) {\n      verifyAttachment(digest, function (attErr) {\n        if (attErr && !err) {\n          err = attErr;\n        }\n        checkDone();\n      });\n    });\n  }\n\n  function writeDoc(docInfo, winningRev, winningRevIsDeleted, newRevIsDeleted,\n                    isUpdate, delta, resultsIdx, callback) {\n\n    docCountDelta += delta;\n\n    docInfo.metadata.winningRev = winningRev;\n    docInfo.metadata.deleted = winningRevIsDeleted;\n\n    var doc = docInfo.data;\n    doc._id = docInfo.metadata.id;\n    doc._rev = docInfo.metadata.rev;\n\n    if (newRevIsDeleted) {\n      doc._deleted = true;\n    }\n\n    var hasAttachments = doc._attachments &&\n      Object.keys(doc._attachments).length;\n    if (hasAttachments) {\n      return writeAttachments(docInfo, winningRev, winningRevIsDeleted,\n        isUpdate, resultsIdx, callback);\n    }\n\n    finishDoc(docInfo, winningRev, winningRevIsDeleted,\n      isUpdate, resultsIdx, callback);\n  }\n\n  function finishDoc(docInfo, winningRev, winningRevIsDeleted,\n                     isUpdate, resultsIdx, callback) {\n\n    var doc = docInfo.data;\n    var metadata = docInfo.metadata;\n\n    doc._doc_id_rev = metadata.id + '::' + metadata.rev;\n    delete doc._id;\n    delete doc._rev;\n\n    function afterPutDoc(e) {\n      var revsToDelete = docInfo.stemmedRevs || [];\n\n      if (isUpdate && api.auto_compaction) {\n        revsToDelete = revsToDelete.concat(compactTree(docInfo.metadata));\n      }\n\n      if (revsToDelete && revsToDelete.length) {\n        compactRevs(revsToDelete, docInfo.metadata.id, txn);\n      }\n\n      metadata.seq = e.target.result;\n      // Current _rev is calculated from _rev_tree on read\n      delete metadata.rev;\n      var metadataToStore = encodeMetadata(metadata, winningRev,\n        winningRevIsDeleted);\n      var metaDataReq = docStore.put(metadataToStore);\n      metaDataReq.onsuccess = afterPutMetadata;\n    }\n\n    function afterPutDocError(e) {\n      // ConstraintError, need to update, not put (see #1638 for details)\n      e.preventDefault(); // avoid transaction abort\n      e.stopPropagation(); // avoid transaction onerror\n      var index = bySeqStore.index('_doc_id_rev');\n      var getKeyReq = index.getKey(doc._doc_id_rev);\n      getKeyReq.onsuccess = function (e) {\n        var putReq = bySeqStore.put(doc, e.target.result);\n        putReq.onsuccess = afterPutDoc;\n      };\n    }\n\n    function afterPutMetadata() {\n      results[resultsIdx] = {\n        ok: true,\n        id: metadata.id,\n        rev: winningRev\n      };\n      fetchedDocs.set(docInfo.metadata.id, docInfo.metadata);\n      insertAttachmentMappings(docInfo, metadata.seq, callback);\n    }\n\n    var putReq = bySeqStore.put(doc);\n\n    putReq.onsuccess = afterPutDoc;\n    putReq.onerror = afterPutDocError;\n  }\n\n  function writeAttachments(docInfo, winningRev, winningRevIsDeleted,\n                            isUpdate, resultsIdx, callback) {\n\n\n    var doc = docInfo.data;\n\n    var numDone = 0;\n    var attachments = Object.keys(doc._attachments);\n\n    function collectResults() {\n      if (numDone === attachments.length) {\n        finishDoc(docInfo, winningRev, winningRevIsDeleted,\n          isUpdate, resultsIdx, callback);\n      }\n    }\n\n    function attachmentSaved() {\n      numDone++;\n      collectResults();\n    }\n\n    attachments.forEach(function (key) {\n      var att = docInfo.data._attachments[key];\n      if (!att.stub) {\n        var data = att.data;\n        delete att.data;\n        att.revpos = parseInt(winningRev, 10);\n        var digest = att.digest;\n        saveAttachment(digest, data, attachmentSaved);\n      } else {\n        numDone++;\n        collectResults();\n      }\n    });\n  }\n\n  // map seqs to attachment digests, which\n  // we will need later during compaction\n  function insertAttachmentMappings(docInfo, seq, callback) {\n\n    var attsAdded = 0;\n    var attsToAdd = Object.keys(docInfo.data._attachments || {});\n\n    if (!attsToAdd.length) {\n      return callback();\n    }\n\n    function checkDone() {\n      if (++attsAdded === attsToAdd.length) {\n        callback();\n      }\n    }\n\n    function add(att) {\n      var digest = docInfo.data._attachments[att].digest;\n      var req = attachAndSeqStore.put({\n        seq: seq,\n        digestSeq: digest + '::' + seq\n      });\n\n      req.onsuccess = checkDone;\n      req.onerror = function (e) {\n        // this callback is for a constaint error, which we ignore\n        // because this docid/rev has already been associated with\n        // the digest (e.g. when new_edits == false)\n        e.preventDefault(); // avoid transaction abort\n        e.stopPropagation(); // avoid transaction onerror\n        checkDone();\n      };\n    }\n    for (var i = 0; i < attsToAdd.length; i++) {\n      add(attsToAdd[i]); // do in parallel\n    }\n  }\n\n  function saveAttachment(digest, data, callback) {\n\n\n    var getKeyReq = attachStore.count(digest);\n    getKeyReq.onsuccess = function (e) {\n      var count = e.target.result;\n      if (count) {\n        return callback(); // already exists\n      }\n      var newAtt = {\n        digest: digest,\n        body: data\n      };\n      var putReq = attachStore.put(newAtt);\n      putReq.onsuccess = callback;\n    };\n  }\n}\n\nfunction createKeyRange(start, end, inclusiveEnd, key, descending) {\n  try {\n    if (start && end) {\n      if (descending) {\n        return IDBKeyRange.bound(end, start, !inclusiveEnd, false);\n      } else {\n        return IDBKeyRange.bound(start, end, false, !inclusiveEnd);\n      }\n    } else if (start) {\n      if (descending) {\n        return IDBKeyRange.upperBound(start);\n      } else {\n        return IDBKeyRange.lowerBound(start);\n      }\n    } else if (end) {\n      if (descending) {\n        return IDBKeyRange.lowerBound(end, !inclusiveEnd);\n      } else {\n        return IDBKeyRange.upperBound(end, !inclusiveEnd);\n      }\n    } else if (key) {\n      return IDBKeyRange.only(key);\n    }\n  } catch (e) {\n    return {error: e};\n  }\n  return null;\n}\n\nfunction handleKeyRangeError(api, opts, err, callback) {\n  if (err.name === \"DataError\" && err.code === 0) {\n    // data error, start is less than end\n    return callback(null, {\n      total_rows: api._meta.docCount,\n      offset: opts.skip,\n      rows: []\n    });\n  }\n  callback(createError(IDB_ERROR, err.name, err.message));\n}\n\nfunction idbAllDocs(opts, api, idb, callback) {\n\n  function allDocsQuery(opts, callback) {\n    var start = 'startkey' in opts ? opts.startkey : false;\n    var end = 'endkey' in opts ? opts.endkey : false;\n    var key = 'key' in opts ? opts.key : false;\n    var skip = opts.skip || 0;\n    var limit = typeof opts.limit === 'number' ? opts.limit : -1;\n    var inclusiveEnd = opts.inclusive_end !== false;\n    var descending = 'descending' in opts && opts.descending ? 'prev' : null;\n\n    var keyRange = createKeyRange(start, end, inclusiveEnd, key, descending);\n    if (keyRange && keyRange.error) {\n      return handleKeyRangeError(api, opts, keyRange.error, callback);\n    }\n\n    var stores = [DOC_STORE, BY_SEQ_STORE];\n\n    if (opts.attachments) {\n      stores.push(ATTACH_STORE);\n    }\n    var txnResult = openTransactionSafely(idb, stores, 'readonly');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    var txn = txnResult.txn;\n    var docStore = txn.objectStore(DOC_STORE);\n    var seqStore = txn.objectStore(BY_SEQ_STORE);\n    var cursor = descending ?\n      docStore.openCursor(keyRange, descending) :\n      docStore.openCursor(keyRange);\n    var docIdRevIndex = seqStore.index('_doc_id_rev');\n    var results = [];\n    var docCount = 0;\n\n    // if the user specifies include_docs=true, then we don't\n    // want to block the main cursor while we're fetching the doc\n    function fetchDocAsynchronously(metadata, row, winningRev) {\n      var key = metadata.id + \"::\" + winningRev;\n      docIdRevIndex.get(key).onsuccess =  function onGetDoc(e) {\n        row.doc = decodeDoc(e.target.result);\n        if (opts.conflicts) {\n          row.doc._conflicts = collectConflicts(metadata);\n        }\n        fetchAttachmentsIfNecessary(row.doc, opts, txn);\n      };\n    }\n\n    function allDocsInner(cursor, winningRev, metadata) {\n      var row = {\n        id: metadata.id,\n        key: metadata.id,\n        value: {\n          rev: winningRev\n        }\n      };\n      var deleted = metadata.deleted;\n      if (opts.deleted === 'ok') {\n        results.push(row);\n        // deleted docs are okay with \"keys\" requests\n        if (deleted) {\n          row.value.deleted = true;\n          row.doc = null;\n        } else if (opts.include_docs) {\n          fetchDocAsynchronously(metadata, row, winningRev);\n        }\n      } else if (!deleted && skip-- <= 0) {\n        results.push(row);\n        if (opts.include_docs) {\n          fetchDocAsynchronously(metadata, row, winningRev);\n        }\n        if (--limit === 0) {\n          return;\n        }\n      }\n      cursor.continue();\n    }\n\n    function onGetCursor(e) {\n      docCount = api._meta.docCount; // do this within the txn for consistency\n      var cursor = e.target.result;\n      if (!cursor) {\n        return;\n      }\n      var metadata = decodeMetadata(cursor.value);\n      var winningRev = metadata.winningRev;\n\n      allDocsInner(cursor, winningRev, metadata);\n    }\n\n    function onResultsReady() {\n      callback(null, {\n        total_rows: docCount,\n        offset: opts.skip,\n        rows: results\n      });\n    }\n\n    function onTxnComplete() {\n      if (opts.attachments) {\n        postProcessAttachments(results, opts.binary).then(onResultsReady);\n      } else {\n        onResultsReady();\n      }\n    }\n\n    txn.oncomplete = onTxnComplete;\n    cursor.onsuccess = onGetCursor;\n  }\n\n  function allDocs(opts, callback) {\n\n    if (opts.limit === 0) {\n      return callback(null, {\n        total_rows: api._meta.docCount,\n        offset: opts.skip,\n        rows: []\n      });\n    }\n    allDocsQuery(opts, callback);\n  }\n\n  allDocs(opts, callback);\n}\n\n//\n// Blobs are not supported in all versions of IndexedDB, notably\n// Chrome <37 and Android <5. In those versions, storing a blob will throw.\n//\n// Various other blob bugs exist in Chrome v37-42 (inclusive).\n// Detecting them is expensive and confusing to users, and Chrome 37-42\n// is at very low usage worldwide, so we do a hacky userAgent check instead.\n//\n// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\n// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\n// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\n//\nfunction checkBlobSupport(txn) {\n  return new PouchPromise(function (resolve) {\n    var blob = createBlob(['']);\n    txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');\n\n    txn.onabort = function (e) {\n      // If the transaction aborts now its due to not being able to\n      // write to the database, likely due to the disk being full\n      e.preventDefault();\n      e.stopPropagation();\n      resolve(false);\n    };\n\n    txn.oncomplete = function () {\n      var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\n      var matchedEdge = navigator.userAgent.match(/Edge\\//);\n      // MS Edge pretends to be Chrome 42:\n      // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\n      resolve(matchedEdge || !matchedChrome ||\n        parseInt(matchedChrome[1], 10) >= 43);\n    };\n  }).catch(function () {\n    return false; // error, so assume unsupported\n  });\n}\n\nvar cachedDBs = new _Map();\nvar blobSupportPromise;\nvar idbChanges = new Changes$1();\nvar openReqList = new _Map();\n\nfunction IdbPouch(opts, callback) {\n  var api = this;\n\n  taskQueue.queue.push({\n    action: function (thisCallback) {\n      init(api, opts, thisCallback);\n    },\n    callback: callback\n  });\n  applyNext(api.constructor);\n}\n\nfunction init(api, opts, callback) {\n\n  var dbName = opts.name;\n\n  var idb = null;\n  api._meta = null;\n\n  // called when creating a fresh new database\n  function createSchema(db) {\n    var docStore = db.createObjectStore(DOC_STORE, {keyPath : 'id'});\n    db.createObjectStore(BY_SEQ_STORE, {autoIncrement: true})\n      .createIndex('_doc_id_rev', '_doc_id_rev', {unique: true});\n    db.createObjectStore(ATTACH_STORE, {keyPath: 'digest'});\n    db.createObjectStore(META_STORE, {keyPath: 'id', autoIncrement: false});\n    db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\n\n    // added in v2\n    docStore.createIndex('deletedOrLocal', 'deletedOrLocal', {unique : false});\n\n    // added in v3\n    db.createObjectStore(LOCAL_STORE, {keyPath: '_id'});\n\n    // added in v4\n    var attAndSeqStore = db.createObjectStore(ATTACH_AND_SEQ_STORE,\n      {autoIncrement: true});\n    attAndSeqStore.createIndex('seq', 'seq');\n    attAndSeqStore.createIndex('digestSeq', 'digestSeq', {unique: true});\n  }\n\n  // migration to version 2\n  // unfortunately \"deletedOrLocal\" is a misnomer now that we no longer\n  // store local docs in the main doc-store, but whaddyagonnado\n  function addDeletedOrLocalIndex(txn, callback) {\n    var docStore = txn.objectStore(DOC_STORE);\n    docStore.createIndex('deletedOrLocal', 'deletedOrLocal', {unique : false});\n\n    docStore.openCursor().onsuccess = function (event) {\n      var cursor = event.target.result;\n      if (cursor) {\n        var metadata = cursor.value;\n        var deleted = isDeleted(metadata);\n        metadata.deletedOrLocal = deleted ? \"1\" : \"0\";\n        docStore.put(metadata);\n        cursor.continue();\n      } else {\n        callback();\n      }\n    };\n  }\n\n  // migration to version 3 (part 1)\n  function createLocalStoreSchema(db) {\n    db.createObjectStore(LOCAL_STORE, {keyPath: '_id'})\n      .createIndex('_doc_id_rev', '_doc_id_rev', {unique: true});\n  }\n\n  // migration to version 3 (part 2)\n  function migrateLocalStore(txn, cb) {\n    var localStore = txn.objectStore(LOCAL_STORE);\n    var docStore = txn.objectStore(DOC_STORE);\n    var seqStore = txn.objectStore(BY_SEQ_STORE);\n\n    var cursor = docStore.openCursor();\n    cursor.onsuccess = function (event) {\n      var cursor = event.target.result;\n      if (cursor) {\n        var metadata = cursor.value;\n        var docId = metadata.id;\n        var local = isLocalId(docId);\n        var rev = winningRev(metadata);\n        if (local) {\n          var docIdRev = docId + \"::\" + rev;\n          // remove all seq entries\n          // associated with this docId\n          var start = docId + \"::\";\n          var end = docId + \"::~\";\n          var index = seqStore.index('_doc_id_rev');\n          var range = IDBKeyRange.bound(start, end, false, false);\n          var seqCursor = index.openCursor(range);\n          seqCursor.onsuccess = function (e) {\n            seqCursor = e.target.result;\n            if (!seqCursor) {\n              // done\n              docStore.delete(cursor.primaryKey);\n              cursor.continue();\n            } else {\n              var data = seqCursor.value;\n              if (data._doc_id_rev === docIdRev) {\n                localStore.put(data);\n              }\n              seqStore.delete(seqCursor.primaryKey);\n              seqCursor.continue();\n            }\n          };\n        } else {\n          cursor.continue();\n        }\n      } else if (cb) {\n        cb();\n      }\n    };\n  }\n\n  // migration to version 4 (part 1)\n  function addAttachAndSeqStore(db) {\n    var attAndSeqStore = db.createObjectStore(ATTACH_AND_SEQ_STORE,\n      {autoIncrement: true});\n    attAndSeqStore.createIndex('seq', 'seq');\n    attAndSeqStore.createIndex('digestSeq', 'digestSeq', {unique: true});\n  }\n\n  // migration to version 4 (part 2)\n  function migrateAttsAndSeqs(txn, callback) {\n    var seqStore = txn.objectStore(BY_SEQ_STORE);\n    var attStore = txn.objectStore(ATTACH_STORE);\n    var attAndSeqStore = txn.objectStore(ATTACH_AND_SEQ_STORE);\n\n    // need to actually populate the table. this is the expensive part,\n    // so as an optimization, check first that this database even\n    // contains attachments\n    var req = attStore.count();\n    req.onsuccess = function (e) {\n      var count = e.target.result;\n      if (!count) {\n        return callback(); // done\n      }\n\n      seqStore.openCursor().onsuccess = function (e) {\n        var cursor = e.target.result;\n        if (!cursor) {\n          return callback(); // done\n        }\n        var doc = cursor.value;\n        var seq = cursor.primaryKey;\n        var atts = Object.keys(doc._attachments || {});\n        var digestMap = {};\n        for (var j = 0; j < atts.length; j++) {\n          var att = doc._attachments[atts[j]];\n          digestMap[att.digest] = true; // uniq digests, just in case\n        }\n        var digests = Object.keys(digestMap);\n        for (j = 0; j < digests.length; j++) {\n          var digest = digests[j];\n          attAndSeqStore.put({\n            seq: seq,\n            digestSeq: digest + '::' + seq\n          });\n        }\n        cursor.continue();\n      };\n    };\n  }\n\n  // migration to version 5\n  // Instead of relying on on-the-fly migration of metadata,\n  // this brings the doc-store to its modern form:\n  // - metadata.winningrev\n  // - metadata.seq\n  // - stringify the metadata when storing it\n  function migrateMetadata(txn) {\n\n    function decodeMetadataCompat(storedObject) {\n      if (!storedObject.data) {\n        // old format, when we didn't store it stringified\n        storedObject.deleted = storedObject.deletedOrLocal === '1';\n        return storedObject;\n      }\n      return decodeMetadata(storedObject);\n    }\n\n    // ensure that every metadata has a winningRev and seq,\n    // which was previously created on-the-fly but better to migrate\n    var bySeqStore = txn.objectStore(BY_SEQ_STORE);\n    var docStore = txn.objectStore(DOC_STORE);\n    var cursor = docStore.openCursor();\n    cursor.onsuccess = function (e) {\n      var cursor = e.target.result;\n      if (!cursor) {\n        return; // done\n      }\n      var metadata = decodeMetadataCompat(cursor.value);\n\n      metadata.winningRev = metadata.winningRev ||\n        winningRev(metadata);\n\n      function fetchMetadataSeq() {\n        // metadata.seq was added post-3.2.0, so if it's missing,\n        // we need to fetch it manually\n        var start = metadata.id + '::';\n        var end = metadata.id + '::\\uffff';\n        var req = bySeqStore.index('_doc_id_rev').openCursor(\n          IDBKeyRange.bound(start, end));\n\n        var metadataSeq = 0;\n        req.onsuccess = function (e) {\n          var cursor = e.target.result;\n          if (!cursor) {\n            metadata.seq = metadataSeq;\n            return onGetMetadataSeq();\n          }\n          var seq = cursor.primaryKey;\n          if (seq > metadataSeq) {\n            metadataSeq = seq;\n          }\n          cursor.continue();\n        };\n      }\n\n      function onGetMetadataSeq() {\n        var metadataToStore = encodeMetadata(metadata,\n          metadata.winningRev, metadata.deleted);\n\n        var req = docStore.put(metadataToStore);\n        req.onsuccess = function () {\n          cursor.continue();\n        };\n      }\n\n      if (metadata.seq) {\n        return onGetMetadataSeq();\n      }\n\n      fetchMetadataSeq();\n    };\n\n  }\n\n  api.type = function () {\n    return 'idb';\n  };\n\n  api._id = toPromise(function (callback) {\n    callback(null, api._meta.instanceId);\n  });\n\n  api._bulkDocs = function idb_bulkDocs(req, reqOpts, callback) {\n    idbBulkDocs(opts, req, reqOpts, api, idb, idbChanges, callback);\n  };\n\n  // First we look up the metadata in the ids database, then we fetch the\n  // current revision(s) from the by sequence store\n  api._get = function idb_get(id, opts, callback) {\n    var doc;\n    var metadata;\n    var err;\n    var txn = opts.ctx;\n    if (!txn) {\n      var txnResult = openTransactionSafely(idb,\n        [DOC_STORE, BY_SEQ_STORE, ATTACH_STORE], 'readonly');\n      if (txnResult.error) {\n        return callback(txnResult.error);\n      }\n      txn = txnResult.txn;\n    }\n\n    function finish() {\n      callback(err, {doc: doc, metadata: metadata, ctx: txn});\n    }\n\n    txn.objectStore(DOC_STORE).get(id).onsuccess = function (e) {\n      metadata = decodeMetadata(e.target.result);\n      // we can determine the result here if:\n      // 1. there is no such document\n      // 2. the document is deleted and we don't ask about specific rev\n      // When we ask with opts.rev we expect the answer to be either\n      // doc (possibly with _deleted=true) or missing error\n      if (!metadata) {\n        err = createError(MISSING_DOC, 'missing');\n        return finish();\n      }\n      if (isDeleted(metadata) && !opts.rev) {\n        err = createError(MISSING_DOC, \"deleted\");\n        return finish();\n      }\n      var objectStore = txn.objectStore(BY_SEQ_STORE);\n\n      var rev = opts.rev || metadata.winningRev;\n      var key = metadata.id + '::' + rev;\n\n      objectStore.index('_doc_id_rev').get(key).onsuccess = function (e) {\n        doc = e.target.result;\n        if (doc) {\n          doc = decodeDoc(doc);\n        }\n        if (!doc) {\n          err = createError(MISSING_DOC, 'missing');\n          return finish();\n        }\n        finish();\n      };\n    };\n  };\n\n  api._getAttachment = function (docId, attachId, attachment, opts, callback) {\n    var txn;\n    if (opts.ctx) {\n      txn = opts.ctx;\n    } else {\n      var txnResult = openTransactionSafely(idb,\n        [DOC_STORE, BY_SEQ_STORE, ATTACH_STORE], 'readonly');\n      if (txnResult.error) {\n        return callback(txnResult.error);\n      }\n      txn = txnResult.txn;\n    }\n    var digest = attachment.digest;\n    var type = attachment.content_type;\n\n    txn.objectStore(ATTACH_STORE).get(digest).onsuccess = function (e) {\n      var body = e.target.result.body;\n      readBlobData(body, type, opts.binary, function (blobData) {\n        callback(null, blobData);\n      });\n    };\n  };\n\n  api._info = function idb_info(callback) {\n\n    if (idb === null || !cachedDBs.has(dbName)) {\n      var error = new Error('db isn\\'t open');\n      error.id = 'idbNull';\n      return callback(error);\n    }\n    var updateSeq;\n    var docCount;\n\n    var txnResult = openTransactionSafely(idb, [BY_SEQ_STORE], 'readonly');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    var txn = txnResult.txn;\n    var cursor = txn.objectStore(BY_SEQ_STORE).openCursor(null, 'prev');\n    cursor.onsuccess = function (event) {\n      var cursor = event.target.result;\n      updateSeq = cursor ? cursor.key : 0;\n      // count within the same txn for consistency\n      docCount = api._meta.docCount;\n    };\n\n    txn.oncomplete = function () {\n      callback(null, {\n        doc_count: docCount,\n        update_seq: updateSeq,\n        // for debugging\n        idb_attachment_format: (api._meta.blobSupport ? 'binary' : 'base64')\n      });\n    };\n  };\n\n  api._allDocs = function idb_allDocs(opts, callback) {\n    idbAllDocs(opts, api, idb, callback);\n  };\n\n  api._changes = function (opts) {\n    opts = clone(opts);\n\n    if (opts.continuous) {\n      var id = dbName + ':' + uuid();\n      idbChanges.addListener(dbName, id, api, opts);\n      idbChanges.notify(dbName);\n      return {\n        cancel: function () {\n          idbChanges.removeListener(dbName, id);\n        }\n      };\n    }\n\n    var docIds = opts.doc_ids && new _Set(opts.doc_ids);\n\n    opts.since = opts.since || 0;\n    var lastSeq = opts.since;\n\n    var limit = 'limit' in opts ? opts.limit : -1;\n    if (limit === 0) {\n      limit = 1; // per CouchDB _changes spec\n    }\n    var returnDocs;\n    if ('return_docs' in opts) {\n      returnDocs = opts.return_docs;\n    } else if ('returnDocs' in opts) {\n      // TODO: Remove 'returnDocs' in favor of 'return_docs' in a future release\n      returnDocs = opts.returnDocs;\n    } else {\n      returnDocs = true;\n    }\n\n    var results = [];\n    var numResults = 0;\n    var filter = filterChange(opts);\n    var docIdsToMetadata = new _Map();\n\n    var txn;\n    var bySeqStore;\n    var docStore;\n    var docIdRevIndex;\n\n    function onGetCursor(cursor) {\n\n      var doc = decodeDoc(cursor.value);\n      var seq = cursor.key;\n\n      if (docIds && !docIds.has(doc._id)) {\n        return cursor.continue();\n      }\n\n      var metadata;\n\n      function onGetMetadata() {\n        if (metadata.seq !== seq) {\n          // some other seq is later\n          return cursor.continue();\n        }\n\n        lastSeq = seq;\n\n        if (metadata.winningRev === doc._rev) {\n          return onGetWinningDoc(doc);\n        }\n\n        fetchWinningDoc();\n      }\n\n      function fetchWinningDoc() {\n        var docIdRev = doc._id + '::' + metadata.winningRev;\n        var req = docIdRevIndex.get(docIdRev);\n        req.onsuccess = function (e) {\n          onGetWinningDoc(decodeDoc(e.target.result));\n        };\n      }\n\n      function onGetWinningDoc(winningDoc) {\n\n        var change = opts.processChange(winningDoc, metadata, opts);\n        change.seq = metadata.seq;\n\n        var filtered = filter(change);\n        if (typeof filtered === 'object') {\n          return opts.complete(filtered);\n        }\n\n        if (filtered) {\n          numResults++;\n          if (returnDocs) {\n            results.push(change);\n          }\n          // process the attachment immediately\n          // for the benefit of live listeners\n          if (opts.attachments && opts.include_docs) {\n            fetchAttachmentsIfNecessary(winningDoc, opts, txn, function () {\n              postProcessAttachments([change], opts.binary).then(function () {\n                opts.onChange(change);\n              });\n            });\n          } else {\n            opts.onChange(change);\n          }\n        }\n        if (numResults !== limit) {\n          cursor.continue();\n        }\n      }\n\n      metadata = docIdsToMetadata.get(doc._id);\n      if (metadata) { // cached\n        return onGetMetadata();\n      }\n      // metadata not cached, have to go fetch it\n      docStore.get(doc._id).onsuccess = function (event) {\n        metadata = decodeMetadata(event.target.result);\n        docIdsToMetadata.set(doc._id, metadata);\n        onGetMetadata();\n      };\n    }\n\n    function onsuccess(event) {\n      var cursor = event.target.result;\n\n      if (!cursor) {\n        return;\n      }\n      onGetCursor(cursor);\n    }\n\n    function fetchChanges() {\n      var objectStores = [DOC_STORE, BY_SEQ_STORE];\n      if (opts.attachments) {\n        objectStores.push(ATTACH_STORE);\n      }\n      var txnResult = openTransactionSafely(idb, objectStores, 'readonly');\n      if (txnResult.error) {\n        return opts.complete(txnResult.error);\n      }\n      txn = txnResult.txn;\n      txn.onabort = idbError(opts.complete);\n      txn.oncomplete = onTxnComplete;\n\n      bySeqStore = txn.objectStore(BY_SEQ_STORE);\n      docStore = txn.objectStore(DOC_STORE);\n      docIdRevIndex = bySeqStore.index('_doc_id_rev');\n\n      var req;\n\n      if (opts.descending) {\n        req = bySeqStore.openCursor(null, 'prev');\n      } else {\n        req = bySeqStore.openCursor(IDBKeyRange.lowerBound(opts.since, true));\n      }\n\n      req.onsuccess = onsuccess;\n    }\n\n    fetchChanges();\n\n    function onTxnComplete() {\n\n      function finish() {\n        opts.complete(null, {\n          results: results,\n          last_seq: lastSeq\n        });\n      }\n\n      if (!opts.continuous && opts.attachments) {\n        // cannot guarantee that postProcessing was already done,\n        // so do it again\n        postProcessAttachments(results).then(finish);\n      } else {\n        finish();\n      }\n    }\n  };\n\n  api._close = function (callback) {\n    if (idb === null) {\n      return callback(createError(NOT_OPEN));\n    }\n\n    // https://developer.mozilla.org/en-US/docs/IndexedDB/IDBDatabase#close\n    // \"Returns immediately and closes the connection in a separate thread...\"\n    idb.close();\n    cachedDBs.delete(dbName);\n    idb = null;\n    callback();\n  };\n\n  api._getRevisionTree = function (docId, callback) {\n    var txnResult = openTransactionSafely(idb, [DOC_STORE], 'readonly');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    var txn = txnResult.txn;\n    var req = txn.objectStore(DOC_STORE).get(docId);\n    req.onsuccess = function (event) {\n      var doc = decodeMetadata(event.target.result);\n      if (!doc) {\n        callback(createError(MISSING_DOC));\n      } else {\n        callback(null, doc.rev_tree);\n      }\n    };\n  };\n\n  // This function removes revisions of document docId\n  // which are listed in revs and sets this document\n  // revision to to rev_tree\n  api._doCompaction = function (docId, revs, callback) {\n    var stores = [\n      DOC_STORE,\n      BY_SEQ_STORE,\n      ATTACH_STORE,\n      ATTACH_AND_SEQ_STORE\n    ];\n    var txnResult = openTransactionSafely(idb, stores, 'readwrite');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    var txn = txnResult.txn;\n\n    var docStore = txn.objectStore(DOC_STORE);\n\n    docStore.get(docId).onsuccess = function (event) {\n      var metadata = decodeMetadata(event.target.result);\n      traverseRevTree(metadata.rev_tree, function (isLeaf, pos,\n                                                         revHash, ctx, opts) {\n        var rev = pos + '-' + revHash;\n        if (revs.indexOf(rev) !== -1) {\n          opts.status = 'missing';\n        }\n      });\n      compactRevs(revs, docId, txn);\n      var winningRev = metadata.winningRev;\n      var deleted = metadata.deleted;\n      txn.objectStore(DOC_STORE).put(\n        encodeMetadata(metadata, winningRev, deleted));\n    };\n    txn.onabort = idbError(callback);\n    txn.oncomplete = function () {\n      callback();\n    };\n  };\n\n\n  api._getLocal = function (id, callback) {\n    var txnResult = openTransactionSafely(idb, [LOCAL_STORE], 'readonly');\n    if (txnResult.error) {\n      return callback(txnResult.error);\n    }\n    var tx = txnResult.txn;\n    var req = tx.objectStore(LOCAL_STORE).get(id);\n\n    req.onerror = idbError(callback);\n    req.onsuccess = function (e) {\n      var doc = e.target.result;\n      if (!doc) {\n        callback(createError(MISSING_DOC));\n      } else {\n        delete doc['_doc_id_rev']; // for backwards compat\n        callback(null, doc);\n      }\n    };\n  };\n\n  api._putLocal = function (doc, opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    delete doc._revisions; // ignore this, trust the rev\n    var oldRev = doc._rev;\n    var id = doc._id;\n    if (!oldRev) {\n      doc._rev = '0-1';\n    } else {\n      doc._rev = '0-' + (parseInt(oldRev.split('-')[1], 10) + 1);\n    }\n\n    var tx = opts.ctx;\n    var ret;\n    if (!tx) {\n      var txnResult = openTransactionSafely(idb, [LOCAL_STORE], 'readwrite');\n      if (txnResult.error) {\n        return callback(txnResult.error);\n      }\n      tx = txnResult.txn;\n      tx.onerror = idbError(callback);\n      tx.oncomplete = function () {\n        if (ret) {\n          callback(null, ret);\n        }\n      };\n    }\n\n    var oStore = tx.objectStore(LOCAL_STORE);\n    var req;\n    if (oldRev) {\n      req = oStore.get(id);\n      req.onsuccess = function (e) {\n        var oldDoc = e.target.result;\n        if (!oldDoc || oldDoc._rev !== oldRev) {\n          callback(createError(REV_CONFLICT));\n        } else { // update\n          var req = oStore.put(doc);\n          req.onsuccess = function () {\n            ret = {ok: true, id: doc._id, rev: doc._rev};\n            if (opts.ctx) { // return immediately\n              callback(null, ret);\n            }\n          };\n        }\n      };\n    } else { // new doc\n      req = oStore.add(doc);\n      req.onerror = function (e) {\n        // constraint error, already exists\n        callback(createError(REV_CONFLICT));\n        e.preventDefault(); // avoid transaction abort\n        e.stopPropagation(); // avoid transaction onerror\n      };\n      req.onsuccess = function () {\n        ret = {ok: true, id: doc._id, rev: doc._rev};\n        if (opts.ctx) { // return immediately\n          callback(null, ret);\n        }\n      };\n    }\n  };\n\n  api._removeLocal = function (doc, opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    var tx = opts.ctx;\n    if (!tx) {\n      var txnResult = openTransactionSafely(idb, [LOCAL_STORE], 'readwrite');\n      if (txnResult.error) {\n        return callback(txnResult.error);\n      }\n      tx = txnResult.txn;\n      tx.oncomplete = function () {\n        if (ret) {\n          callback(null, ret);\n        }\n      };\n    }\n    var ret;\n    var id = doc._id;\n    var oStore = tx.objectStore(LOCAL_STORE);\n    var req = oStore.get(id);\n\n    req.onerror = idbError(callback);\n    req.onsuccess = function (e) {\n      var oldDoc = e.target.result;\n      if (!oldDoc || oldDoc._rev !== doc._rev) {\n        callback(createError(MISSING_DOC));\n      } else {\n        oStore.delete(id);\n        ret = {ok: true, id: id, rev: '0-0'};\n        if (opts.ctx) { // return immediately\n          callback(null, ret);\n        }\n      }\n    };\n  };\n\n  api._destroy = function (opts, callback) {\n    idbChanges.removeAllListeners(dbName);\n\n    //Close open request for \"dbName\" database to fix ie delay.\n    var openReq = openReqList.get(dbName);\n    if (openReq && openReq.result) {\n      openReq.result.close();\n      cachedDBs.delete(dbName);\n    }\n    var req = indexedDB.deleteDatabase(dbName);\n\n    req.onsuccess = function () {\n      //Remove open request from the list.\n      openReqList.delete(dbName);\n      if (hasLocalStorage() && (dbName in localStorage)) {\n        delete localStorage[dbName];\n      }\n      callback(null, { 'ok': true });\n    };\n\n    req.onerror = idbError(callback);\n  };\n\n  var cached = cachedDBs.get(dbName);\n\n  if (cached) {\n    idb = cached.idb;\n    api._meta = cached.global;\n    process.nextTick(function () {\n      callback(null, api);\n    });\n    return;\n  }\n\n  var req;\n  if (opts.storage) {\n    req = tryStorageOption(dbName, opts.storage);\n  } else {\n    req = indexedDB.open(dbName, ADAPTER_VERSION);\n  }\n\n  openReqList.set(dbName, req);\n\n  req.onupgradeneeded = function (e) {\n    var db = e.target.result;\n    if (e.oldVersion < 1) {\n      return createSchema(db); // new db, initial schema\n    }\n    // do migrations\n\n    var txn = e.currentTarget.transaction;\n    // these migrations have to be done in this function, before\n    // control is returned to the event loop, because IndexedDB\n\n    if (e.oldVersion < 3) {\n      createLocalStoreSchema(db); // v2 -> v3\n    }\n    if (e.oldVersion < 4) {\n      addAttachAndSeqStore(db); // v3 -> v4\n    }\n\n    var migrations = [\n      addDeletedOrLocalIndex, // v1 -> v2\n      migrateLocalStore,      // v2 -> v3\n      migrateAttsAndSeqs,     // v3 -> v4\n      migrateMetadata         // v4 -> v5\n    ];\n\n    var i = e.oldVersion;\n\n    function next() {\n      var migration = migrations[i - 1];\n      i++;\n      if (migration) {\n        migration(txn, next);\n      }\n    }\n\n    next();\n  };\n\n  req.onsuccess = function (e) {\n\n    idb = e.target.result;\n\n    idb.onversionchange = function () {\n      idb.close();\n      cachedDBs.delete(dbName);\n    };\n\n    idb.onabort = function (e) {\n      guardedConsole('error', 'Database has a global failure', e.target.error);\n      idb.close();\n      cachedDBs.delete(dbName);\n    };\n\n    var txn = idb.transaction([\n      META_STORE,\n      DETECT_BLOB_SUPPORT_STORE,\n      DOC_STORE\n    ], 'readwrite');\n\n    var req = txn.objectStore(META_STORE).get(META_STORE);\n\n    var blobSupport = null;\n    var docCount = null;\n    var instanceId = null;\n\n    req.onsuccess = function (e) {\n\n      var checkSetupComplete = function () {\n        if (blobSupport === null || docCount === null ||\n            instanceId === null) {\n          return;\n        } else {\n          api._meta = {\n            name: dbName,\n            instanceId: instanceId,\n            blobSupport: blobSupport,\n            docCount: docCount\n          };\n\n          cachedDBs.set(dbName, {\n            idb: idb,\n            global: api._meta\n          });\n          callback(null, api);\n        }\n      };\n\n      //\n      // fetch/store the id\n      //\n\n      var meta = e.target.result || {id: META_STORE};\n      if (dbName  + '_id' in meta) {\n        instanceId = meta[dbName + '_id'];\n        checkSetupComplete();\n      } else {\n        instanceId = uuid();\n        meta[dbName + '_id'] = instanceId;\n        txn.objectStore(META_STORE).put(meta).onsuccess = function () {\n          checkSetupComplete();\n        };\n      }\n\n      //\n      // check blob support\n      //\n\n      if (!blobSupportPromise) {\n        // make sure blob support is only checked once\n        blobSupportPromise = checkBlobSupport(txn);\n      }\n\n      blobSupportPromise.then(function (val) {\n        blobSupport = val;\n        checkSetupComplete();\n      });\n\n      //\n      // count docs\n      //\n\n      var index = txn.objectStore(DOC_STORE).index('deletedOrLocal');\n      index.count(IDBKeyRange.only('0')).onsuccess = function (e) {\n        docCount = e.target.result;\n        checkSetupComplete();\n      };\n\n    };\n  };\n\n  req.onerror = function () {\n    var msg = 'Failed to open indexedDB, are you in private browsing mode?';\n    guardedConsole('error', msg);\n    callback(createError(IDB_ERROR, msg));\n  };\n}\n\nIdbPouch.valid = function () {\n  // Issue #2533, we finally gave up on doing bug\n  // detection instead of browser sniffing. Safari brought us\n  // to our knees.\n  var isSafari = typeof openDatabase !== 'undefined' &&\n    /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) &&\n    !/Chrome/.test(navigator.userAgent) &&\n    !/BlackBerry/.test(navigator.platform);\n\n  // some outdated implementations of IDB that appear on Samsung\n  // and HTC Android devices <4.4 are missing IDBKeyRange\n  return !isSafari && typeof indexedDB !== 'undefined' &&\n    typeof IDBKeyRange !== 'undefined';\n};\n\nfunction tryStorageOption(dbName, storage) {\n  try { // option only available in Firefox 26+\n    return indexedDB.open(dbName, {\n      version: ADAPTER_VERSION,\n      storage: storage\n    });\n  } catch(err) {\n      return indexedDB.open(dbName, ADAPTER_VERSION);\n  }\n}\n\nfunction IDBPouch (PouchDB) {\n  PouchDB.adapter('idb', IdbPouch, true);\n}\n\n//\n// Parsing hex strings. Yeah.\n//\n// So basically we need this because of a bug in WebSQL:\n// https://code.google.com/p/chromium/issues/detail?id=422690\n// https://bugs.webkit.org/show_bug.cgi?id=137637\n//\n// UTF-8 and UTF-16 are provided as separate functions\n// for meager performance improvements\n//\n\nfunction decodeUtf8(str) {\n  return decodeURIComponent(escape(str));\n}\n\nfunction hexToInt(charCode) {\n  // '0'-'9' is 48-57\n  // 'A'-'F' is 65-70\n  // SQLite will only give us uppercase hex\n  return charCode < 65 ? (charCode - 48) : (charCode - 55);\n}\n\n\n// Example:\n// pragma encoding=utf8;\n// select hex('A');\n// returns '41'\nfunction parseHexUtf8(str, start, end) {\n  var result = '';\n  while (start < end) {\n    result += String.fromCharCode(\n      (hexToInt(str.charCodeAt(start++)) << 4) |\n        hexToInt(str.charCodeAt(start++)));\n  }\n  return result;\n}\n\n// Example:\n// pragma encoding=utf16;\n// select hex('A');\n// returns '4100'\n// notice that the 00 comes after the 41 (i.e. it's swizzled)\nfunction parseHexUtf16(str, start, end) {\n  var result = '';\n  while (start < end) {\n    // UTF-16, so swizzle the bytes\n    result += String.fromCharCode(\n      (hexToInt(str.charCodeAt(start + 2)) << 12) |\n        (hexToInt(str.charCodeAt(start + 3)) << 8) |\n        (hexToInt(str.charCodeAt(start)) << 4) |\n        hexToInt(str.charCodeAt(start + 1)));\n    start += 4;\n  }\n  return result;\n}\n\nfunction parseHexString(str, encoding) {\n  if (encoding === 'UTF-8') {\n    return decodeUtf8(parseHexUtf8(str, 0, str.length));\n  } else {\n    return parseHexUtf16(str, 0, str.length);\n  }\n}\n\nfunction quote(str) {\n  return \"'\" + str + \"'\";\n}\n\nvar ADAPTER_VERSION$1 = 7; // used to manage migrations\n\n// The object stores created for each database\n// DOC_STORE stores the document meta data, its revision history and state\nvar DOC_STORE$1 = quote('document-store');\n// BY_SEQ_STORE stores a particular version of a document, keyed by its\n// sequence id\nvar BY_SEQ_STORE$1 = quote('by-sequence');\n// Where we store attachments\nvar ATTACH_STORE$1 = quote('attach-store');\nvar LOCAL_STORE$1 = quote('local-store');\nvar META_STORE$1 = quote('metadata-store');\n// where we store many-to-many relations between attachment\n// digests and seqs\nvar ATTACH_AND_SEQ_STORE$1 = quote('attach-seq-store');\n\n// escapeBlob and unescapeBlob are workarounds for a websql bug:\n// https://code.google.com/p/chromium/issues/detail?id=422690\n// https://bugs.webkit.org/show_bug.cgi?id=137637\n// The goal is to never actually insert the \\u0000 character\n// in the database.\nfunction escapeBlob(str) {\n  return str\n    .replace(/\\u0002/g, '\\u0002\\u0002')\n    .replace(/\\u0001/g, '\\u0001\\u0002')\n    .replace(/\\u0000/g, '\\u0001\\u0001');\n}\n\nfunction unescapeBlob(str) {\n  return str\n    .replace(/\\u0001\\u0001/g, '\\u0000')\n    .replace(/\\u0001\\u0002/g, '\\u0001')\n    .replace(/\\u0002\\u0002/g, '\\u0002');\n}\n\nfunction stringifyDoc(doc) {\n  // don't bother storing the id/rev. it uses lots of space,\n  // in persistent map/reduce especially\n  delete doc._id;\n  delete doc._rev;\n  return JSON.stringify(doc);\n}\n\nfunction unstringifyDoc(doc, id, rev) {\n  doc = JSON.parse(doc);\n  doc._id = id;\n  doc._rev = rev;\n  return doc;\n}\n\n// question mark groups IN queries, e.g. 3 -> '(?,?,?)'\nfunction qMarks(num) {\n  var s = '(';\n  while (num--) {\n    s += '?';\n    if (num) {\n      s += ',';\n    }\n  }\n  return s + ')';\n}\n\nfunction select(selector, table, joiner, where, orderBy) {\n  return 'SELECT ' + selector + ' FROM ' +\n    (typeof table === 'string' ? table : table.join(' JOIN ')) +\n    (joiner ? (' ON ' + joiner) : '') +\n    (where ? (' WHERE ' +\n    (typeof where === 'string' ? where : where.join(' AND '))) : '') +\n    (orderBy ? (' ORDER BY ' + orderBy) : '');\n}\n\nfunction compactRevs$1(revs, docId, tx) {\n\n  if (!revs.length) {\n    return;\n  }\n\n  var numDone = 0;\n  var seqs = [];\n\n  function checkDone() {\n    if (++numDone === revs.length) { // done\n      deleteOrphans();\n    }\n  }\n\n  function deleteOrphans() {\n    // find orphaned attachment digests\n\n    if (!seqs.length) {\n      return;\n    }\n\n    var sql = 'SELECT DISTINCT digest AS digest FROM ' +\n      ATTACH_AND_SEQ_STORE$1 + ' WHERE seq IN ' + qMarks(seqs.length);\n\n    tx.executeSql(sql, seqs, function (tx, res) {\n\n      var digestsToCheck = [];\n      for (var i = 0; i < res.rows.length; i++) {\n        digestsToCheck.push(res.rows.item(i).digest);\n      }\n      if (!digestsToCheck.length) {\n        return;\n      }\n\n      var sql = 'DELETE FROM ' + ATTACH_AND_SEQ_STORE$1 +\n        ' WHERE seq IN (' +\n        seqs.map(function () { return '?'; }).join(',') +\n        ')';\n      tx.executeSql(sql, seqs, function (tx) {\n\n        var sql = 'SELECT digest FROM ' + ATTACH_AND_SEQ_STORE$1 +\n          ' WHERE digest IN (' +\n          digestsToCheck.map(function () { return '?'; }).join(',') +\n          ')';\n        tx.executeSql(sql, digestsToCheck, function (tx, res) {\n          var nonOrphanedDigests = new _Set();\n          for (var i = 0; i < res.rows.length; i++) {\n            nonOrphanedDigests.add(res.rows.item(i).digest);\n          }\n          digestsToCheck.forEach(function (digest) {\n            if (nonOrphanedDigests.has(digest)) {\n              return;\n            }\n            tx.executeSql(\n              'DELETE FROM ' + ATTACH_AND_SEQ_STORE$1 + ' WHERE digest=?',\n              [digest]);\n            tx.executeSql(\n              'DELETE FROM ' + ATTACH_STORE$1 + ' WHERE digest=?', [digest]);\n          });\n        });\n      });\n    });\n  }\n\n  // update by-seq and attach stores in parallel\n  revs.forEach(function (rev) {\n    var sql = 'SELECT seq FROM ' + BY_SEQ_STORE$1 +\n      ' WHERE doc_id=? AND rev=?';\n\n    tx.executeSql(sql, [docId, rev], function (tx, res) {\n      if (!res.rows.length) { // already deleted\n        return checkDone();\n      }\n      var seq = res.rows.item(0).seq;\n      seqs.push(seq);\n\n      tx.executeSql(\n        'DELETE FROM ' + BY_SEQ_STORE$1 + ' WHERE seq=?', [seq], checkDone);\n    });\n  });\n}\n\nfunction websqlError(callback) {\n  return function (event) {\n    guardedConsole('error', 'WebSQL threw an error', event);\n    // event may actually be a SQLError object, so report is as such\n    var errorNameMatch = event && event.constructor.toString()\n        .match(/function ([^\\(]+)/);\n    var errorName = (errorNameMatch && errorNameMatch[1]) || event.type;\n    var errorReason = event.target || event.message;\n    callback(createError(WSQ_ERROR, errorReason, errorName));\n  };\n}\n\nfunction getSize(opts) {\n  if ('size' in opts) {\n    // triggers immediate popup in iOS, fixes #2347\n    // e.g. 5000001 asks for 5 MB, 10000001 asks for 10 MB,\n    return opts.size * 1000000;\n  }\n  // In iOS, doesn't matter as long as it's <= 5000000.\n  // Except that if you request too much, our tests fail\n  // because of the native \"do you accept?\" popup.\n  // In Android <=4.3, this value is actually used as an\n  // honest-to-god ceiling for data, so we need to\n  // set it to a decently high number.\n  var isAndroid = typeof navigator !== 'undefined' &&\n    /Android/.test(navigator.userAgent);\n  return isAndroid ? 5000000 : 1; // in PhantomJS, if you use 0 it will crash\n}\n\nfunction websqlBulkDocs(dbOpts, req, opts, api, db, websqlChanges, callback) {\n  var newEdits = opts.new_edits;\n  var userDocs = req.docs;\n\n  // Parse the docs, give them a sequence number for the result\n  var docInfos = userDocs.map(function (doc) {\n    if (doc._id && isLocalId(doc._id)) {\n      return doc;\n    }\n    var newDoc = parseDoc(doc, newEdits);\n    return newDoc;\n  });\n\n  var docInfoErrors = docInfos.filter(function (docInfo) {\n    return docInfo.error;\n  });\n  if (docInfoErrors.length) {\n    return callback(docInfoErrors[0]);\n  }\n\n  var tx;\n  var results = new Array(docInfos.length);\n  var fetchedDocs = new _Map();\n\n  var preconditionErrored;\n  function complete() {\n    if (preconditionErrored) {\n      return callback(preconditionErrored);\n    }\n    websqlChanges.notify(api._name);\n    api._docCount = -1; // invalidate\n    callback(null, results);\n  }\n\n  function verifyAttachment(digest, callback) {\n    var sql = 'SELECT count(*) as cnt FROM ' + ATTACH_STORE$1 +\n      ' WHERE digest=?';\n    tx.executeSql(sql, [digest], function (tx, result) {\n      if (result.rows.item(0).cnt === 0) {\n        var err = createError(MISSING_STUB,\n          'unknown stub attachment with digest ' +\n          digest);\n        callback(err);\n      } else {\n        callback();\n      }\n    });\n  }\n\n  function verifyAttachments(finish) {\n    var digests = [];\n    docInfos.forEach(function (docInfo) {\n      if (docInfo.data && docInfo.data._attachments) {\n        Object.keys(docInfo.data._attachments).forEach(function (filename) {\n          var att = docInfo.data._attachments[filename];\n          if (att.stub) {\n            digests.push(att.digest);\n          }\n        });\n      }\n    });\n    if (!digests.length) {\n      return finish();\n    }\n    var numDone = 0;\n    var err;\n\n    function checkDone() {\n      if (++numDone === digests.length) {\n        finish(err);\n      }\n    }\n    digests.forEach(function (digest) {\n      verifyAttachment(digest, function (attErr) {\n        if (attErr && !err) {\n          err = attErr;\n        }\n        checkDone();\n      });\n    });\n  }\n\n  function writeDoc(docInfo, winningRev, winningRevIsDeleted, newRevIsDeleted,\n                    isUpdate, delta, resultsIdx, callback) {\n\n    function finish() {\n      var data = docInfo.data;\n      var deletedInt = newRevIsDeleted ? 1 : 0;\n\n      var id = data._id;\n      var rev = data._rev;\n      var json = stringifyDoc(data);\n      var sql = 'INSERT INTO ' + BY_SEQ_STORE$1 +\n        ' (doc_id, rev, json, deleted) VALUES (?, ?, ?, ?);';\n      var sqlArgs = [id, rev, json, deletedInt];\n\n      // map seqs to attachment digests, which\n      // we will need later during compaction\n      function insertAttachmentMappings(seq, callback) {\n        var attsAdded = 0;\n        var attsToAdd = Object.keys(data._attachments || {});\n\n        if (!attsToAdd.length) {\n          return callback();\n        }\n        function checkDone() {\n          if (++attsAdded === attsToAdd.length) {\n            callback();\n          }\n          return false; // ack handling a constraint error\n        }\n        function add(att) {\n          var sql = 'INSERT INTO ' + ATTACH_AND_SEQ_STORE$1 +\n            ' (digest, seq) VALUES (?,?)';\n          var sqlArgs = [data._attachments[att].digest, seq];\n          tx.executeSql(sql, sqlArgs, checkDone, checkDone);\n          // second callback is for a constaint error, which we ignore\n          // because this docid/rev has already been associated with\n          // the digest (e.g. when new_edits == false)\n        }\n        for (var i = 0; i < attsToAdd.length; i++) {\n          add(attsToAdd[i]); // do in parallel\n        }\n      }\n\n      tx.executeSql(sql, sqlArgs, function (tx, result) {\n        var seq = result.insertId;\n        insertAttachmentMappings(seq, function () {\n          dataWritten(tx, seq);\n        });\n      }, function () {\n        // constraint error, recover by updating instead (see #1638)\n        var fetchSql = select('seq', BY_SEQ_STORE$1, null,\n          'doc_id=? AND rev=?');\n        tx.executeSql(fetchSql, [id, rev], function (tx, res) {\n          var seq = res.rows.item(0).seq;\n          var sql = 'UPDATE ' + BY_SEQ_STORE$1 +\n            ' SET json=?, deleted=? WHERE doc_id=? AND rev=?;';\n          var sqlArgs = [json, deletedInt, id, rev];\n          tx.executeSql(sql, sqlArgs, function (tx) {\n            insertAttachmentMappings(seq, function () {\n              dataWritten(tx, seq);\n            });\n          });\n        });\n        return false; // ack that we've handled the error\n      });\n    }\n\n    function collectResults(attachmentErr) {\n      if (!err) {\n        if (attachmentErr) {\n          err = attachmentErr;\n          callback(err);\n        } else if (recv === attachments.length) {\n          finish();\n        }\n      }\n    }\n\n    var err = null;\n    var recv = 0;\n\n    docInfo.data._id = docInfo.metadata.id;\n    docInfo.data._rev = docInfo.metadata.rev;\n    var attachments = Object.keys(docInfo.data._attachments || {});\n\n\n    if (newRevIsDeleted) {\n      docInfo.data._deleted = true;\n    }\n\n    function attachmentSaved(err) {\n      recv++;\n      collectResults(err);\n    }\n\n    attachments.forEach(function (key) {\n      var att = docInfo.data._attachments[key];\n      if (!att.stub) {\n        var data = att.data;\n        delete att.data;\n        att.revpos = parseInt(winningRev, 10);\n        var digest = att.digest;\n        saveAttachment(digest, data, attachmentSaved);\n      } else {\n        recv++;\n        collectResults();\n      }\n    });\n\n    if (!attachments.length) {\n      finish();\n    }\n\n    function dataWritten(tx, seq) {\n      var id = docInfo.metadata.id;\n\n      var revsToCompact = docInfo.stemmedRevs || [];\n      if (isUpdate && api.auto_compaction) {\n        revsToCompact = compactTree(docInfo.metadata).concat(revsToCompact);\n      }\n      if (revsToCompact.length) {\n        compactRevs$1(revsToCompact, id, tx);\n      }\n\n      docInfo.metadata.seq = seq;\n      delete docInfo.metadata.rev;\n\n      var sql = isUpdate ?\n      'UPDATE ' + DOC_STORE$1 +\n      ' SET json=?, max_seq=?, winningseq=' +\n      '(SELECT seq FROM ' + BY_SEQ_STORE$1 +\n      ' WHERE doc_id=' + DOC_STORE$1 + '.id AND rev=?) WHERE id=?'\n        : 'INSERT INTO ' + DOC_STORE$1 +\n      ' (id, winningseq, max_seq, json) VALUES (?,?,?,?);';\n      var metadataStr = safeJsonStringify(docInfo.metadata);\n      var params = isUpdate ?\n        [metadataStr, seq, winningRev, id] :\n        [id, seq, seq, metadataStr];\n      tx.executeSql(sql, params, function () {\n        results[resultsIdx] = {\n          ok: true,\n          id: docInfo.metadata.id,\n          rev: winningRev\n        };\n        fetchedDocs.set(id, docInfo.metadata);\n        callback();\n      });\n    }\n  }\n\n  function websqlProcessDocs() {\n    processDocs(dbOpts.revs_limit, docInfos, api, fetchedDocs, tx,\n                results, writeDoc, opts);\n  }\n\n  function fetchExistingDocs(callback) {\n    if (!docInfos.length) {\n      return callback();\n    }\n\n    var numFetched = 0;\n\n    function checkDone() {\n      if (++numFetched === docInfos.length) {\n        callback();\n      }\n    }\n\n    docInfos.forEach(function (docInfo) {\n      if (docInfo._id && isLocalId(docInfo._id)) {\n        return checkDone(); // skip local docs\n      }\n      var id = docInfo.metadata.id;\n      tx.executeSql('SELECT json FROM ' + DOC_STORE$1 +\n      ' WHERE id = ?', [id], function (tx, result) {\n        if (result.rows.length) {\n          var metadata = safeJsonParse(result.rows.item(0).json);\n          fetchedDocs.set(id, metadata);\n        }\n        checkDone();\n      });\n    });\n  }\n\n  function saveAttachment(digest, data, callback) {\n    var sql = 'SELECT digest FROM ' + ATTACH_STORE$1 + ' WHERE digest=?';\n    tx.executeSql(sql, [digest], function (tx, result) {\n      if (result.rows.length) { // attachment already exists\n        return callback();\n      }\n      // we could just insert before selecting and catch the error,\n      // but my hunch is that it's cheaper not to serialize the blob\n      // from JS to C if we don't have to (TODO: confirm this)\n      sql = 'INSERT INTO ' + ATTACH_STORE$1 +\n      ' (digest, body, escaped) VALUES (?,?,1)';\n      tx.executeSql(sql, [digest, escapeBlob(data)], function () {\n        callback();\n      }, function () {\n        // ignore constaint errors, means it already exists\n        callback();\n        return false; // ack we handled the error\n      });\n    });\n  }\n\n  preprocessAttachments(docInfos, 'binary', function (err) {\n    if (err) {\n      return callback(err);\n    }\n    db.transaction(function (txn) {\n      tx = txn;\n      verifyAttachments(function (err) {\n        if (err) {\n          preconditionErrored = err;\n        } else {\n          fetchExistingDocs(websqlProcessDocs);\n        }\n      });\n    }, websqlError(callback), complete);\n  });\n}\n\nvar cachedDatabases = new _Map();\n\n// openDatabase passed in through opts (e.g. for node-websql)\nfunction openDatabaseWithOpts(opts) {\n  return opts.websql(opts.name, opts.version, opts.description, opts.size);\n}\n\nfunction openDBSafely(opts) {\n  try {\n    return {\n      db: openDatabaseWithOpts(opts)\n    };\n  } catch (err) {\n    return {\n      error: err\n    };\n  }\n}\n\nfunction openDB$1(opts) {\n  var cachedResult = cachedDatabases.get(opts.name);\n  if (!cachedResult) {\n    cachedResult = openDBSafely(opts);\n    cachedDatabases.set(opts.name, cachedResult);\n  }\n  return cachedResult;\n}\n\nvar websqlChanges = new Changes$1();\n\nfunction fetchAttachmentsIfNecessary$1(doc, opts, api, txn, cb) {\n  var attachments = Object.keys(doc._attachments || {});\n  if (!attachments.length) {\n    return cb && cb();\n  }\n  var numDone = 0;\n\n  function checkDone() {\n    if (++numDone === attachments.length && cb) {\n      cb();\n    }\n  }\n\n  function fetchAttachment(doc, att) {\n    var attObj = doc._attachments[att];\n    var attOpts = {binary: opts.binary, ctx: txn};\n    api._getAttachment(doc._id, att, attObj, attOpts, function (_, data) {\n      doc._attachments[att] = jsExtend.extend(\n        pick(attObj, ['digest', 'content_type']),\n        { data: data }\n      );\n      checkDone();\n    });\n  }\n\n  attachments.forEach(function (att) {\n    if (opts.attachments && opts.include_docs) {\n      fetchAttachment(doc, att);\n    } else {\n      doc._attachments[att].stub = true;\n      checkDone();\n    }\n  });\n}\n\nvar POUCH_VERSION = 1;\n\n// these indexes cover the ground for most allDocs queries\nvar BY_SEQ_STORE_DELETED_INDEX_SQL =\n  'CREATE INDEX IF NOT EXISTS \\'by-seq-deleted-idx\\' ON ' +\n  BY_SEQ_STORE$1 + ' (seq, deleted)';\nvar BY_SEQ_STORE_DOC_ID_REV_INDEX_SQL =\n  'CREATE UNIQUE INDEX IF NOT EXISTS \\'by-seq-doc-id-rev\\' ON ' +\n    BY_SEQ_STORE$1 + ' (doc_id, rev)';\nvar DOC_STORE_WINNINGSEQ_INDEX_SQL =\n  'CREATE INDEX IF NOT EXISTS \\'doc-winningseq-idx\\' ON ' +\n  DOC_STORE$1 + ' (winningseq)';\nvar ATTACH_AND_SEQ_STORE_SEQ_INDEX_SQL =\n  'CREATE INDEX IF NOT EXISTS \\'attach-seq-seq-idx\\' ON ' +\n    ATTACH_AND_SEQ_STORE$1 + ' (seq)';\nvar ATTACH_AND_SEQ_STORE_ATTACH_INDEX_SQL =\n  'CREATE UNIQUE INDEX IF NOT EXISTS \\'attach-seq-digest-idx\\' ON ' +\n    ATTACH_AND_SEQ_STORE$1 + ' (digest, seq)';\n\nvar DOC_STORE_AND_BY_SEQ_JOINER = BY_SEQ_STORE$1 +\n  '.seq = ' + DOC_STORE$1 + '.winningseq';\n\nvar SELECT_DOCS = BY_SEQ_STORE$1 + '.seq AS seq, ' +\n  BY_SEQ_STORE$1 + '.deleted AS deleted, ' +\n  BY_SEQ_STORE$1 + '.json AS data, ' +\n  BY_SEQ_STORE$1 + '.rev AS rev, ' +\n  DOC_STORE$1 + '.json AS metadata';\n\nfunction WebSqlPouch$1(opts, callback) {\n  var api = this;\n  var instanceId = null;\n  var size = getSize(opts);\n  var idRequests = [];\n  var encoding;\n\n  api._docCount = -1; // cache sqlite count(*) for performance\n  api._name = opts.name;\n\n  // extend the options here, because sqlite plugin has a ton of options\n  // and they are constantly changing, so it's more prudent to allow anything\n  var websqlOpts = jsExtend.extend({}, opts, {\n    version: POUCH_VERSION,\n    description: opts.name,\n    size: size\n  });\n  var openDBResult = openDB$1(websqlOpts);\n  if (openDBResult.error) {\n    return websqlError(callback)(openDBResult.error);\n  }\n  var db = openDBResult.db;\n  if (typeof db.readTransaction !== 'function') {\n    // doesn't exist in sqlite plugin\n    db.readTransaction = db.transaction;\n  }\n\n  function dbCreated() {\n    // note the db name in case the browser upgrades to idb\n    if (hasLocalStorage()) {\n      window.localStorage['_pouch__websqldb_' + api._name] = true;\n    }\n    callback(null, api);\n  }\n\n  // In this migration, we added the 'deleted' and 'local' columns to the\n  // by-seq and doc store tables.\n  // To preserve existing user data, we re-process all the existing JSON\n  // and add these values.\n  // Called migration2 because it corresponds to adapter version (db_version) #2\n  function runMigration2(tx, callback) {\n    // index used for the join in the allDocs query\n    tx.executeSql(DOC_STORE_WINNINGSEQ_INDEX_SQL);\n\n    tx.executeSql('ALTER TABLE ' + BY_SEQ_STORE$1 +\n      ' ADD COLUMN deleted TINYINT(1) DEFAULT 0', [], function () {\n      tx.executeSql(BY_SEQ_STORE_DELETED_INDEX_SQL);\n      tx.executeSql('ALTER TABLE ' + DOC_STORE$1 +\n        ' ADD COLUMN local TINYINT(1) DEFAULT 0', [], function () {\n        tx.executeSql('CREATE INDEX IF NOT EXISTS \\'doc-store-local-idx\\' ON ' +\n          DOC_STORE$1 + ' (local, id)');\n\n        var sql = 'SELECT ' + DOC_STORE$1 + '.winningseq AS seq, ' + DOC_STORE$1 +\n          '.json AS metadata FROM ' + BY_SEQ_STORE$1 + ' JOIN ' + DOC_STORE$1 +\n          ' ON ' + BY_SEQ_STORE$1 + '.seq = ' + DOC_STORE$1 + '.winningseq';\n\n        tx.executeSql(sql, [], function (tx, result) {\n\n          var deleted = [];\n          var local = [];\n\n          for (var i = 0; i < result.rows.length; i++) {\n            var item = result.rows.item(i);\n            var seq = item.seq;\n            var metadata = JSON.parse(item.metadata);\n            if (isDeleted(metadata)) {\n              deleted.push(seq);\n            }\n            if (isLocalId(metadata.id)) {\n              local.push(metadata.id);\n            }\n          }\n          tx.executeSql('UPDATE ' + DOC_STORE$1 + 'SET local = 1 WHERE id IN ' +\n            qMarks(local.length), local, function () {\n            tx.executeSql('UPDATE ' + BY_SEQ_STORE$1 +\n              ' SET deleted = 1 WHERE seq IN ' +\n              qMarks(deleted.length), deleted, callback);\n          });\n        });\n      });\n    });\n  }\n\n  // in this migration, we make all the local docs unversioned\n  function runMigration3(tx, callback) {\n    var local = 'CREATE TABLE IF NOT EXISTS ' + LOCAL_STORE$1 +\n      ' (id UNIQUE, rev, json)';\n    tx.executeSql(local, [], function () {\n      var sql = 'SELECT ' + DOC_STORE$1 + '.id AS id, ' +\n        BY_SEQ_STORE$1 + '.json AS data ' +\n        'FROM ' + BY_SEQ_STORE$1 + ' JOIN ' +\n        DOC_STORE$1 + ' ON ' + BY_SEQ_STORE$1 + '.seq = ' +\n        DOC_STORE$1 + '.winningseq WHERE local = 1';\n      tx.executeSql(sql, [], function (tx, res) {\n        var rows = [];\n        for (var i = 0; i < res.rows.length; i++) {\n          rows.push(res.rows.item(i));\n        }\n        function doNext() {\n          if (!rows.length) {\n            return callback(tx);\n          }\n          var row = rows.shift();\n          var rev = JSON.parse(row.data)._rev;\n          tx.executeSql('INSERT INTO ' + LOCAL_STORE$1 +\n              ' (id, rev, json) VALUES (?,?,?)',\n              [row.id, rev, row.data], function (tx) {\n            tx.executeSql('DELETE FROM ' + DOC_STORE$1 + ' WHERE id=?',\n                [row.id], function (tx) {\n              tx.executeSql('DELETE FROM ' + BY_SEQ_STORE$1 + ' WHERE seq=?',\n                  [row.seq], function () {\n                doNext();\n              });\n            });\n          });\n        }\n        doNext();\n      });\n    });\n  }\n\n  // in this migration, we remove doc_id_rev and just use rev\n  function runMigration4(tx, callback) {\n\n    function updateRows(rows) {\n      function doNext() {\n        if (!rows.length) {\n          return callback(tx);\n        }\n        var row = rows.shift();\n        var doc_id_rev = parseHexString(row.hex, encoding);\n        var idx = doc_id_rev.lastIndexOf('::');\n        var doc_id = doc_id_rev.substring(0, idx);\n        var rev = doc_id_rev.substring(idx + 2);\n        var sql = 'UPDATE ' + BY_SEQ_STORE$1 +\n          ' SET doc_id=?, rev=? WHERE doc_id_rev=?';\n        tx.executeSql(sql, [doc_id, rev, doc_id_rev], function () {\n          doNext();\n        });\n      }\n      doNext();\n    }\n\n    var sql = 'ALTER TABLE ' + BY_SEQ_STORE$1 + ' ADD COLUMN doc_id';\n    tx.executeSql(sql, [], function (tx) {\n      var sql = 'ALTER TABLE ' + BY_SEQ_STORE$1 + ' ADD COLUMN rev';\n      tx.executeSql(sql, [], function (tx) {\n        tx.executeSql(BY_SEQ_STORE_DOC_ID_REV_INDEX_SQL, [], function (tx) {\n          var sql = 'SELECT hex(doc_id_rev) as hex FROM ' + BY_SEQ_STORE$1;\n          tx.executeSql(sql, [], function (tx, res) {\n            var rows = [];\n            for (var i = 0; i < res.rows.length; i++) {\n              rows.push(res.rows.item(i));\n            }\n            updateRows(rows);\n          });\n        });\n      });\n    });\n  }\n\n  // in this migration, we add the attach_and_seq table\n  // for issue #2818\n  function runMigration5(tx, callback) {\n\n    function migrateAttsAndSeqs(tx) {\n      // need to actually populate the table. this is the expensive part,\n      // so as an optimization, check first that this database even\n      // contains attachments\n      var sql = 'SELECT COUNT(*) AS cnt FROM ' + ATTACH_STORE$1;\n      tx.executeSql(sql, [], function (tx, res) {\n        var count = res.rows.item(0).cnt;\n        if (!count) {\n          return callback(tx);\n        }\n\n        var offset = 0;\n        var pageSize = 10;\n        function nextPage() {\n          var sql = select(\n            SELECT_DOCS + ', ' + DOC_STORE$1 + '.id AS id',\n            [DOC_STORE$1, BY_SEQ_STORE$1],\n            DOC_STORE_AND_BY_SEQ_JOINER,\n            null,\n            DOC_STORE$1 + '.id '\n          );\n          sql += ' LIMIT ' + pageSize + ' OFFSET ' + offset;\n          offset += pageSize;\n          tx.executeSql(sql, [], function (tx, res) {\n            if (!res.rows.length) {\n              return callback(tx);\n            }\n            var digestSeqs = {};\n            function addDigestSeq(digest, seq) {\n              // uniq digest/seq pairs, just in case there are dups\n              var seqs = digestSeqs[digest] = (digestSeqs[digest] || []);\n              if (seqs.indexOf(seq) === -1) {\n                seqs.push(seq);\n              }\n            }\n            for (var i = 0; i < res.rows.length; i++) {\n              var row = res.rows.item(i);\n              var doc = unstringifyDoc(row.data, row.id, row.rev);\n              var atts = Object.keys(doc._attachments || {});\n              for (var j = 0; j < atts.length; j++) {\n                var att = doc._attachments[atts[j]];\n                addDigestSeq(att.digest, row.seq);\n              }\n            }\n            var digestSeqPairs = [];\n            Object.keys(digestSeqs).forEach(function (digest) {\n              var seqs = digestSeqs[digest];\n              seqs.forEach(function (seq) {\n                digestSeqPairs.push([digest, seq]);\n              });\n            });\n            if (!digestSeqPairs.length) {\n              return nextPage();\n            }\n            var numDone = 0;\n            digestSeqPairs.forEach(function (pair) {\n              var sql = 'INSERT INTO ' + ATTACH_AND_SEQ_STORE$1 +\n                ' (digest, seq) VALUES (?,?)';\n              tx.executeSql(sql, pair, function () {\n                if (++numDone === digestSeqPairs.length) {\n                  nextPage();\n                }\n              });\n            });\n          });\n        }\n        nextPage();\n      });\n    }\n\n    var attachAndRev = 'CREATE TABLE IF NOT EXISTS ' +\n      ATTACH_AND_SEQ_STORE$1 + ' (digest, seq INTEGER)';\n    tx.executeSql(attachAndRev, [], function (tx) {\n      tx.executeSql(\n        ATTACH_AND_SEQ_STORE_ATTACH_INDEX_SQL, [], function (tx) {\n          tx.executeSql(\n            ATTACH_AND_SEQ_STORE_SEQ_INDEX_SQL, [],\n            migrateAttsAndSeqs);\n        });\n    });\n  }\n\n  // in this migration, we use escapeBlob() and unescapeBlob()\n  // instead of reading out the binary as HEX, which is slow\n  function runMigration6(tx, callback) {\n    var sql = 'ALTER TABLE ' + ATTACH_STORE$1 +\n      ' ADD COLUMN escaped TINYINT(1) DEFAULT 0';\n    tx.executeSql(sql, [], callback);\n  }\n\n  // issue #3136, in this migration we need a \"latest seq\" as well\n  // as the \"winning seq\" in the doc store\n  function runMigration7(tx, callback) {\n    var sql = 'ALTER TABLE ' + DOC_STORE$1 +\n      ' ADD COLUMN max_seq INTEGER';\n    tx.executeSql(sql, [], function (tx) {\n      var sql = 'UPDATE ' + DOC_STORE$1 + ' SET max_seq=(SELECT MAX(seq) FROM ' +\n        BY_SEQ_STORE$1 + ' WHERE doc_id=id)';\n      tx.executeSql(sql, [], function (tx) {\n        // add unique index after filling, else we'll get a constraint\n        // error when we do the ALTER TABLE\n        var sql =\n          'CREATE UNIQUE INDEX IF NOT EXISTS \\'doc-max-seq-idx\\' ON ' +\n          DOC_STORE$1 + ' (max_seq)';\n        tx.executeSql(sql, [], callback);\n      });\n    });\n  }\n\n  function checkEncoding(tx, cb) {\n    // UTF-8 on chrome/android, UTF-16 on safari < 7.1\n    tx.executeSql('SELECT HEX(\"a\") AS hex', [], function (tx, res) {\n        var hex = res.rows.item(0).hex;\n        encoding = hex.length === 2 ? 'UTF-8' : 'UTF-16';\n        cb();\n      }\n    );\n  }\n\n  function onGetInstanceId() {\n    while (idRequests.length > 0) {\n      var idCallback = idRequests.pop();\n      idCallback(null, instanceId);\n    }\n  }\n\n  function onGetVersion(tx, dbVersion) {\n    if (dbVersion === 0) {\n      // initial schema\n\n      var meta = 'CREATE TABLE IF NOT EXISTS ' + META_STORE$1 +\n        ' (dbid, db_version INTEGER)';\n      var attach = 'CREATE TABLE IF NOT EXISTS ' + ATTACH_STORE$1 +\n        ' (digest UNIQUE, escaped TINYINT(1), body BLOB)';\n      var attachAndRev = 'CREATE TABLE IF NOT EXISTS ' +\n        ATTACH_AND_SEQ_STORE$1 + ' (digest, seq INTEGER)';\n      // TODO: migrate winningseq to INTEGER\n      var doc = 'CREATE TABLE IF NOT EXISTS ' + DOC_STORE$1 +\n        ' (id unique, json, winningseq, max_seq INTEGER UNIQUE)';\n      var seq = 'CREATE TABLE IF NOT EXISTS ' + BY_SEQ_STORE$1 +\n        ' (seq INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, ' +\n        'json, deleted TINYINT(1), doc_id, rev)';\n      var local = 'CREATE TABLE IF NOT EXISTS ' + LOCAL_STORE$1 +\n        ' (id UNIQUE, rev, json)';\n\n      // creates\n      tx.executeSql(attach);\n      tx.executeSql(local);\n      tx.executeSql(attachAndRev, [], function () {\n        tx.executeSql(ATTACH_AND_SEQ_STORE_SEQ_INDEX_SQL);\n        tx.executeSql(ATTACH_AND_SEQ_STORE_ATTACH_INDEX_SQL);\n      });\n      tx.executeSql(doc, [], function () {\n        tx.executeSql(DOC_STORE_WINNINGSEQ_INDEX_SQL);\n        tx.executeSql(seq, [], function () {\n          tx.executeSql(BY_SEQ_STORE_DELETED_INDEX_SQL);\n          tx.executeSql(BY_SEQ_STORE_DOC_ID_REV_INDEX_SQL);\n          tx.executeSql(meta, [], function () {\n            // mark the db version, and new dbid\n            var initSeq = 'INSERT INTO ' + META_STORE$1 +\n              ' (db_version, dbid) VALUES (?,?)';\n            instanceId = uuid();\n            var initSeqArgs = [ADAPTER_VERSION$1, instanceId];\n            tx.executeSql(initSeq, initSeqArgs, function () {\n              onGetInstanceId();\n            });\n          });\n        });\n      });\n    } else { // version > 0\n\n      var setupDone = function () {\n        var migrated = dbVersion < ADAPTER_VERSION$1;\n        if (migrated) {\n          // update the db version within this transaction\n          tx.executeSql('UPDATE ' + META_STORE$1 + ' SET db_version = ' +\n            ADAPTER_VERSION$1);\n        }\n        // notify db.id() callers\n        var sql = 'SELECT dbid FROM ' + META_STORE$1;\n        tx.executeSql(sql, [], function (tx, result) {\n          instanceId = result.rows.item(0).dbid;\n          onGetInstanceId();\n        });\n      };\n\n      // would love to use promises here, but then websql\n      // ends the transaction early\n      var tasks = [\n        runMigration2,\n        runMigration3,\n        runMigration4,\n        runMigration5,\n        runMigration6,\n        runMigration7,\n        setupDone\n      ];\n\n      // run each migration sequentially\n      var i = dbVersion;\n      var nextMigration = function (tx) {\n        tasks[i - 1](tx, nextMigration);\n        i++;\n      };\n      nextMigration(tx);\n    }\n  }\n\n  function setup() {\n    db.transaction(function (tx) {\n      // first check the encoding\n      checkEncoding(tx, function () {\n        // then get the version\n        fetchVersion(tx);\n      });\n    }, websqlError(callback), dbCreated);\n  }\n\n  function fetchVersion(tx) {\n    var sql = 'SELECT sql FROM sqlite_master WHERE tbl_name = ' + META_STORE$1;\n    tx.executeSql(sql, [], function (tx, result) {\n      if (!result.rows.length) {\n        // database hasn't even been created yet (version 0)\n        onGetVersion(tx, 0);\n      } else if (!/db_version/.test(result.rows.item(0).sql)) {\n        // table was created, but without the new db_version column,\n        // so add it.\n        tx.executeSql('ALTER TABLE ' + META_STORE$1 +\n          ' ADD COLUMN db_version INTEGER', [], function () {\n          // before version 2, this column didn't even exist\n          onGetVersion(tx, 1);\n        });\n      } else { // column exists, we can safely get it\n        tx.executeSql('SELECT db_version FROM ' + META_STORE$1,\n          [], function (tx, result) {\n          var dbVersion = result.rows.item(0).db_version;\n          onGetVersion(tx, dbVersion);\n        });\n      }\n    });\n  }\n\n  setup();\n\n  api.type = function () {\n    return 'websql';\n  };\n\n  api._id = toPromise(function (callback) {\n    callback(null, instanceId);\n  });\n\n  api._info = function (callback) {\n    db.readTransaction(function (tx) {\n      countDocs(tx, function (docCount) {\n        var sql = 'SELECT MAX(seq) AS seq FROM ' + BY_SEQ_STORE$1;\n        tx.executeSql(sql, [], function (tx, res) {\n          var updateSeq = res.rows.item(0).seq || 0;\n          callback(null, {\n            doc_count: docCount,\n            update_seq: updateSeq,\n            websql_encoding: encoding\n          });\n        });\n      });\n    }, websqlError(callback));\n  };\n\n  api._bulkDocs = function (req, reqOpts, callback) {\n    websqlBulkDocs(opts, req, reqOpts, api, db, websqlChanges, callback);\n  };\n\n  api._get = function (id, opts, callback) {\n    var doc;\n    var metadata;\n    var err;\n    var tx = opts.ctx;\n    if (!tx) {\n      return db.readTransaction(function (txn) {\n        api._get(id, jsExtend.extend({ctx: txn}, opts), callback);\n      });\n    }\n\n    function finish() {\n      callback(err, {doc: doc, metadata: metadata, ctx: tx});\n    }\n\n    var sql;\n    var sqlArgs;\n    if (opts.rev) {\n      sql = select(\n        SELECT_DOCS,\n        [DOC_STORE$1, BY_SEQ_STORE$1],\n        DOC_STORE$1 + '.id=' + BY_SEQ_STORE$1 + '.doc_id',\n        [BY_SEQ_STORE$1 + '.doc_id=?', BY_SEQ_STORE$1 + '.rev=?']);\n      sqlArgs = [id, opts.rev];\n    } else {\n      sql = select(\n        SELECT_DOCS,\n        [DOC_STORE$1, BY_SEQ_STORE$1],\n        DOC_STORE_AND_BY_SEQ_JOINER,\n        DOC_STORE$1 + '.id=?');\n      sqlArgs = [id];\n    }\n    tx.executeSql(sql, sqlArgs, function (a, results) {\n      if (!results.rows.length) {\n        err = createError(MISSING_DOC, 'missing');\n        return finish();\n      }\n      var item = results.rows.item(0);\n      metadata = safeJsonParse(item.metadata);\n      if (item.deleted && !opts.rev) {\n        err = createError(MISSING_DOC, 'deleted');\n        return finish();\n      }\n      doc = unstringifyDoc(item.data, metadata.id, item.rev);\n      finish();\n    });\n  };\n\n  function countDocs(tx, callback) {\n\n    if (api._docCount !== -1) {\n      return callback(api._docCount);\n    }\n\n    // count the total rows\n    var sql = select(\n      'COUNT(' + DOC_STORE$1 + '.id) AS \\'num\\'',\n      [DOC_STORE$1, BY_SEQ_STORE$1],\n      DOC_STORE_AND_BY_SEQ_JOINER,\n      BY_SEQ_STORE$1 + '.deleted=0');\n\n    tx.executeSql(sql, [], function (tx, result) {\n      api._docCount = result.rows.item(0).num;\n      callback(api._docCount);\n    });\n  }\n\n  api._allDocs = function (opts, callback) {\n    var results = [];\n    var totalRows;\n\n    var start = 'startkey' in opts ? opts.startkey : false;\n    var end = 'endkey' in opts ? opts.endkey : false;\n    var key = 'key' in opts ? opts.key : false;\n    var descending = 'descending' in opts ? opts.descending : false;\n    var limit = 'limit' in opts ? opts.limit : -1;\n    var offset = 'skip' in opts ? opts.skip : 0;\n    var inclusiveEnd = opts.inclusive_end !== false;\n\n    var sqlArgs = [];\n    var criteria = [];\n\n    if (key !== false) {\n      criteria.push(DOC_STORE$1 + '.id = ?');\n      sqlArgs.push(key);\n    } else if (start !== false || end !== false) {\n      if (start !== false) {\n        criteria.push(DOC_STORE$1 + '.id ' + (descending ? '<=' : '>=') + ' ?');\n        sqlArgs.push(start);\n      }\n      if (end !== false) {\n        var comparator = descending ? '>' : '<';\n        if (inclusiveEnd) {\n          comparator += '=';\n        }\n        criteria.push(DOC_STORE$1 + '.id ' + comparator + ' ?');\n        sqlArgs.push(end);\n      }\n      if (key !== false) {\n        criteria.push(DOC_STORE$1 + '.id = ?');\n        sqlArgs.push(key);\n      }\n    }\n\n    if (opts.deleted !== 'ok') {\n      // report deleted if keys are specified\n      criteria.push(BY_SEQ_STORE$1 + '.deleted = 0');\n    }\n\n    db.readTransaction(function (tx) {\n\n      // first count up the total rows\n      countDocs(tx, function (count) {\n        totalRows = count;\n\n        if (limit === 0) {\n          return;\n        }\n\n        // then actually fetch the documents\n        var sql = select(\n          SELECT_DOCS,\n          [DOC_STORE$1, BY_SEQ_STORE$1],\n          DOC_STORE_AND_BY_SEQ_JOINER,\n          criteria,\n          DOC_STORE$1 + '.id ' + (descending ? 'DESC' : 'ASC')\n          );\n        sql += ' LIMIT ' + limit + ' OFFSET ' + offset;\n\n        tx.executeSql(sql, sqlArgs, function (tx, result) {\n          for (var i = 0, l = result.rows.length; i < l; i++) {\n            var item = result.rows.item(i);\n            var metadata = safeJsonParse(item.metadata);\n            var id = metadata.id;\n            var data = unstringifyDoc(item.data, id, item.rev);\n            var winningRev = data._rev;\n            var doc = {\n              id: id,\n              key: id,\n              value: {rev: winningRev}\n            };\n            if (opts.include_docs) {\n              doc.doc = data;\n              doc.doc._rev = winningRev;\n              if (opts.conflicts) {\n                doc.doc._conflicts = collectConflicts(metadata);\n              }\n              fetchAttachmentsIfNecessary$1(doc.doc, opts, api, tx);\n            }\n            if (item.deleted) {\n              if (opts.deleted === 'ok') {\n                doc.value.deleted = true;\n                doc.doc = null;\n              } else {\n                continue;\n              }\n            }\n            results.push(doc);\n          }\n        });\n      });\n    }, websqlError(callback), function () {\n      callback(null, {\n        total_rows: totalRows,\n        offset: opts.skip,\n        rows: results\n      });\n    });\n  };\n\n  api._changes = function (opts) {\n    opts = clone(opts);\n\n    if (opts.continuous) {\n      var id = api._name + ':' + uuid();\n      websqlChanges.addListener(api._name, id, api, opts);\n      websqlChanges.notify(api._name);\n      return {\n        cancel: function () {\n          websqlChanges.removeListener(api._name, id);\n        }\n      };\n    }\n\n    var descending = opts.descending;\n\n    // Ignore the `since` parameter when `descending` is true\n    opts.since = opts.since && !descending ? opts.since : 0;\n\n    var limit = 'limit' in opts ? opts.limit : -1;\n    if (limit === 0) {\n      limit = 1; // per CouchDB _changes spec\n    }\n\n    var returnDocs;\n    if ('return_docs' in opts) {\n      returnDocs = opts.return_docs;\n    } else if ('returnDocs' in opts) {\n      // TODO: Remove 'returnDocs' in favor of 'return_docs' in a future release\n      returnDocs = opts.returnDocs;\n    } else {\n      returnDocs = true;\n    }\n    var results = [];\n    var numResults = 0;\n\n    function fetchChanges() {\n\n      var selectStmt =\n        DOC_STORE$1 + '.json AS metadata, ' +\n        DOC_STORE$1 + '.max_seq AS maxSeq, ' +\n        BY_SEQ_STORE$1 + '.json AS winningDoc, ' +\n        BY_SEQ_STORE$1 + '.rev AS winningRev ';\n\n      var from = DOC_STORE$1 + ' JOIN ' + BY_SEQ_STORE$1;\n\n      var joiner = DOC_STORE$1 + '.id=' + BY_SEQ_STORE$1 + '.doc_id' +\n        ' AND ' + DOC_STORE$1 + '.winningseq=' + BY_SEQ_STORE$1 + '.seq';\n\n      var criteria = ['maxSeq > ?'];\n      var sqlArgs = [opts.since];\n\n      if (opts.doc_ids) {\n        criteria.push(DOC_STORE$1 + '.id IN ' + qMarks(opts.doc_ids.length));\n        sqlArgs = sqlArgs.concat(opts.doc_ids);\n      }\n\n      var orderBy = 'maxSeq ' + (descending ? 'DESC' : 'ASC');\n\n      var sql = select(selectStmt, from, joiner, criteria, orderBy);\n\n      var filter = filterChange(opts);\n      if (!opts.view && !opts.filter) {\n        // we can just limit in the query\n        sql += ' LIMIT ' + limit;\n      }\n\n      var lastSeq = opts.since || 0;\n      db.readTransaction(function (tx) {\n        tx.executeSql(sql, sqlArgs, function (tx, result) {\n          function reportChange(change) {\n            return function () {\n              opts.onChange(change);\n            };\n          }\n          for (var i = 0, l = result.rows.length; i < l; i++) {\n            var item = result.rows.item(i);\n            var metadata = safeJsonParse(item.metadata);\n            lastSeq = item.maxSeq;\n\n            var doc = unstringifyDoc(item.winningDoc, metadata.id,\n              item.winningRev);\n            var change = opts.processChange(doc, metadata, opts);\n            change.seq = item.maxSeq;\n\n            var filtered = filter(change);\n            if (typeof filtered === 'object') {\n              return opts.complete(filtered);\n            }\n\n            if (filtered) {\n              numResults++;\n              if (returnDocs) {\n                results.push(change);\n              }\n              // process the attachment immediately\n              // for the benefit of live listeners\n              if (opts.attachments && opts.include_docs) {\n                fetchAttachmentsIfNecessary$1(doc, opts, api, tx,\n                  reportChange(change));\n              } else {\n                reportChange(change)();\n              }\n            }\n            if (numResults === limit) {\n              break;\n            }\n          }\n        });\n      }, websqlError(opts.complete), function () {\n        if (!opts.continuous) {\n          opts.complete(null, {\n            results: results,\n            last_seq: lastSeq\n          });\n        }\n      });\n    }\n\n    fetchChanges();\n  };\n\n  api._close = function (callback) {\n    //WebSQL databases do not need to be closed\n    callback();\n  };\n\n  api._getAttachment = function (docId, attachId, attachment, opts, callback) {\n    var res;\n    var tx = opts.ctx;\n    var digest = attachment.digest;\n    var type = attachment.content_type;\n    var sql = 'SELECT escaped, ' +\n      'CASE WHEN escaped = 1 THEN body ELSE HEX(body) END AS body FROM ' +\n      ATTACH_STORE$1 + ' WHERE digest=?';\n    tx.executeSql(sql, [digest], function (tx, result) {\n      // websql has a bug where \\u0000 causes early truncation in strings\n      // and blobs. to work around this, we used to use the hex() function,\n      // but that's not performant. after migration 6, we remove \\u0000\n      // and add it back in afterwards\n      var item = result.rows.item(0);\n      var data = item.escaped ? unescapeBlob(item.body) :\n        parseHexString(item.body, encoding);\n      if (opts.binary) {\n        res = binStringToBluffer(data, type);\n      } else {\n        res = btoa$1(data);\n      }\n      callback(null, res);\n    });\n  };\n\n  api._getRevisionTree = function (docId, callback) {\n    db.readTransaction(function (tx) {\n      var sql = 'SELECT json AS metadata FROM ' + DOC_STORE$1 + ' WHERE id = ?';\n      tx.executeSql(sql, [docId], function (tx, result) {\n        if (!result.rows.length) {\n          callback(createError(MISSING_DOC));\n        } else {\n          var data = safeJsonParse(result.rows.item(0).metadata);\n          callback(null, data.rev_tree);\n        }\n      });\n    });\n  };\n\n  api._doCompaction = function (docId, revs, callback) {\n    if (!revs.length) {\n      return callback();\n    }\n    db.transaction(function (tx) {\n\n      // update doc store\n      var sql = 'SELECT json AS metadata FROM ' + DOC_STORE$1 + ' WHERE id = ?';\n      tx.executeSql(sql, [docId], function (tx, result) {\n        var metadata = safeJsonParse(result.rows.item(0).metadata);\n        traverseRevTree(metadata.rev_tree, function (isLeaf, pos,\n                                                           revHash, ctx, opts) {\n          var rev = pos + '-' + revHash;\n          if (revs.indexOf(rev) !== -1) {\n            opts.status = 'missing';\n          }\n        });\n\n        var sql = 'UPDATE ' + DOC_STORE$1 + ' SET json = ? WHERE id = ?';\n        tx.executeSql(sql, [safeJsonStringify(metadata), docId]);\n      });\n\n      compactRevs$1(revs, docId, tx);\n    }, websqlError(callback), function () {\n      callback();\n    });\n  };\n\n  api._getLocal = function (id, callback) {\n    db.readTransaction(function (tx) {\n      var sql = 'SELECT json, rev FROM ' + LOCAL_STORE$1 + ' WHERE id=?';\n      tx.executeSql(sql, [id], function (tx, res) {\n        if (res.rows.length) {\n          var item = res.rows.item(0);\n          var doc = unstringifyDoc(item.json, id, item.rev);\n          callback(null, doc);\n        } else {\n          callback(createError(MISSING_DOC));\n        }\n      });\n    });\n  };\n\n  api._putLocal = function (doc, opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    delete doc._revisions; // ignore this, trust the rev\n    var oldRev = doc._rev;\n    var id = doc._id;\n    var newRev;\n    if (!oldRev) {\n      newRev = doc._rev = '0-1';\n    } else {\n      newRev = doc._rev = '0-' + (parseInt(oldRev.split('-')[1], 10) + 1);\n    }\n    var json = stringifyDoc(doc);\n\n    var ret;\n    function putLocal(tx) {\n      var sql;\n      var values;\n      if (oldRev) {\n        sql = 'UPDATE ' + LOCAL_STORE$1 + ' SET rev=?, json=? ' +\n          'WHERE id=? AND rev=?';\n        values = [newRev, json, id, oldRev];\n      } else {\n        sql = 'INSERT INTO ' + LOCAL_STORE$1 + ' (id, rev, json) VALUES (?,?,?)';\n        values = [id, newRev, json];\n      }\n      tx.executeSql(sql, values, function (tx, res) {\n        if (res.rowsAffected) {\n          ret = {ok: true, id: id, rev: newRev};\n          if (opts.ctx) { // return immediately\n            callback(null, ret);\n          }\n        } else {\n          callback(createError(REV_CONFLICT));\n        }\n      }, function () {\n        callback(createError(REV_CONFLICT));\n        return false; // ack that we handled the error\n      });\n    }\n\n    if (opts.ctx) {\n      putLocal(opts.ctx);\n    } else {\n      db.transaction(putLocal, websqlError(callback), function () {\n        if (ret) {\n          callback(null, ret);\n        }\n      });\n    }\n  };\n\n  api._removeLocal = function (doc, opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    var ret;\n\n    function removeLocal(tx) {\n      var sql = 'DELETE FROM ' + LOCAL_STORE$1 + ' WHERE id=? AND rev=?';\n      var params = [doc._id, doc._rev];\n      tx.executeSql(sql, params, function (tx, res) {\n        if (!res.rowsAffected) {\n          return callback(createError(MISSING_DOC));\n        }\n        ret = {ok: true, id: doc._id, rev: '0-0'};\n        if (opts.ctx) { // return immediately\n          callback(null, ret);\n        }\n      });\n    }\n\n    if (opts.ctx) {\n      removeLocal(opts.ctx);\n    } else {\n      db.transaction(removeLocal, websqlError(callback), function () {\n        if (ret) {\n          callback(null, ret);\n        }\n      });\n    }\n  };\n\n  api._destroy = function (opts, callback) {\n    websqlChanges.removeAllListeners(api._name);\n    db.transaction(function (tx) {\n      var stores = [DOC_STORE$1, BY_SEQ_STORE$1, ATTACH_STORE$1, META_STORE$1,\n        LOCAL_STORE$1, ATTACH_AND_SEQ_STORE$1];\n      stores.forEach(function (store) {\n        tx.executeSql('DROP TABLE IF EXISTS ' + store, []);\n      });\n    }, websqlError(callback), function () {\n      if (hasLocalStorage()) {\n        delete window.localStorage['_pouch__websqldb_' + api._name];\n        delete window.localStorage[api._name];\n      }\n      callback(null, {'ok': true});\n    });\n  };\n}\n\nfunction canOpenTestDB() {\n  try {\n    openDatabase('_pouch_validate_websql', 1, '', 1);\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\n// WKWebView had a bug where WebSQL would throw a DOM Exception 18\n// (see https://bugs.webkit.org/show_bug.cgi?id=137760 and\n// https://github.com/pouchdb/pouchdb/issues/5079)\n// This has been fixed in latest WebKit, so we try to detect it here.\nfunction isValidWebSQL() {\n  // WKWebView UA:\n  //   Mozilla/5.0 (iPhone; CPU iPhone OS 9_2 like Mac OS X)\n  //   AppleWebKit/601.1.46 (KHTML, like Gecko) Mobile/13C75\n  // Chrome for iOS UA:\n  //   Mozilla/5.0 (iPhone; U; CPU iPhone OS 5_1_1 like Mac OS X; en)\n  //   AppleWebKit/534.46.0 (KHTML, like Gecko) CriOS/19.0.1084.60\n  //   Mobile/9B206 Safari/7534.48.3\n  // Firefox for iOS UA:\n  //   Mozilla/5.0 (iPhone; CPU iPhone OS 8_3 like Mac OS X) AppleWebKit/600.1.4\n  //   (KHTML, like Gecko) FxiOS/1.0 Mobile/12F69 Safari/600.1.4\n\n  // indexedDB is null on some UIWebViews and undefined in others\n  // see: https://bugs.webkit.org/show_bug.cgi?id=137034\n  if (typeof indexedDB === 'undefined' || indexedDB === null ||\n      !/iP(hone|od|ad)/.test(navigator.userAgent)) {\n    // definitely not WKWebView, avoid creating an unnecessary database\n    return true;\n  }\n  // Cache the result in LocalStorage. Reason we do this is because if we\n  // call openDatabase() too many times, Safari craps out in SauceLabs and\n  // starts throwing DOM Exception 14s.\n  var hasLS = hasLocalStorage();\n  // Include user agent in the hash, so that if Safari is upgraded, we don't\n  // continually think it's broken.\n  var localStorageKey = '_pouch__websqldb_valid_' + navigator.userAgent;\n  if (hasLS && localStorage[localStorageKey]) {\n    return localStorage[localStorageKey] === '1';\n  }\n  var openedTestDB = canOpenTestDB();\n  if (hasLS) {\n    localStorage[localStorageKey] = openedTestDB ? '1' : '0';\n  }\n  return openedTestDB;\n}\n\nfunction valid() {\n  if (typeof openDatabase !== 'function') {\n    return false;\n  }\n  return isValidWebSQL();\n}\n\nfunction openDB(name, version, description, size) {\n  // Traditional WebSQL API\n  return openDatabase(name, version, description, size);\n}\n\nfunction WebSQLPouch(opts, callback) {\n  var _opts = jsExtend.extend({\n    websql: openDB\n  }, opts);\n\n  WebSqlPouch$1.call(this, _opts, callback);\n}\n\nWebSQLPouch.valid = valid;\n\nWebSQLPouch.use_prefix = true;\n\nfunction WebSqlPouch (PouchDB) {\n  PouchDB.adapter('websql', WebSQLPouch, true);\n}\n\n/* global fetch */\n/* global Headers */\nfunction wrappedFetch() {\n  var wrappedPromise = {};\n\n  var promise = new PouchPromise(function (resolve, reject) {\n    wrappedPromise.resolve = resolve;\n    wrappedPromise.reject = reject;\n  });\n\n  var args = new Array(arguments.length);\n\n  for (var i = 0; i < args.length; i++) {\n    args[i] = arguments[i];\n  }\n\n  wrappedPromise.promise = promise;\n\n  PouchPromise.resolve().then(function () {\n    return fetch.apply(null, args);\n  }).then(function (response) {\n    wrappedPromise.resolve(response);\n  }).catch(function (error) {\n    wrappedPromise.reject(error);\n  });\n\n  return wrappedPromise;\n}\n\nfunction fetchRequest(options, callback) {\n  var wrappedPromise, timer, response;\n\n  var headers = new Headers();\n\n  var fetchOptions = {\n    method: options.method,\n    credentials: 'include',\n    headers: headers\n  };\n\n  if (options.json) {\n    headers.set('Accept', 'application/json');\n    headers.set('Content-Type', options.headers['Content-Type'] ||\n      'application/json');\n  }\n\n  if (options.body && (options.body instanceof Blob)) {\n    readAsArrayBuffer(options.body, function (arrayBuffer) {\n      fetchOptions.body = arrayBuffer;\n    });\n  } else if (options.body &&\n             options.processData &&\n             typeof options.body !== 'string') {\n    fetchOptions.body = JSON.stringify(options.body);\n  } else if ('body' in options) {\n    fetchOptions.body = options.body;\n  } else {\n    fetchOptions.body = null;\n  }\n\n  Object.keys(options.headers).forEach(function (key) {\n    if (options.headers.hasOwnProperty(key)) {\n      headers.set(key, options.headers[key]);\n    }\n  });\n\n  wrappedPromise = wrappedFetch(options.url, fetchOptions);\n\n  if (options.timeout > 0) {\n    timer = setTimeout(function () {\n      wrappedPromise.reject(new Error('Load timeout for resource: ' +\n        options.url));\n    }, options.timeout);\n  }\n\n  wrappedPromise.promise.then(function (fetchResponse) {\n    response = {\n      statusCode: fetchResponse.status\n    };\n\n    if (options.timeout > 0) {\n      clearTimeout(timer);\n    }\n\n    if (response.statusCode >= 200 && response.statusCode < 300) {\n      return options.binary ? fetchResponse.blob() : fetchResponse.text();\n    }\n\n    return fetchResponse.json();\n  }).then(function (result) {\n    if (response.statusCode >= 200 && response.statusCode < 300) {\n      callback(null, response, result);\n    } else {\n      callback(result, response);\n    }\n  }).catch(function (error) {\n    callback(error, response);\n  });\n\n  return {abort: wrappedPromise.reject};\n}\n\nfunction xhRequest(options, callback) {\n\n  var xhr, timer;\n  var timedout = false;\n\n  var abortReq = function () {\n    xhr.abort();\n    cleanUp();\n  };\n\n  var timeoutReq = function () {\n    timedout = true;\n    xhr.abort();\n    cleanUp();\n  };\n\n  var ret = {abort: abortReq};\n\n  var cleanUp = function () {\n    clearTimeout(timer);\n    ret.abort = function () {};\n    if (xhr) {\n      xhr.onprogress = undefined;\n      if (xhr.upload) {\n        xhr.upload.onprogress = undefined;\n      }\n      xhr.onreadystatechange = undefined;\n      xhr = undefined;\n    }\n  };\n\n  if (options.xhr) {\n    xhr = new options.xhr();\n  } else {\n    xhr = new XMLHttpRequest();\n  }\n\n  try {\n    xhr.open(options.method, options.url);\n  } catch (exception) {\n    return callback(new Error(exception.name || 'Url is invalid'));\n  }\n\n  xhr.withCredentials = ('withCredentials' in options) ?\n    options.withCredentials : true;\n\n  if (options.method === 'GET') {\n    delete options.headers['Content-Type'];\n  } else if (options.json) {\n    options.headers.Accept = 'application/json';\n    options.headers['Content-Type'] = options.headers['Content-Type'] ||\n      'application/json';\n    if (options.body &&\n        options.processData &&\n        typeof options.body !== \"string\") {\n      options.body = JSON.stringify(options.body);\n    }\n  }\n\n  if (options.binary) {\n    xhr.responseType = 'arraybuffer';\n  }\n\n  if (!('body' in options)) {\n    options.body = null;\n  }\n\n  for (var key in options.headers) {\n    if (options.headers.hasOwnProperty(key)) {\n      xhr.setRequestHeader(key, options.headers[key]);\n    }\n  }\n\n  if (options.timeout > 0) {\n    timer = setTimeout(timeoutReq, options.timeout);\n    xhr.onprogress = function () {\n      clearTimeout(timer);\n      if(xhr.readyState !== 4) {\n        timer = setTimeout(timeoutReq, options.timeout);\n      }\n    };\n    if (typeof xhr.upload !== 'undefined') { // does not exist in ie9\n      xhr.upload.onprogress = xhr.onprogress;\n    }\n  }\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState !== 4) {\n      return;\n    }\n\n    var response = {\n      statusCode: xhr.status\n    };\n\n    if (xhr.status >= 200 && xhr.status < 300) {\n      var data;\n      if (options.binary) {\n        data = createBlob([xhr.response || ''], {\n          type: xhr.getResponseHeader('Content-Type')\n        });\n      } else {\n        data = xhr.responseText;\n      }\n      callback(null, response, data);\n    } else {\n      var err = {};\n      if (timedout) {\n        err = new Error('ETIMEDOUT');\n        err.code = 'ETIMEDOUT';\n      } else if (typeof xhr.response === 'string') {\n        try {\n          err = JSON.parse(xhr.response);\n        } catch(e) {}\n      }\n      err.status = xhr.status;\n      callback(err);\n    }\n    cleanUp();\n  };\n\n  if (options.body && (options.body instanceof Blob)) {\n    readAsArrayBuffer(options.body, function (arrayBuffer) {\n      xhr.send(arrayBuffer);\n    });\n  } else {\n    xhr.send(options.body);\n  }\n\n  return ret;\n}\n\nfunction testXhr() {\n  try {\n    new XMLHttpRequest();\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nvar hasXhr = testXhr();\n\nfunction ajax$1(options, callback) {\n  if (hasXhr || options.xhr) {\n    return xhRequest(options, callback);\n  } else {\n    return fetchRequest(options, callback);\n  }\n}\n\n// the blob already has a type; do nothing\nvar res$2 = function () {};\n\nfunction defaultBody() {\n  return '';\n}\n\nfunction ajaxCore(options, callback) {\n\n  options = clone(options);\n\n  var defaultOptions = {\n    method : \"GET\",\n    headers: {},\n    json: true,\n    processData: true,\n    timeout: 10000,\n    cache: false\n  };\n\n  options = jsExtend.extend(defaultOptions, options);\n\n  function onSuccess(obj, resp, cb) {\n    if (!options.binary && options.json && typeof obj === 'string') {\n      /* istanbul ignore next */\n      try {\n        obj = JSON.parse(obj);\n      } catch (e) {\n        // Probably a malformed JSON from server\n        return cb(e);\n      }\n    }\n    if (Array.isArray(obj)) {\n      obj = obj.map(function (v) {\n        if (v.error || v.missing) {\n          return generateErrorFromResponse(v);\n        } else {\n          return v;\n        }\n      });\n    }\n    if (options.binary) {\n      res$2(obj, resp);\n    }\n    cb(null, obj, resp);\n  }\n\n  if (options.json) {\n    if (!options.binary) {\n      options.headers.Accept = 'application/json';\n    }\n    options.headers['Content-Type'] = options.headers['Content-Type'] ||\n      'application/json';\n  }\n\n  if (options.binary) {\n    options.encoding = null;\n    options.json = false;\n  }\n\n  if (!options.processData) {\n    options.json = false;\n  }\n\n  return ajax$1(options, function (err, response, body) {\n\n    if (err) {\n      return callback(generateErrorFromResponse(err));\n    }\n\n    var error;\n    var content_type = response.headers && response.headers['content-type'];\n    var data = body || defaultBody();\n\n    // CouchDB doesn't always return the right content-type for JSON data, so\n    // we check for ^{ and }$ (ignoring leading/trailing whitespace)\n    if (!options.binary && (options.json || !options.processData) &&\n        typeof data !== 'object' &&\n        (/json/.test(content_type) ||\n         (/^[\\s]*\\{/.test(data) && /\\}[\\s]*$/.test(data)))) {\n      try {\n        data = JSON.parse(data.toString());\n      } catch (e) {}\n    }\n\n    if (response.statusCode >= 200 && response.statusCode < 300) {\n      onSuccess(data, response, callback);\n    } else {\n      error = generateErrorFromResponse(data);\n      error.status = response.statusCode;\n      callback(error);\n    }\n  });\n}\n\nfunction ajax(opts, callback) {\n\n  // cache-buster, specifically designed to work around IE's aggressive caching\n  // see http://www.dashbay.com/2011/05/internet-explorer-caches-ajax/\n  // Also Safari caches POSTs, so we need to cache-bust those too.\n  var ua = (navigator && navigator.userAgent) ?\n    navigator.userAgent.toLowerCase() : '';\n\n  var isSafari = ua.indexOf('safari') !== -1 && ua.indexOf('chrome') === -1;\n  var isIE = ua.indexOf('msie') !== -1;\n  var isEdge = ua.indexOf('edge') !== -1;\n\n  // it appears the new version of safari also caches GETs,\n  // see https://github.com/pouchdb/pouchdb/issues/5010\n  var shouldCacheBust = (isSafari ||\n    ((isIE || isEdge) && opts.method === 'GET'));\n\n  var cache = 'cache' in opts ? opts.cache : true;\n\n  var isBlobUrl = /^blob:/.test(opts.url); // don't append nonces for blob URLs\n\n  if (!isBlobUrl && (shouldCacheBust || !cache)) {\n    var hasArgs = opts.url.indexOf('?') !== -1;\n    opts.url += (hasArgs ? '&' : '?') + '_nonce=' + Date.now();\n  }\n\n  return ajaxCore(opts, callback);\n}\n\nvar CHANGES_BATCH_SIZE = 25;\nvar MAX_SIMULTANEOUS_REVS = 50;\n\nvar supportsBulkGetMap = {};\n\nvar log$1 = debug('pouchdb:http');\n\nfunction readAttachmentsAsBlobOrBuffer(row) {\n  var atts = row.doc && row.doc._attachments;\n  if (!atts) {\n    return;\n  }\n  Object.keys(atts).forEach(function (filename) {\n    var att = atts[filename];\n    att.data = b64ToBluffer(att.data, att.content_type);\n  });\n}\n\nfunction encodeDocId(id) {\n  if (/^_design/.test(id)) {\n    return '_design/' + encodeURIComponent(id.slice(8));\n  }\n  if (/^_local/.test(id)) {\n    return '_local/' + encodeURIComponent(id.slice(7));\n  }\n  return encodeURIComponent(id);\n}\n\nfunction preprocessAttachments$1(doc) {\n  if (!doc._attachments || !Object.keys(doc._attachments)) {\n    return PouchPromise.resolve();\n  }\n\n  return PouchPromise.all(Object.keys(doc._attachments).map(function (key) {\n    var attachment = doc._attachments[key];\n    if (attachment.data && typeof attachment.data !== 'string') {\n      return new PouchPromise(function (resolve) {\n        blobToBase64(attachment.data, resolve);\n      }).then(function (b64) {\n        attachment.data = b64;\n      });\n    }\n  }));\n}\n\nfunction hasUrlPrefix(opts) {\n  if (!opts.prefix) {\n    return false;\n  }\n\n  var protocol = parseUri(opts.prefix).protocol;\n\n  return protocol === 'http' || protocol === 'https';\n}\n\n// Get all the information you possibly can about the URI given by name and\n// return it as a suitable object.\nfunction getHost(name, opts) {\n\n  // encode db name if opts.prefix is a url (#5574)\n  if (hasUrlPrefix(opts)) {\n    var dbName = opts.name.substr(opts.prefix.length);\n    name = opts.prefix + encodeURIComponent(dbName);\n  }\n\n  // Prase the URI into all its little bits\n  var uri = parseUri(name);\n\n  // Store the user and password as a separate auth object\n  if (uri.user || uri.password) {\n    uri.auth = {username: uri.user, password: uri.password};\n  }\n\n  // Split the path part of the URI into parts using '/' as the delimiter\n  // after removing any leading '/' and any trailing '/'\n  var parts = uri.path.replace(/(^\\/|\\/$)/g, '').split('/');\n\n  // Store the first part as the database name and remove it from the parts\n  // array\n  uri.db = parts.pop();\n  // Prevent double encoding of URI component\n  if (uri.db.indexOf('%') === -1) {\n    uri.db = encodeURIComponent(uri.db);\n  }\n\n  // Restore the path by joining all the remaining parts (all the parts\n  // except for the database name) with '/'s\n  uri.path = parts.join('/');\n\n  return uri;\n}\n\n// Generate a URL with the host data given by opts and the given path\nfunction genDBUrl(opts, path) {\n  return genUrl(opts, opts.db + '/' + path);\n}\n\n// Generate a URL with the host data given by opts and the given path\nfunction genUrl(opts, path) {\n  // If the host already has a path, then we need to have a path delimiter\n  // Otherwise, the path delimiter is the empty string\n  var pathDel = !opts.path ? '' : '/';\n\n  // If the host already has a path, then we need to have a path delimiter\n  // Otherwise, the path delimiter is the empty string\n  return opts.protocol + '://' + opts.host +\n         (opts.port ? (':' + opts.port) : '') +\n         '/' + opts.path + pathDel + path;\n}\n\nfunction paramsToStr(params) {\n  return '?' + Object.keys(params).map(function (k) {\n    return k + '=' + encodeURIComponent(params[k]);\n  }).join('&');\n}\n\n// Implements the PouchDB API for dealing with CouchDB instances over HTTP\nfunction HttpPouch(opts, callback) {\n\n  // The functions that will be publicly available for HttpPouch\n  var api = this;\n\n  var host = getHost(opts.name, opts);\n  var dbUrl = genDBUrl(host, '');\n\n  opts = clone(opts);\n  var ajaxOpts = opts.ajax || {};\n\n  if (opts.auth || host.auth) {\n    var nAuth = opts.auth || host.auth;\n    var str = nAuth.username + ':' + nAuth.password;\n    var token = btoa$1(unescape(encodeURIComponent(str)));\n    ajaxOpts.headers = ajaxOpts.headers || {};\n    ajaxOpts.headers.Authorization = 'Basic ' + token;\n  }\n\n  // Not strictly necessary, but we do this because numerous tests\n  // rely on swapping ajax in and out.\n  api._ajax = ajax;\n\n  function ajax$$(userOpts, options, callback) {\n    var reqAjax = userOpts.ajax || {};\n    var reqOpts = jsExtend.extend(clone(ajaxOpts), reqAjax, options);\n    log$1(reqOpts.method + ' ' + reqOpts.url);\n    return api._ajax(reqOpts, callback);\n  }\n\n  function ajaxPromise(userOpts, opts) {\n    return new PouchPromise(function (resolve, reject) {\n      ajax$$(userOpts, opts, function (err, res) {\n        /* istanbul ignore if */\n        if (err) {\n          return reject(err);\n        }\n        resolve(res);\n      });\n    });\n  }\n\n  function adapterFun$$(name, fun) {\n    return adapterFun(name, getArguments(function (args) {\n      setup().then(function () {\n        return fun.apply(this, args);\n      }).catch(function (e) {\n        var callback = args.pop();\n        callback(e);\n      });\n    }));\n  }\n\n  var setupPromise;\n\n  function setup() {\n    // TODO: Remove `skipSetup` in favor of `skip_setup` in a future release\n    if (opts.skipSetup || opts.skip_setup) {\n      return PouchPromise.resolve();\n    }\n\n    // If there is a setup in process or previous successful setup\n    // done then we will use that\n    // If previous setups have been rejected we will try again\n    if (setupPromise) {\n      return setupPromise;\n    }\n\n    var checkExists = {method: 'GET', url: dbUrl};\n    setupPromise = ajaxPromise({}, checkExists).catch(function (err) {\n      if (err && err.status && err.status === 404) {\n        // Doesnt exist, create it\n        explainError(404, 'PouchDB is just detecting if the remote exists.');\n        return ajaxPromise({}, {method: 'PUT', url: dbUrl});\n      } else {\n        return PouchPromise.reject(err);\n      }\n    }).catch(function (err) {\n      // If we try to create a database that already exists, skipped in\n      // istanbul since its catching a race condition.\n      /* istanbul ignore if */\n      if (err && err.status && err.status === 412) {\n        return true;\n      }\n      return PouchPromise.reject(err);\n    });\n\n    setupPromise.catch(function () {\n      setupPromise = null;\n    });\n\n    return setupPromise;\n  }\n\n  setTimeout(function () {\n    callback(null, api);\n  });\n\n  api.type = function () {\n    return 'http';\n  };\n\n  api.id = adapterFun$$('id', function (callback) {\n    ajax$$({}, {method: 'GET', url: genUrl(host, '')}, function (err, result) {\n      var uuid = (result && result.uuid) ?\n        (result.uuid + host.db) : genDBUrl(host, '');\n      callback(null, uuid);\n    });\n  });\n\n  api.request = adapterFun$$('request', function (options, callback) {\n    options.url = genDBUrl(host, options.url);\n    ajax$$({}, options, callback);\n  });\n\n  // Sends a POST request to the host calling the couchdb _compact function\n  //    version: The version of CouchDB it is running\n  api.compact = adapterFun$$('compact', function (opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    opts = clone(opts);\n    ajax$$(opts, {\n      url: genDBUrl(host, '_compact'),\n      method: 'POST'\n    }, function () {\n      function ping() {\n        api.info(function (err, res) {\n          if (res && !res.compact_running) {\n            callback(null, {ok: true});\n          } else {\n            setTimeout(ping, opts.interval || 200);\n          }\n        });\n      }\n      // Ping the http if it's finished compaction\n      ping();\n    });\n  });\n\n  api.bulkGet = adapterFun('bulkGet', function (opts, callback) {\n    var self = this;\n\n    function doBulkGet(cb) {\n      var params = {};\n      if (opts.revs) {\n        params.revs = true;\n      }\n      if (opts.attachments) {\n        /* istanbul ignore next */\n        params.attachments = true;\n      }\n      ajax$$({}, {\n        url: genDBUrl(host, '_bulk_get' + paramsToStr(params)),\n        method: 'POST',\n        body: { docs: opts.docs}\n      }, cb);\n    }\n\n    function doBulkGetShim() {\n      // avoid \"url too long error\" by splitting up into multiple requests\n      var batchSize = MAX_SIMULTANEOUS_REVS;\n      var numBatches = Math.ceil(opts.docs.length / batchSize);\n      var numDone = 0;\n      var results = new Array(numBatches);\n\n      function onResult(batchNum) {\n        return function (err, res) {\n          // err is impossible because shim returns a list of errs in that case\n          results[batchNum] = res.results;\n          if (++numDone === numBatches) {\n            callback(null, {results: flatten(results)});\n          }\n        };\n      }\n\n      for (var i = 0; i < numBatches; i++) {\n        var subOpts = pick(opts, ['revs', 'attachments']);\n        subOpts.ajax = ajaxOpts;\n        subOpts.docs = opts.docs.slice(i * batchSize,\n          Math.min(opts.docs.length, (i + 1) * batchSize));\n        bulkGet(self, subOpts, onResult(i));\n      }\n    }\n\n    // mark the whole database as either supporting or not supporting _bulk_get\n    var dbUrl = genUrl(host, '');\n    var supportsBulkGet = supportsBulkGetMap[dbUrl];\n\n    if (typeof supportsBulkGet !== 'boolean') {\n      // check if this database supports _bulk_get\n      doBulkGet(function (err, res) {\n        /* istanbul ignore else */\n        if (err) {\n          var status = Math.floor(err.status / 100);\n          /* istanbul ignore else */\n          if (status === 4 || status === 5) { // 40x or 50x\n            supportsBulkGetMap[dbUrl] = false;\n            explainError(\n              err.status,\n              'PouchDB is just detecting if the remote ' +\n              'supports the _bulk_get API.'\n            );\n            doBulkGetShim();\n          } else {\n            callback(err);\n          }\n        } else {\n          supportsBulkGetMap[dbUrl] = true;\n          callback(null, res);\n        }\n      });\n    } else if (supportsBulkGet) {\n      /* istanbul ignore next */\n      doBulkGet(callback);\n    } else {\n      doBulkGetShim();\n    }\n  });\n\n  // Calls GET on the host, which gets back a JSON string containing\n  //    couchdb: A welcome string\n  //    version: The version of CouchDB it is running\n  api._info = function (callback) {\n    setup().then(function () {\n      ajax$$({}, {\n        method: 'GET',\n        url: genDBUrl(host, '')\n      }, function (err, res) {\n        /* istanbul ignore next */\n        if (err) {\n        return callback(err);\n        }\n        res.host = genDBUrl(host, '');\n        callback(null, res);\n      });\n    }).catch(callback);\n  };\n\n  // Get the document with the given id from the database given by host.\n  // The id could be solely the _id in the database, or it may be a\n  // _design/ID or _local/ID path\n  api.get = adapterFun$$('get', function (id, opts, callback) {\n    // If no options were given, set the callback to the second parameter\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    opts = clone(opts);\n\n    // List of parameters to add to the GET request\n    var params = {};\n\n    if (opts.revs) {\n      params.revs = true;\n    }\n\n    if (opts.revs_info) {\n      params.revs_info = true;\n    }\n\n    if (opts.open_revs) {\n      if (opts.open_revs !== \"all\") {\n        opts.open_revs = JSON.stringify(opts.open_revs);\n      }\n      params.open_revs = opts.open_revs;\n    }\n\n    if (opts.rev) {\n      params.rev = opts.rev;\n    }\n\n    if (opts.conflicts) {\n      params.conflicts = opts.conflicts;\n    }\n\n    id = encodeDocId(id);\n\n    // Set the options for the ajax call\n    var options = {\n      method: 'GET',\n      url: genDBUrl(host, id + paramsToStr(params))\n    };\n\n    function fetchAttachments(doc) {\n      var atts = doc._attachments;\n      var filenames = atts && Object.keys(atts);\n      if (!atts || !filenames.length) {\n        return;\n      }\n      // we fetch these manually in separate XHRs, because\n      // Sync Gateway would normally send it back as multipart/mixed,\n      // which we cannot parse. Also, this is more efficient than\n      // receiving attachments as base64-encoded strings.\n      function fetch() {\n\n        if (!filenames.length) {\n          return null;\n        }\n\n        var filename = filenames.pop();\n        var att = atts[filename];\n        var path = encodeDocId(doc._id) + '/' + encodeAttachmentId(filename) +\n          '?rev=' + doc._rev;\n        return ajaxPromise(opts, {\n          method: 'GET',\n          url: genDBUrl(host, path),\n          binary: true\n        }).then(function (blob) {\n          if (opts.binary) {\n            return blob;\n          }\n          return new PouchPromise(function (resolve) {\n            blobToBase64(blob, resolve);\n          });\n        }).then(function (data) {\n          delete att.stub;\n          delete att.length;\n          att.data = data;\n        });\n      }\n\n      // This limits the number of parallel xhr requests to 5 any time\n      // to avoid issues with maximum browser request limits\n      return new PromisePool(fetch, 5, {promise: PouchPromise}).start();\n    }\n\n    function fetchAllAttachments(docOrDocs) {\n      if (Array.isArray(docOrDocs)) {\n        return PouchPromise.all(docOrDocs.map(function (doc) {\n          if (doc.ok) {\n            return fetchAttachments(doc.ok);\n          }\n        }));\n      }\n      return fetchAttachments(docOrDocs);\n    }\n\n    ajaxPromise(opts, options).then(function (res) {\n      return PouchPromise.resolve().then(function () {\n        if (opts.attachments) {\n          return fetchAllAttachments(res);\n        }\n      }).then(function () {\n        callback(null, res);\n      });\n    }).catch(callback);\n  });\n\n  // Delete the document given by doc from the database given by host.\n  api.remove = adapterFun$$('remove',\n      function (docOrId, optsOrRev, opts, callback) {\n    var doc;\n    if (typeof optsOrRev === 'string') {\n      // id, rev, opts, callback style\n      doc = {\n        _id: docOrId,\n        _rev: optsOrRev\n      };\n      if (typeof opts === 'function') {\n        callback = opts;\n        opts = {};\n      }\n    } else {\n      // doc, opts, callback style\n      doc = docOrId;\n      if (typeof optsOrRev === 'function') {\n        callback = optsOrRev;\n        opts = {};\n      } else {\n        callback = opts;\n        opts = optsOrRev;\n      }\n    }\n\n    var rev = (doc._rev || opts.rev);\n\n    // Delete the document\n    ajax$$(opts, {\n      method: 'DELETE',\n      url: genDBUrl(host, encodeDocId(doc._id)) + '?rev=' + rev\n    }, callback);\n  });\n\n  function encodeAttachmentId(attachmentId) {\n    return attachmentId.split(\"/\").map(encodeURIComponent).join(\"/\");\n  }\n\n  // Get the attachment\n  api.getAttachment =\n    adapterFun$$('getAttachment', function (docId, attachmentId, opts,\n                                                callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    var params = opts.rev ? ('?rev=' + opts.rev) : '';\n    var url = genDBUrl(host, encodeDocId(docId)) + '/' +\n      encodeAttachmentId(attachmentId) + params;\n    ajax$$(opts, {\n      method: 'GET',\n      url: url,\n      binary: true\n    }, callback);\n  });\n\n  // Remove the attachment given by the id and rev\n  api.removeAttachment =\n    adapterFun$$('removeAttachment', function (docId, attachmentId, rev,\n                                                   callback) {\n\n    var url = genDBUrl(host, encodeDocId(docId) + '/' +\n      encodeAttachmentId(attachmentId)) + '?rev=' + rev;\n\n    ajax$$({}, {\n      method: 'DELETE',\n      url: url\n    }, callback);\n  });\n\n  // Add the attachment given by blob and its contentType property\n  // to the document with the given id, the revision given by rev, and\n  // add it to the database given by host.\n  api.putAttachment =\n    adapterFun$$('putAttachment', function (docId, attachmentId, rev, blob,\n                                                type, callback) {\n    if (typeof type === 'function') {\n      callback = type;\n      type = blob;\n      blob = rev;\n      rev = null;\n    }\n    var id = encodeDocId(docId) + '/' + encodeAttachmentId(attachmentId);\n    var url = genDBUrl(host, id);\n    if (rev) {\n      url += '?rev=' + rev;\n    }\n\n    if (typeof blob === 'string') {\n      // input is assumed to be a base64 string\n      var binary;\n      try {\n        binary = atob$1(blob);\n      } catch (err) {\n        return callback(createError(BAD_ARG,\n                        'Attachment is not a valid base64 string'));\n      }\n      blob = binary ? binStringToBluffer(binary, type) : '';\n    }\n\n    var opts = {\n      headers: {'Content-Type': type},\n      method: 'PUT',\n      url: url,\n      processData: false,\n      body: blob,\n      timeout: ajaxOpts.timeout || 60000\n    };\n    // Add the attachment\n    ajax$$({}, opts, callback);\n  });\n\n  // Update/create multiple documents given by req in the database\n  // given by host.\n  api._bulkDocs = function (req, opts, callback) {\n    // If new_edits=false then it prevents the database from creating\n    // new revision numbers for the documents. Instead it just uses\n    // the old ones. This is used in database replication.\n    req.new_edits = opts.new_edits;\n\n    setup().then(function () {\n      return PouchPromise.all(req.docs.map(preprocessAttachments$1));\n    }).then(function () {\n      // Update/create the documents\n      ajax$$(opts, {\n        method: 'POST',\n        url: genDBUrl(host, '_bulk_docs'),\n        timeout: opts.timeout,\n        body: req\n      }, function (err, results) {\n        if (err) {\n          return callback(err);\n        }\n        results.forEach(function (result) {\n          result.ok = true; // smooths out cloudant not adding this\n        });\n        callback(null, results);\n      });\n    }).catch(callback);\n  };\n\n\n  // Update/create document\n  api._put = function (doc, opts, callback) {\n    setup().then(function () {\n      return preprocessAttachments$1(doc);\n    }).then(function () {\n      // Update/create the document\n      ajax$$(opts, {\n        method: 'PUT',\n        url: genDBUrl(host, encodeDocId(doc._id)),\n        body: doc\n      }, function (err, result) {\n        if (err) {\n          return callback(err);\n        }\n        callback(null, result);\n      });\n    }).catch(callback);\n  };\n\n\n  // Get a listing of the documents in the database given\n  // by host and ordered by increasing id.\n  api.allDocs = adapterFun$$('allDocs', function (opts, callback) {\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n    opts = clone(opts);\n\n    // List of parameters to add to the GET request\n    var params = {};\n    var body;\n    var method = 'GET';\n\n    if (opts.conflicts) {\n      params.conflicts = true;\n    }\n\n    if (opts.descending) {\n      params.descending = true;\n    }\n\n    if (opts.include_docs) {\n      params.include_docs = true;\n    }\n\n    // added in CouchDB 1.6.0\n    if (opts.attachments) {\n      params.attachments = true;\n    }\n\n    if (opts.key) {\n      params.key = JSON.stringify(opts.key);\n    }\n\n    if (opts.start_key) {\n      opts.startkey = opts.start_key;\n    }\n\n    if (opts.startkey) {\n      params.startkey = JSON.stringify(opts.startkey);\n    }\n\n    if (opts.end_key) {\n      opts.endkey = opts.end_key;\n    }\n\n    if (opts.endkey) {\n      params.endkey = JSON.stringify(opts.endkey);\n    }\n\n    if (typeof opts.inclusive_end !== 'undefined') {\n      params.inclusive_end = !!opts.inclusive_end;\n    }\n\n    if (typeof opts.limit !== 'undefined') {\n      params.limit = opts.limit;\n    }\n\n    if (typeof opts.skip !== 'undefined') {\n      params.skip = opts.skip;\n    }\n\n    var paramStr = paramsToStr(params);\n\n    if (typeof opts.keys !== 'undefined') {\n      method = 'POST';\n      body = {keys: opts.keys};\n    }\n\n    // Get the document listing\n    ajaxPromise(opts, {\n      method: method,\n      url: genDBUrl(host, '_all_docs' + paramStr),\n      body: body\n    }).then(function (res) {\n      if (opts.include_docs && opts.attachments && opts.binary) {\n        res.rows.forEach(readAttachmentsAsBlobOrBuffer);\n      }\n      callback(null, res);\n    }).catch(callback);\n  });\n\n  // Get a list of changes made to documents in the database given by host.\n  // TODO According to the README, there should be two other methods here,\n  // api.changes.addListener and api.changes.removeListener.\n  api._changes = function (opts) {\n\n    // We internally page the results of a changes request, this means\n    // if there is a large set of changes to be returned we can start\n    // processing them quicker instead of waiting on the entire\n    // set of changes to return and attempting to process them at once\n    var batchSize = 'batch_size' in opts ? opts.batch_size : CHANGES_BATCH_SIZE;\n\n    opts = clone(opts);\n    opts.timeout = ('timeout' in opts) ? opts.timeout :\n      ('timeout' in ajaxOpts) ? ajaxOpts.timeout :\n      30 * 1000;\n\n    // We give a 5 second buffer for CouchDB changes to respond with\n    // an ok timeout (if a timeout it set)\n    var params = opts.timeout ? {timeout: opts.timeout - (5 * 1000)} : {};\n    var limit = (typeof opts.limit !== 'undefined') ? opts.limit : false;\n    var returnDocs;\n    if ('return_docs' in opts) {\n      returnDocs = opts.return_docs;\n    } else if ('returnDocs' in opts) {\n      // TODO: Remove 'returnDocs' in favor of 'return_docs' in a future release\n      returnDocs = opts.returnDocs;\n    } else {\n      returnDocs = true;\n    }\n    //\n    var leftToFetch = limit;\n\n    if (opts.style) {\n      params.style = opts.style;\n    }\n\n    if (opts.include_docs || opts.filter && typeof opts.filter === 'function') {\n      params.include_docs = true;\n    }\n\n    if (opts.attachments) {\n      params.attachments = true;\n    }\n\n    if (opts.continuous) {\n      params.feed = 'longpoll';\n    }\n\n    if (opts.conflicts) {\n      params.conflicts = true;\n    }\n\n    if (opts.descending) {\n      params.descending = true;\n    }\n\n    if ('heartbeat' in opts) {\n      // If the heartbeat value is false, it disables the default heartbeat\n      if (opts.heartbeat) {\n        params.heartbeat = opts.heartbeat;\n      }\n    } else {\n      // Default heartbeat to 10 seconds\n      params.heartbeat = 10000;\n    }\n\n    if (opts.filter && typeof opts.filter === 'string') {\n      params.filter = opts.filter;\n    }\n\n    if (opts.view && typeof opts.view === 'string') {\n      params.filter = '_view';\n      params.view = opts.view;\n    }\n\n    // If opts.query_params exists, pass it through to the changes request.\n    // These parameters may be used by the filter on the source database.\n    if (opts.query_params && typeof opts.query_params === 'object') {\n      for (var param_name in opts.query_params) {\n        /* istanbul ignore else */\n        if (opts.query_params.hasOwnProperty(param_name)) {\n          params[param_name] = opts.query_params[param_name];\n        }\n      }\n    }\n\n    var method = 'GET';\n    var body;\n\n    if (opts.doc_ids) {\n      // set this automagically for the user; it's annoying that couchdb\n      // requires both a \"filter\" and a \"doc_ids\" param.\n      params.filter = '_doc_ids';\n      method = 'POST';\n      body = {doc_ids: opts.doc_ids };\n    }\n\n    var xhr;\n    var lastFetchedSeq;\n\n    // Get all the changes starting wtih the one immediately after the\n    // sequence number given by since.\n    var fetch = function (since, callback) {\n      if (opts.aborted) {\n        return;\n      }\n      params.since = since;\n      // \"since\" can be any kind of json object in Coudant/CouchDB 2.x\n      /* istanbul ignore next */\n      if (typeof params.since === \"object\") {\n        params.since = JSON.stringify(params.since);\n      }\n\n      if (opts.descending) {\n        if (limit) {\n          params.limit = leftToFetch;\n        }\n      } else {\n        params.limit = (!limit || leftToFetch > batchSize) ?\n          batchSize : leftToFetch;\n      }\n\n      // Set the options for the ajax call\n      var xhrOpts = {\n        method: method,\n        url: genDBUrl(host, '_changes' + paramsToStr(params)),\n        timeout: opts.timeout,\n        body: body\n      };\n      lastFetchedSeq = since;\n\n      /* istanbul ignore if */\n      if (opts.aborted) {\n        return;\n      }\n\n      // Get the changes\n      setup().then(function () {\n        xhr = ajax$$(opts, xhrOpts, callback);\n      }).catch(callback);\n    };\n\n    // If opts.since exists, get all the changes from the sequence\n    // number given by opts.since. Otherwise, get all the changes\n    // from the sequence number 0.\n    var results = {results: []};\n\n    var fetched = function (err, res) {\n      if (opts.aborted) {\n        return;\n      }\n      var raw_results_length = 0;\n      // If the result of the ajax call (res) contains changes (res.results)\n      if (res && res.results) {\n        raw_results_length = res.results.length;\n        results.last_seq = res.last_seq;\n        // For each change\n        var req = {};\n        req.query = opts.query_params;\n        res.results = res.results.filter(function (c) {\n          leftToFetch--;\n          var ret = filterChange(opts)(c);\n          if (ret) {\n            if (opts.include_docs && opts.attachments && opts.binary) {\n              readAttachmentsAsBlobOrBuffer(c);\n            }\n            if (returnDocs) {\n              results.results.push(c);\n            }\n            opts.onChange(c);\n          }\n          return ret;\n        });\n      } else if (err) {\n        // In case of an error, stop listening for changes and call\n        // opts.complete\n        opts.aborted = true;\n        opts.complete(err);\n        return;\n      }\n\n      // The changes feed may have timed out with no results\n      // if so reuse last update sequence\n      if (res && res.last_seq) {\n        lastFetchedSeq = res.last_seq;\n      }\n\n      var finished = (limit && leftToFetch <= 0) ||\n        (res && raw_results_length < batchSize) ||\n        (opts.descending);\n\n      if ((opts.continuous && !(limit && leftToFetch <= 0)) || !finished) {\n        // Queue a call to fetch again with the newest sequence number\n        setTimeout(function () { fetch(lastFetchedSeq, fetched); }, 0);\n      } else {\n        // We're done, call the callback\n        opts.complete(null, results);\n      }\n    };\n\n    fetch(opts.since || 0, fetched);\n\n    // Return a method to cancel this method from processing any more\n    return {\n      cancel: function () {\n        opts.aborted = true;\n        if (xhr) {\n          xhr.abort();\n        }\n      }\n    };\n  };\n\n  // Given a set of document/revision IDs (given by req), tets the subset of\n  // those that do NOT correspond to revisions stored in the database.\n  // See http://wiki.apache.org/couchdb/HttpPostRevsDiff\n  api.revsDiff = adapterFun$$('revsDiff', function (req, opts, callback) {\n    // If no options were given, set the callback to be the second parameter\n    if (typeof opts === 'function') {\n      callback = opts;\n      opts = {};\n    }\n\n    // Get the missing document/revision IDs\n    ajax$$(opts, {\n      method: 'POST',\n      url: genDBUrl(host, '_revs_diff'),\n      body: req\n    }, callback);\n  });\n\n  api._close = function (callback) {\n    callback();\n  };\n\n  api._destroy = function (options, callback) {\n    ajax$$(options, {\n      url: genDBUrl(host, ''),\n      method: 'DELETE'\n    }, function (err, resp) {\n      if (err && err.status && err.status !== 404) {\n        return callback(err);\n      }\n      callback(null, resp);\n    });\n  };\n}\n\n// HttpPouch is a valid adapter.\nHttpPouch.valid = function () {\n  return true;\n};\n\nfunction HttpPouch$1 (PouchDB) {\n  PouchDB.adapter('http', HttpPouch, false);\n  PouchDB.adapter('https', HttpPouch, false);\n}\n\nfunction pad(str, padWith, upToLength) {\n  var padding = '';\n  var targetLength = upToLength - str.length;\n  /* istanbul ignore next */\n  while (padding.length < targetLength) {\n    padding += padWith;\n  }\n  return padding;\n}\n\nfunction padLeft(str, padWith, upToLength) {\n  var padding = pad(str, padWith, upToLength);\n  return padding + str;\n}\n\nvar MIN_MAGNITUDE = -324; // verified by -Number.MIN_VALUE\nvar MAGNITUDE_DIGITS = 3; // ditto\nvar SEP = ''; // set to '_' for easier debugging \n\nfunction collate(a, b) {\n\n  if (a === b) {\n    return 0;\n  }\n\n  a = normalizeKey(a);\n  b = normalizeKey(b);\n\n  var ai = collationIndex(a);\n  var bi = collationIndex(b);\n  if ((ai - bi) !== 0) {\n    return ai - bi;\n  }\n  if (a === null) {\n    return 0;\n  }\n  switch (typeof a) {\n    case 'number':\n      return a - b;\n    case 'boolean':\n      return a === b ? 0 : (a < b ? -1 : 1);\n    case 'string':\n      return stringCollate(a, b);\n  }\n  return Array.isArray(a) ? arrayCollate(a, b) : objectCollate(a, b);\n}\n\n// couch considers null/NaN/Infinity/-Infinity === undefined,\n// for the purposes of mapreduce indexes. also, dates get stringified.\nfunction normalizeKey(key) {\n  switch (typeof key) {\n    case 'undefined':\n      return null;\n    case 'number':\n      if (key === Infinity || key === -Infinity || isNaN(key)) {\n        return null;\n      }\n      return key;\n    case 'object':\n      var origKey = key;\n      if (Array.isArray(key)) {\n        var len = key.length;\n        key = new Array(len);\n        for (var i = 0; i < len; i++) {\n          key[i] = normalizeKey(origKey[i]);\n        }\n      /* istanbul ignore next */\n      } else if (key instanceof Date) {\n        return key.toJSON();\n      } else if (key !== null) { // generic object\n        key = {};\n        for (var k in origKey) {\n          if (origKey.hasOwnProperty(k)) {\n            var val = origKey[k];\n            if (typeof val !== 'undefined') {\n              key[k] = normalizeKey(val);\n            }\n          }\n        }\n      }\n  }\n  return key;\n}\n\nfunction indexify(key) {\n  if (key !== null) {\n    switch (typeof key) {\n      case 'boolean':\n        return key ? 1 : 0;\n      case 'number':\n        return numToIndexableString(key);\n      case 'string':\n        // We've to be sure that key does not contain \\u0000\n        // Do order-preserving replacements:\n        // 0 -> 1, 1\n        // 1 -> 1, 2\n        // 2 -> 2, 2\n        return key\n          .replace(/\\u0002/g, '\\u0002\\u0002')\n          .replace(/\\u0001/g, '\\u0001\\u0002')\n          .replace(/\\u0000/g, '\\u0001\\u0001');\n      case 'object':\n        var isArray = Array.isArray(key);\n        var arr = isArray ? key : Object.keys(key);\n        var i = -1;\n        var len = arr.length;\n        var result = '';\n        if (isArray) {\n          while (++i < len) {\n            result += toIndexableString(arr[i]);\n          }\n        } else {\n          while (++i < len) {\n            var objKey = arr[i];\n            result += toIndexableString(objKey) +\n                toIndexableString(key[objKey]);\n          }\n        }\n        return result;\n    }\n  }\n  return '';\n}\n\n// convert the given key to a string that would be appropriate\n// for lexical sorting, e.g. within a database, where the\n// sorting is the same given by the collate() function.\nfunction toIndexableString(key) {\n  var zero = '\\u0000';\n  key = normalizeKey(key);\n  return collationIndex(key) + SEP + indexify(key) + zero;\n}\n\nfunction parseNumber(str, i) {\n  var originalIdx = i;\n  var num;\n  var zero = str[i] === '1';\n  if (zero) {\n    num = 0;\n    i++;\n  } else {\n    var neg = str[i] === '0';\n    i++;\n    var numAsString = '';\n    var magAsString = str.substring(i, i + MAGNITUDE_DIGITS);\n    var magnitude = parseInt(magAsString, 10) + MIN_MAGNITUDE;\n    /* istanbul ignore next */\n    if (neg) {\n      magnitude = -magnitude;\n    }\n    i += MAGNITUDE_DIGITS;\n    while (true) {\n      var ch = str[i];\n      if (ch === '\\u0000') {\n        break;\n      } else {\n        numAsString += ch;\n      }\n      i++;\n    }\n    numAsString = numAsString.split('.');\n    if (numAsString.length === 1) {\n      num = parseInt(numAsString, 10);\n    } else {\n      /* istanbul ignore next */\n      num = parseFloat(numAsString[0] + '.' + numAsString[1]);\n    }\n    /* istanbul ignore next */\n    if (neg) {\n      num = num - 10;\n    }\n    /* istanbul ignore next */\n    if (magnitude !== 0) {\n      // parseFloat is more reliable than pow due to rounding errors\n      // e.g. Number.MAX_VALUE would return Infinity if we did\n      // num * Math.pow(10, magnitude);\n      num = parseFloat(num + 'e' + magnitude);\n    }\n  }\n  return {num: num, length : i - originalIdx};\n}\n\n// move up the stack while parsing\n// this function moved outside of parseIndexableString for performance\nfunction pop(stack, metaStack) {\n  var obj = stack.pop();\n\n  if (metaStack.length) {\n    var lastMetaElement = metaStack[metaStack.length - 1];\n    if (obj === lastMetaElement.element) {\n      // popping a meta-element, e.g. an object whose value is another object\n      metaStack.pop();\n      lastMetaElement = metaStack[metaStack.length - 1];\n    }\n    var element = lastMetaElement.element;\n    var lastElementIndex = lastMetaElement.index;\n    if (Array.isArray(element)) {\n      element.push(obj);\n    } else if (lastElementIndex === stack.length - 2) { // obj with key+value\n      var key = stack.pop();\n      element[key] = obj;\n    } else {\n      stack.push(obj); // obj with key only\n    }\n  }\n}\n\nfunction parseIndexableString(str) {\n  var stack = [];\n  var metaStack = []; // stack for arrays and objects\n  var i = 0;\n\n  /*eslint no-constant-condition: [\"error\", { \"checkLoops\": false }]*/\n  while (true) {\n    var collationIndex = str[i++];\n    if (collationIndex === '\\u0000') {\n      if (stack.length === 1) {\n        return stack.pop();\n      } else {\n        pop(stack, metaStack);\n        continue;\n      }\n    }\n    switch (collationIndex) {\n      case '1':\n        stack.push(null);\n        break;\n      case '2':\n        stack.push(str[i] === '1');\n        i++;\n        break;\n      case '3':\n        var parsedNum = parseNumber(str, i);\n        stack.push(parsedNum.num);\n        i += parsedNum.length;\n        break;\n      case '4':\n        var parsedStr = '';\n        /*eslint no-constant-condition: [\"error\", { \"checkLoops\": false }]*/\n        while (true) {\n          var ch = str[i];\n          if (ch === '\\u0000') {\n            break;\n          }\n          parsedStr += ch;\n          i++;\n        }\n        // perform the reverse of the order-preserving replacement\n        // algorithm (see above)\n        parsedStr = parsedStr.replace(/\\u0001\\u0001/g, '\\u0000')\n          .replace(/\\u0001\\u0002/g, '\\u0001')\n          .replace(/\\u0002\\u0002/g, '\\u0002');\n        stack.push(parsedStr);\n        break;\n      case '5':\n        var arrayElement = { element: [], index: stack.length };\n        stack.push(arrayElement.element);\n        metaStack.push(arrayElement);\n        break;\n      case '6':\n        var objElement = { element: {}, index: stack.length };\n        stack.push(objElement.element);\n        metaStack.push(objElement);\n        break;\n      /* istanbul ignore next */\n      default:\n        throw new Error(\n          'bad collationIndex or unexpectedly reached end of input: ' +\n            collationIndex);\n    }\n  }\n}\n\nfunction arrayCollate(a, b) {\n  var len = Math.min(a.length, b.length);\n  for (var i = 0; i < len; i++) {\n    var sort = collate(a[i], b[i]);\n    if (sort !== 0) {\n      return sort;\n    }\n  }\n  return (a.length === b.length) ? 0 :\n    (a.length > b.length) ? 1 : -1;\n}\nfunction stringCollate(a, b) {\n  // See: https://github.com/daleharvey/pouchdb/issues/40\n  // This is incompatible with the CouchDB implementation, but its the\n  // best we can do for now\n  return (a === b) ? 0 : ((a > b) ? 1 : -1);\n}\nfunction objectCollate(a, b) {\n  var ak = Object.keys(a), bk = Object.keys(b);\n  var len = Math.min(ak.length, bk.length);\n  for (var i = 0; i < len; i++) {\n    // First sort the keys\n    var sort = collate(ak[i], bk[i]);\n    if (sort !== 0) {\n      return sort;\n    }\n    // if the keys are equal sort the values\n    sort = collate(a[ak[i]], b[bk[i]]);\n    if (sort !== 0) {\n      return sort;\n    }\n\n  }\n  return (ak.length === bk.length) ? 0 :\n    (ak.length > bk.length) ? 1 : -1;\n}\n// The collation is defined by erlangs ordered terms\n// the atoms null, true, false come first, then numbers, strings,\n// arrays, then objects\n// null/undefined/NaN/Infinity/-Infinity are all considered null\nfunction collationIndex(x) {\n  var id = ['boolean', 'number', 'string', 'object'];\n  var idx = id.indexOf(typeof x);\n  //false if -1 otherwise true, but fast!!!!1\n  if (~idx) {\n    if (x === null) {\n      return 1;\n    }\n    if (Array.isArray(x)) {\n      return 5;\n    }\n    return idx < 3 ? (idx + 2) : (idx + 3);\n  }\n  /* istanbul ignore next */\n  if (Array.isArray(x)) {\n    return 5;\n  }\n}\n\n// conversion:\n// x yyy zz...zz\n// x = 0 for negative, 1 for 0, 2 for positive\n// y = exponent (for negative numbers negated) moved so that it's >= 0\n// z = mantisse\nfunction numToIndexableString(num) {\n\n  if (num === 0) {\n    return '1';\n  }\n\n  // convert number to exponential format for easier and\n  // more succinct string sorting\n  var expFormat = num.toExponential().split(/e\\+?/);\n  var magnitude = parseInt(expFormat[1], 10);\n\n  var neg = num < 0;\n\n  var result = neg ? '0' : '2';\n\n  // first sort by magnitude\n  // it's easier if all magnitudes are positive\n  var magForComparison = ((neg ? -magnitude : magnitude) - MIN_MAGNITUDE);\n  var magString = padLeft((magForComparison).toString(), '0', MAGNITUDE_DIGITS);\n\n  result += SEP + magString;\n\n  // then sort by the factor\n  var factor = Math.abs(parseFloat(expFormat[0])); // [1..10)\n  /* istanbul ignore next */\n  if (neg) { // for negative reverse ordering\n    factor = 10 - factor;\n  }\n\n  var factorStr = factor.toFixed(20);\n\n  // strip zeros from the end\n  factorStr = factorStr.replace(/\\.?0+$/, '');\n\n  result += SEP + factorStr;\n\n  return result;\n}\n\n/*\n * Simple task queue to sequentialize actions. Assumes\n * callbacks will eventually fire (once).\n */\n\nfunction TaskQueue$1() {\n  this.promise = new PouchPromise(function (fulfill) {fulfill(); });\n}\nTaskQueue$1.prototype.add = function (promiseFactory) {\n  this.promise = this.promise.catch(function () {\n    // just recover\n  }).then(function () {\n    return promiseFactory();\n  });\n  return this.promise;\n};\nTaskQueue$1.prototype.finish = function () {\n  return this.promise;\n};\n\nfunction createView(opts) {\n  var sourceDB = opts.db;\n  var viewName = opts.viewName;\n  var mapFun = opts.map;\n  var reduceFun = opts.reduce;\n  var temporary = opts.temporary;\n\n  // the \"undefined\" part is for backwards compatibility\n  var viewSignature = mapFun.toString() + (reduceFun && reduceFun.toString()) +\n    'undefined';\n\n  var cachedViews;\n  if (!temporary) {\n    // cache this to ensure we don't try to update the same view twice\n    cachedViews = sourceDB._cachedViews = sourceDB._cachedViews || {};\n    if (cachedViews[viewSignature]) {\n      return cachedViews[viewSignature];\n    }\n  }\n\n  var promiseForView = sourceDB.info().then(function (info) {\n\n    var depDbName = info.db_name + '-mrview-' +\n      (temporary ? 'temp' : stringMd5(viewSignature));\n\n    // save the view name in the source db so it can be cleaned up if necessary\n    // (e.g. when the _design doc is deleted, remove all associated view data)\n    function diffFunction(doc) {\n      doc.views = doc.views || {};\n      var fullViewName = viewName;\n      if (fullViewName.indexOf('/') === -1) {\n        fullViewName = viewName + '/' + viewName;\n      }\n      var depDbs = doc.views[fullViewName] = doc.views[fullViewName] || {};\n      /* istanbul ignore if */\n      if (depDbs[depDbName]) {\n        return; // no update necessary\n      }\n      depDbs[depDbName] = true;\n      return doc;\n    }\n    return upsert(sourceDB, '_local/mrviews', diffFunction).then(function () {\n      return sourceDB.registerDependentDatabase(depDbName).then(function (res) {\n        var db = res.db;\n        db.auto_compaction = true;\n        var view = {\n          name: depDbName,\n          db: db,\n          sourceDB: sourceDB,\n          adapter: sourceDB.adapter,\n          mapFun: mapFun,\n          reduceFun: reduceFun\n        };\n        return view.db.get('_local/lastSeq').catch(function (err) {\n          /* istanbul ignore if */\n          if (err.status !== 404) {\n            throw err;\n          }\n        }).then(function (lastSeqDoc) {\n          view.seq = lastSeqDoc ? lastSeqDoc.seq : 0;\n          if (cachedViews) {\n            view.db.once('destroyed', function () {\n              delete cachedViews[viewSignature];\n            });\n          }\n          return view;\n        });\n      });\n    });\n  });\n\n  if (cachedViews) {\n    cachedViews[viewSignature] = promiseForView;\n  }\n  return promiseForView;\n}\n\nfunction QueryParseError(message) {\n  this.status = 400;\n  this.name = 'query_parse_error';\n  this.message = message;\n  this.error = true;\n  try {\n    Error.captureStackTrace(this, QueryParseError);\n  } catch (e) {}\n}\n\ninherits(QueryParseError, Error);\n\nfunction NotFoundError(message) {\n  this.status = 404;\n  this.name = 'not_found';\n  this.message = message;\n  this.error = true;\n  try {\n    Error.captureStackTrace(this, NotFoundError);\n  } catch (e) {}\n}\n\ninherits(NotFoundError, Error);\n\nfunction BuiltInError(message) {\n  this.status = 500;\n  this.name = 'invalid_value';\n  this.message = message;\n  this.error = true;\n  try {\n    Error.captureStackTrace(this, BuiltInError);\n  } catch (e) {}\n}\n\ninherits(BuiltInError, Error);\n\nfunction createBuiltInError(name) {\n  var message = 'builtin ' + name +\n    ' function requires map values to be numbers' +\n    ' or number arrays';\n  return new BuiltInError(message);\n}\n\nfunction sum(values) {\n  var result = 0;\n  for (var i = 0, len = values.length; i < len; i++) {\n    var num = values[i];\n    if (typeof num !== 'number') {\n      if (Array.isArray(num)) {\n        // lists of numbers are also allowed, sum them separately\n        result = typeof result === 'number' ? [result] : result;\n        for (var j = 0, jLen = num.length; j < jLen; j++) {\n          var jNum = num[j];\n          if (typeof jNum !== 'number') {\n            throw createBuiltInError('_sum');\n          } else if (typeof result[j] === 'undefined') {\n            result.push(jNum);\n          } else {\n            result[j] += jNum;\n          }\n        }\n      } else { // not array/number\n        throw createBuiltInError('_sum');\n      }\n    } else if (typeof result === 'number') {\n      result += num;\n    } else { // add number to array\n      result[0] += num;\n    }\n  }\n  return result;\n}\n\nvar log$2 = guardedConsole.bind(null, 'log');\nvar isArray = Array.isArray;\nvar toJSON = JSON.parse;\n\nfunction evalFunctionWithEval(func, emit) {\n  return scopedEval(\n    \"return (\" + func.replace(/;\\s*$/, \"\") + \");\",\n    {\n      emit: emit,\n      sum: sum,\n      log: log$2,\n      isArray: isArray,\n      toJSON: toJSON\n    }\n  );\n}\n\nvar promisedCallback = function (promise, callback) {\n  if (callback) {\n    promise.then(function (res) {\n      process.nextTick(function () {\n        callback(null, res);\n      });\n    }, function (reason) {\n      process.nextTick(function () {\n        callback(reason);\n      });\n    });\n  }\n  return promise;\n};\n\nvar callbackify = function (fun) {\n  return getArguments(function (args) {\n    var cb = args.pop();\n    var promise = fun.apply(this, args);\n    if (typeof cb === 'function') {\n      promisedCallback(promise, cb);\n    }\n    return promise;\n  });\n};\n\n// Promise finally util similar to Q.finally\nvar fin = function (promise, finalPromiseFactory) {\n  return promise.then(function (res) {\n    return finalPromiseFactory().then(function () {\n      return res;\n    });\n  }, function (reason) {\n    return finalPromiseFactory().then(function () {\n      throw reason;\n    });\n  });\n};\n\nvar sequentialize = function (queue, promiseFactory) {\n  return function () {\n    var args = arguments;\n    var that = this;\n    return queue.add(function () {\n      return promiseFactory.apply(that, args);\n    });\n  };\n};\n\n// uniq an array of strings, order not guaranteed\n// similar to underscore/lodash _.uniq\nvar uniq = function (arr) {\n  var map = {};\n\n  for (var i = 0, len = arr.length; i < len; i++) {\n    map['$' + arr[i]] = true;\n  }\n\n  var keys = Object.keys(map);\n  var output = new Array(keys.length);\n\n  for (i = 0, len = keys.length; i < len; i++) {\n    output[i] = keys[i].substring(1);\n  }\n  return output;\n};\n\nvar persistentQueues = {};\nvar tempViewQueue = new TaskQueue$1();\nvar CHANGES_BATCH_SIZE$1 = 50;\n\nfunction parseViewName(name) {\n  // can be either 'ddocname/viewname' or just 'viewname'\n  // (where the ddoc name is the same)\n  return name.indexOf('/') === -1 ? [name, name] : name.split('/');\n}\n\nfunction isGenOne(changes) {\n  // only return true if the current change is 1-\n  // and there are no other leafs\n  return changes.length === 1 && /^1-/.test(changes[0].rev);\n}\n\nfunction emitError(db, e) {\n  try {\n    db.emit('error', e);\n  } catch (err) {\n    guardedConsole('error',\n      'The user\\'s map/reduce function threw an uncaught error.\\n' +\n      'You can debug this error by doing:\\n' +\n      'myDatabase.on(\\'error\\', function (err) { debugger; });\\n' +\n      'Please double-check your map/reduce function.');\n    guardedConsole('error', e);\n  }\n}\n\nfunction tryCode$1(db, fun, args) {\n  // emit an event if there was an error thrown by a map/reduce function.\n  // putting try/catches in a single function also avoids deoptimizations.\n  try {\n    return {\n      output : fun.apply(null, args)\n    };\n  } catch (e) {\n    emitError(db, e);\n    return {error: e};\n  }\n}\n\nfunction sortByKeyThenValue(x, y) {\n  var keyCompare = collate(x.key, y.key);\n  return keyCompare !== 0 ? keyCompare : collate(x.value, y.value);\n}\n\nfunction sliceResults(results, limit, skip) {\n  skip = skip || 0;\n  if (typeof limit === 'number') {\n    return results.slice(skip, limit + skip);\n  } else if (skip > 0) {\n    return results.slice(skip);\n  }\n  return results;\n}\n\nfunction rowToDocId(row) {\n  var val = row.value;\n  // Users can explicitly specify a joined doc _id, or it\n  // defaults to the doc _id that emitted the key/value.\n  var docId = (val && typeof val === 'object' && val._id) || row.id;\n  return docId;\n}\n\nfunction readAttachmentsAsBlobOrBuffer$1(res) {\n  res.rows.forEach(function (row) {\n    var atts = row.doc && row.doc._attachments;\n    if (!atts) {\n      return;\n    }\n    Object.keys(atts).forEach(function (filename) {\n      var att = atts[filename];\n      atts[filename].data = b64ToBluffer(att.data, att.content_type);\n    });\n  });\n}\n\nfunction postprocessAttachments(opts) {\n  return function (res) {\n    if (opts.include_docs && opts.attachments && opts.binary) {\n      readAttachmentsAsBlobOrBuffer$1(res);\n    }\n    return res;\n  };\n}\n\nvar builtInReduce = {\n  _sum: function (keys, values) {\n    return sum(values);\n  },\n\n  _count: function (keys, values) {\n    return values.length;\n  },\n\n  _stats: function (keys, values) {\n    // no need to implement rereduce=true, because Pouch\n    // will never call it\n    function sumsqr(values) {\n      var _sumsqr = 0;\n      for (var i = 0, len = values.length; i < len; i++) {\n        var num = values[i];\n        _sumsqr += (num * num);\n      }\n      return _sumsqr;\n    }\n    return {\n      sum     : sum(values),\n      min     : Math.min.apply(null, values),\n      max     : Math.max.apply(null, values),\n      count   : values.length,\n      sumsqr : sumsqr(values)\n    };\n  }\n};\n\nfunction addHttpParam(paramName, opts, params, asJson) {\n  // add an http param from opts to params, optionally json-encoded\n  var val = opts[paramName];\n  if (typeof val !== 'undefined') {\n    if (asJson) {\n      val = encodeURIComponent(JSON.stringify(val));\n    }\n    params.push(paramName + '=' + val);\n  }\n}\n\nfunction coerceInteger(integerCandidate) {\n  if (typeof integerCandidate !== 'undefined') {\n    var asNumber = Number(integerCandidate);\n    // prevents e.g. '1foo' or '1.1' being coerced to 1\n    if (!isNaN(asNumber) && asNumber === parseInt(integerCandidate, 10)) {\n      return asNumber;\n    } else {\n      return integerCandidate;\n    }\n  }\n}\n\nfunction coerceOptions(opts) {\n  opts.group_level = coerceInteger(opts.group_level);\n  opts.limit = coerceInteger(opts.limit);\n  opts.skip = coerceInteger(opts.skip);\n  return opts;\n}\n\nfunction checkPositiveInteger(number) {\n  if (number) {\n    if (typeof number !== 'number') {\n      return  new QueryParseError('Invalid value for integer: \"' +\n      number + '\"');\n    }\n    if (number < 0) {\n      return new QueryParseError('Invalid value for positive integer: ' +\n        '\"' + number + '\"');\n    }\n  }\n}\n\nfunction checkQueryParseError(options, fun) {\n  var startkeyName = options.descending ? 'endkey' : 'startkey';\n  var endkeyName = options.descending ? 'startkey' : 'endkey';\n\n  if (typeof options[startkeyName] !== 'undefined' &&\n    typeof options[endkeyName] !== 'undefined' &&\n    collate(options[startkeyName], options[endkeyName]) > 0) {\n    throw new QueryParseError('No rows can match your key range, ' +\n    'reverse your start_key and end_key or set {descending : true}');\n  } else if (fun.reduce && options.reduce !== false) {\n    if (options.include_docs) {\n      throw new QueryParseError('{include_docs:true} is invalid for reduce');\n    } else if (options.keys && options.keys.length > 1 &&\n        !options.group && !options.group_level) {\n      throw new QueryParseError('Multi-key fetches for reduce views must use ' +\n      '{group: true}');\n    }\n  }\n  ['group_level', 'limit', 'skip'].forEach(function (optionName) {\n    var error = checkPositiveInteger(options[optionName]);\n    if (error) {\n      throw error;\n    }\n  });\n}\n\nfunction httpQuery(db, fun, opts) {\n  // List of parameters to add to the PUT request\n  var params = [];\n  var body;\n  var method = 'GET';\n\n  // If opts.reduce exists and is defined, then add it to the list\n  // of parameters.\n  // If reduce=false then the results are that of only the map function\n  // not the final result of map and reduce.\n  addHttpParam('reduce', opts, params);\n  addHttpParam('include_docs', opts, params);\n  addHttpParam('attachments', opts, params);\n  addHttpParam('limit', opts, params);\n  addHttpParam('descending', opts, params);\n  addHttpParam('group', opts, params);\n  addHttpParam('group_level', opts, params);\n  addHttpParam('skip', opts, params);\n  addHttpParam('stale', opts, params);\n  addHttpParam('conflicts', opts, params);\n  addHttpParam('startkey', opts, params, true);\n  addHttpParam('start_key', opts, params, true);\n  addHttpParam('endkey', opts, params, true);\n  addHttpParam('end_key', opts, params, true);\n  addHttpParam('inclusive_end', opts, params);\n  addHttpParam('key', opts, params, true);\n\n  // Format the list of parameters into a valid URI query string\n  params = params.join('&');\n  params = params === '' ? '' : '?' + params;\n\n  // If keys are supplied, issue a POST to circumvent GET query string limits\n  // see http://wiki.apache.org/couchdb/HTTP_view_API#Querying_Options\n  if (typeof opts.keys !== 'undefined') {\n    var MAX_URL_LENGTH = 2000;\n    // according to http://stackoverflow.com/a/417184/680742,\n    // the de facto URL length limit is 2000 characters\n\n    var keysAsString =\n      'keys=' + encodeURIComponent(JSON.stringify(opts.keys));\n    if (keysAsString.length + params.length + 1 <= MAX_URL_LENGTH) {\n      // If the keys are short enough, do a GET. we do this to work around\n      // Safari not understanding 304s on POSTs (see pouchdb/pouchdb#1239)\n      params += (params[0] === '?' ? '&' : '?') + keysAsString;\n    } else {\n      method = 'POST';\n      if (typeof fun === 'string') {\n        body = {keys: opts.keys};\n      } else { // fun is {map : mapfun}, so append to this\n        fun.keys = opts.keys;\n      }\n    }\n  }\n\n  // We are referencing a query defined in the design doc\n  if (typeof fun === 'string') {\n    var parts = parseViewName(fun);\n    return db.request({\n      method: method,\n      url: '_design/' + parts[0] + '/_view/' + parts[1] + params,\n      body: body\n    }).then(postprocessAttachments(opts));\n  }\n\n  // We are using a temporary view, terrible for performance, good for testing\n  body = body || {};\n  Object.keys(fun).forEach(function (key) {\n    if (Array.isArray(fun[key])) {\n      body[key] = fun[key];\n    } else {\n      body[key] = fun[key].toString();\n    }\n  });\n  return db.request({\n    method: 'POST',\n    url: '_temp_view' + params,\n    body: body\n  }).then(postprocessAttachments(opts));\n}\n\n// custom adapters can define their own api._query\n// and override the default behavior\n/* istanbul ignore next */\nfunction customQuery(db, fun, opts) {\n  return new PouchPromise(function (resolve, reject) {\n    db._query(fun, opts, function (err, res) {\n      if (err) {\n        return reject(err);\n      }\n      resolve(res);\n    });\n  });\n}\n\n// custom adapters can define their own api._viewCleanup\n// and override the default behavior\n/* istanbul ignore next */\nfunction customViewCleanup(db) {\n  return new PouchPromise(function (resolve, reject) {\n    db._viewCleanup(function (err, res) {\n      if (err) {\n        return reject(err);\n      }\n      resolve(res);\n    });\n  });\n}\n\nfunction defaultsTo(value) {\n  return function (reason) {\n    /* istanbul ignore else */\n    if (reason.status === 404) {\n      return value;\n    } else {\n      throw reason;\n    }\n  };\n}\n\n// returns a promise for a list of docs to update, based on the input docId.\n// the order doesn't matter, because post-3.2.0, bulkDocs\n// is an atomic operation in all three adapters.\nfunction getDocsToPersist(docId, view, docIdsToChangesAndEmits) {\n  var metaDocId = '_local/doc_' + docId;\n  var defaultMetaDoc = {_id: metaDocId, keys: []};\n  var docData = docIdsToChangesAndEmits[docId];\n  var indexableKeysToKeyValues = docData.indexableKeysToKeyValues;\n  var changes = docData.changes;\n\n  function getMetaDoc() {\n    if (isGenOne(changes)) {\n      // generation 1, so we can safely assume initial state\n      // for performance reasons (avoids unnecessary GETs)\n      return PouchPromise.resolve(defaultMetaDoc);\n    }\n    return view.db.get(metaDocId).catch(defaultsTo(defaultMetaDoc));\n  }\n\n  function getKeyValueDocs(metaDoc) {\n    if (!metaDoc.keys.length) {\n      // no keys, no need for a lookup\n      return PouchPromise.resolve({rows: []});\n    }\n    return view.db.allDocs({\n      keys: metaDoc.keys,\n      include_docs: true\n    });\n  }\n\n  function processKvDocs(metaDoc, kvDocsRes) {\n    var kvDocs = [];\n    var oldKeysMap = {};\n\n    for (var i = 0, len = kvDocsRes.rows.length; i < len; i++) {\n      var row = kvDocsRes.rows[i];\n      var doc = row.doc;\n      if (!doc) { // deleted\n        continue;\n      }\n      kvDocs.push(doc);\n      oldKeysMap[doc._id] = true;\n      doc._deleted = !indexableKeysToKeyValues[doc._id];\n      if (!doc._deleted) {\n        var keyValue = indexableKeysToKeyValues[doc._id];\n        if ('value' in keyValue) {\n          doc.value = keyValue.value;\n        }\n      }\n    }\n\n    var newKeys = Object.keys(indexableKeysToKeyValues);\n    newKeys.forEach(function (key) {\n      if (!oldKeysMap[key]) {\n        // new doc\n        var kvDoc = {\n          _id: key\n        };\n        var keyValue = indexableKeysToKeyValues[key];\n        if ('value' in keyValue) {\n          kvDoc.value = keyValue.value;\n        }\n        kvDocs.push(kvDoc);\n      }\n    });\n    metaDoc.keys = uniq(newKeys.concat(metaDoc.keys));\n    kvDocs.push(metaDoc);\n\n    return kvDocs;\n  }\n\n  return getMetaDoc().then(function (metaDoc) {\n    return getKeyValueDocs(metaDoc).then(function (kvDocsRes) {\n      return processKvDocs(metaDoc, kvDocsRes);\n    });\n  });\n}\n\n// updates all emitted key/value docs and metaDocs in the mrview database\n// for the given batch of documents from the source database\nfunction saveKeyValues(view, docIdsToChangesAndEmits, seq) {\n  var seqDocId = '_local/lastSeq';\n  return view.db.get(seqDocId)\n  .catch(defaultsTo({_id: seqDocId, seq: 0}))\n  .then(function (lastSeqDoc) {\n    var docIds = Object.keys(docIdsToChangesAndEmits);\n    return PouchPromise.all(docIds.map(function (docId) {\n      return getDocsToPersist(docId, view, docIdsToChangesAndEmits);\n    })).then(function (listOfDocsToPersist) {\n      var docsToPersist = flatten(listOfDocsToPersist);\n      lastSeqDoc.seq = seq;\n      docsToPersist.push(lastSeqDoc);\n      // write all docs in a single operation, update the seq once\n      return view.db.bulkDocs({docs : docsToPersist});\n    });\n  });\n}\n\nfunction getQueue(view) {\n  var viewName = typeof view === 'string' ? view : view.name;\n  var queue = persistentQueues[viewName];\n  if (!queue) {\n    queue = persistentQueues[viewName] = new TaskQueue$1();\n  }\n  return queue;\n}\n\nfunction updateView(view) {\n  return sequentialize(getQueue(view), function () {\n    return updateViewInQueue(view);\n  })();\n}\n\nfunction updateViewInQueue(view) {\n  // bind the emit function once\n  var mapResults;\n  var doc;\n\n  function emit(key, value) {\n    var output = {id: doc._id, key: normalizeKey(key)};\n    // Don't explicitly store the value unless it's defined and non-null.\n    // This saves on storage space, because often people don't use it.\n    if (typeof value !== 'undefined' && value !== null) {\n      output.value = normalizeKey(value);\n    }\n    mapResults.push(output);\n  }\n\n  var mapFun;\n  // for temp_views one can use emit(doc, emit), see #38\n  if (typeof view.mapFun === \"function\" && view.mapFun.length === 2) {\n    var origMap = view.mapFun;\n    mapFun = function (doc) {\n      return origMap(doc, emit);\n    };\n  } else {\n    mapFun = evalFunctionWithEval(view.mapFun.toString(), emit);\n  }\n\n  var currentSeq = view.seq || 0;\n\n  function processChange(docIdsToChangesAndEmits, seq) {\n    return function () {\n      return saveKeyValues(view, docIdsToChangesAndEmits, seq);\n    };\n  }\n\n  var queue = new TaskQueue$1();\n  // TODO(neojski): https://github.com/daleharvey/pouchdb/issues/1521\n\n  return new PouchPromise(function (resolve, reject) {\n\n    function complete() {\n      queue.finish().then(function () {\n        view.seq = currentSeq;\n        resolve();\n      });\n    }\n\n    function processNextBatch() {\n      view.sourceDB.changes({\n        conflicts: true,\n        include_docs: true,\n        style: 'all_docs',\n        since: currentSeq,\n        limit: CHANGES_BATCH_SIZE$1\n      }).on('complete', function (response) {\n        var results = response.results;\n        if (!results.length) {\n          return complete();\n        }\n        var docIdsToChangesAndEmits = {};\n        for (var i = 0, l = results.length; i < l; i++) {\n          var change = results[i];\n          if (change.doc._id[0] !== '_') {\n            mapResults = [];\n            doc = change.doc;\n\n            if (!doc._deleted) {\n              tryCode$1(view.sourceDB, mapFun, [doc]);\n            }\n            mapResults.sort(sortByKeyThenValue);\n\n            var indexableKeysToKeyValues = {};\n            var lastKey;\n            for (var j = 0, jl = mapResults.length; j < jl; j++) {\n              var obj = mapResults[j];\n              var complexKey = [obj.key, obj.id];\n              if (collate(obj.key, lastKey) === 0) {\n                complexKey.push(j); // dup key+id, so make it unique\n              }\n              var indexableKey = toIndexableString(complexKey);\n              indexableKeysToKeyValues[indexableKey] = obj;\n              lastKey = obj.key;\n            }\n            docIdsToChangesAndEmits[change.doc._id] = {\n              indexableKeysToKeyValues: indexableKeysToKeyValues,\n              changes: change.changes\n            };\n          }\n          currentSeq = change.seq;\n        }\n        queue.add(processChange(docIdsToChangesAndEmits, currentSeq));\n        if (results.length < CHANGES_BATCH_SIZE$1) {\n          return complete();\n        }\n        return processNextBatch();\n      }).on('error', onError);\n      /* istanbul ignore next */\n      function onError(err) {\n        reject(err);\n      }\n    }\n\n    processNextBatch();\n  });\n}\n\nfunction reduceView(view, results, options) {\n  if (options.group_level === 0) {\n    delete options.group_level;\n  }\n\n  var shouldGroup = options.group || options.group_level;\n\n  var reduceFun;\n  if (builtInReduce[view.reduceFun]) {\n    reduceFun = builtInReduce[view.reduceFun];\n  } else {\n    reduceFun = evalFunctionWithEval(view.reduceFun.toString());\n  }\n\n  var groups = [];\n  var lvl = isNaN(options.group_level) ? Number.POSITIVE_INFINITY :\n    options.group_level;\n  results.forEach(function (e) {\n    var last = groups[groups.length - 1];\n    var groupKey = shouldGroup ? e.key : null;\n\n    // only set group_level for array keys\n    if (shouldGroup && Array.isArray(groupKey)) {\n      groupKey = groupKey.slice(0, lvl);\n    }\n\n    if (last && collate(last.groupKey, groupKey) === 0) {\n      last.keys.push([e.key, e.id]);\n      last.values.push(e.value);\n      return;\n    }\n    groups.push({\n      keys: [[e.key, e.id]],\n      values: [e.value],\n      groupKey: groupKey\n    });\n  });\n  results = [];\n  for (var i = 0, len = groups.length; i < len; i++) {\n    var e = groups[i];\n    var reduceTry = tryCode$1(view.sourceDB, reduceFun,\n      [e.keys, e.values, false]);\n    if (reduceTry.error && reduceTry.error instanceof BuiltInError) {\n      // CouchDB returns an error if a built-in errors out\n      throw reduceTry.error;\n    }\n    results.push({\n      // CouchDB just sets the value to null if a non-built-in errors out\n      value: reduceTry.error ? null : reduceTry.output,\n      key: e.groupKey\n    });\n  }\n  // no total_rows/offset when reducing\n  return {rows: sliceResults(results, options.limit, options.skip)};\n}\n\nfunction queryView(view, opts) {\n  return sequentialize(getQueue(view), function () {\n    return queryViewInQueue(view, opts);\n  })();\n}\n\nfunction queryViewInQueue(view, opts) {\n  var totalRows;\n  var shouldReduce = view.reduceFun && opts.reduce !== false;\n  var skip = opts.skip || 0;\n  if (typeof opts.keys !== 'undefined' && !opts.keys.length) {\n    // equivalent query\n    opts.limit = 0;\n    delete opts.keys;\n  }\n\n  function fetchFromView(viewOpts) {\n    viewOpts.include_docs = true;\n    return view.db.allDocs(viewOpts).then(function (res) {\n      totalRows = res.total_rows;\n      return res.rows.map(function (result) {\n\n        // implicit migration - in older versions of PouchDB,\n        // we explicitly stored the doc as {id: ..., key: ..., value: ...}\n        // this is tested in a migration test\n        /* istanbul ignore next */\n        if ('value' in result.doc && typeof result.doc.value === 'object' &&\n            result.doc.value !== null) {\n          var keys = Object.keys(result.doc.value).sort();\n          // this detection method is not perfect, but it's unlikely the user\n          // emitted a value which was an object with these 3 exact keys\n          var expectedKeys = ['id', 'key', 'value'];\n          if (!(keys < expectedKeys || keys > expectedKeys)) {\n            return result.doc.value;\n          }\n        }\n\n        var parsedKeyAndDocId = parseIndexableString(result.doc._id);\n        return {\n          key: parsedKeyAndDocId[0],\n          id: parsedKeyAndDocId[1],\n          value: ('value' in result.doc ? result.doc.value : null)\n        };\n      });\n    });\n  }\n\n  function onMapResultsReady(rows) {\n    var finalResults;\n    if (shouldReduce) {\n      finalResults = reduceView(view, rows, opts);\n    } else {\n      finalResults = {\n        total_rows: totalRows,\n        offset: skip,\n        rows: rows\n      };\n    }\n    if (opts.include_docs) {\n      var docIds = uniq(rows.map(rowToDocId));\n\n      return view.sourceDB.allDocs({\n        keys: docIds,\n        include_docs: true,\n        conflicts: opts.conflicts,\n        attachments: opts.attachments,\n        binary: opts.binary\n      }).then(function (allDocsRes) {\n        var docIdsToDocs = {};\n        allDocsRes.rows.forEach(function (row) {\n          if (row.doc) {\n            docIdsToDocs['$' + row.id] = row.doc;\n          }\n        });\n        rows.forEach(function (row) {\n          var docId = rowToDocId(row);\n          var doc = docIdsToDocs['$' + docId];\n          if (doc) {\n            row.doc = doc;\n          }\n        });\n        return finalResults;\n      });\n    } else {\n      return finalResults;\n    }\n  }\n\n  if (typeof opts.keys !== 'undefined') {\n    var keys = opts.keys;\n    var fetchPromises = keys.map(function (key) {\n      var viewOpts = {\n        startkey : toIndexableString([key]),\n        endkey   : toIndexableString([key, {}])\n      };\n      return fetchFromView(viewOpts);\n    });\n    return PouchPromise.all(fetchPromises).then(flatten).then(onMapResultsReady);\n  } else { // normal query, no 'keys'\n    var viewOpts = {\n      descending : opts.descending\n    };\n    if (opts.start_key) {\n        opts.startkey = opts.start_key;\n    }\n    if (opts.end_key) {\n        opts.endkey = opts.end_key;\n    }\n    if (typeof opts.startkey !== 'undefined') {\n      viewOpts.startkey = opts.descending ?\n        toIndexableString([opts.startkey, {}]) :\n        toIndexableString([opts.startkey]);\n    }\n    if (typeof opts.endkey !== 'undefined') {\n      var inclusiveEnd = opts.inclusive_end !== false;\n      if (opts.descending) {\n        inclusiveEnd = !inclusiveEnd;\n      }\n\n      viewOpts.endkey = toIndexableString(\n        inclusiveEnd ? [opts.endkey, {}] : [opts.endkey]);\n    }\n    if (typeof opts.key !== 'undefined') {\n      var keyStart = toIndexableString([opts.key]);\n      var keyEnd = toIndexableString([opts.key, {}]);\n      if (viewOpts.descending) {\n        viewOpts.endkey = keyStart;\n        viewOpts.startkey = keyEnd;\n      } else {\n        viewOpts.startkey = keyStart;\n        viewOpts.endkey = keyEnd;\n      }\n    }\n    if (!shouldReduce) {\n      if (typeof opts.limit === 'number') {\n        viewOpts.limit = opts.limit;\n      }\n      viewOpts.skip = skip;\n    }\n    return fetchFromView(viewOpts).then(onMapResultsReady);\n  }\n}\n\nfunction httpViewCleanup(db) {\n  return db.request({\n    method: 'POST',\n    url: '_view_cleanup'\n  });\n}\n\nfunction localViewCleanup(db) {\n  return db.get('_local/mrviews').then(function (metaDoc) {\n    var docsToViews = {};\n    Object.keys(metaDoc.views).forEach(function (fullViewName) {\n      var parts = parseViewName(fullViewName);\n      var designDocName = '_design/' + parts[0];\n      var viewName = parts[1];\n      docsToViews[designDocName] = docsToViews[designDocName] || {};\n      docsToViews[designDocName][viewName] = true;\n    });\n    var opts = {\n      keys : Object.keys(docsToViews),\n      include_docs : true\n    };\n    return db.allDocs(opts).then(function (res) {\n      var viewsToStatus = {};\n      res.rows.forEach(function (row) {\n        var ddocName = row.key.substring(8);\n        Object.keys(docsToViews[row.key]).forEach(function (viewName) {\n          var fullViewName = ddocName + '/' + viewName;\n          /* istanbul ignore if */\n          if (!metaDoc.views[fullViewName]) {\n            // new format, without slashes, to support PouchDB 2.2.0\n            // migration test in pouchdb's browser.migration.js verifies this\n            fullViewName = viewName;\n          }\n          var viewDBNames = Object.keys(metaDoc.views[fullViewName]);\n          // design doc deleted, or view function nonexistent\n          var statusIsGood = row.doc && row.doc.views &&\n            row.doc.views[viewName];\n          viewDBNames.forEach(function (viewDBName) {\n            viewsToStatus[viewDBName] =\n              viewsToStatus[viewDBName] || statusIsGood;\n          });\n        });\n      });\n      var dbsToDelete = Object.keys(viewsToStatus).filter(\n        function (viewDBName) { return !viewsToStatus[viewDBName]; });\n      var destroyPromises = dbsToDelete.map(function (viewDBName) {\n        return sequentialize(getQueue(viewDBName), function () {\n          return new db.constructor(viewDBName, db.__opts).destroy();\n        })();\n      });\n      return PouchPromise.all(destroyPromises).then(function () {\n        return {ok: true};\n      });\n    });\n  }, defaultsTo({ok: true}));\n}\n\nvar viewCleanup = callbackify(function () {\n  var db = this;\n  if (db.type() === 'http') {\n    return httpViewCleanup(db);\n  }\n  /* istanbul ignore next */\n  if (typeof db._viewCleanup === 'function') {\n    return customViewCleanup(db);\n  }\n  return localViewCleanup(db);\n});\n\nfunction queryPromised(db, fun, opts) {\n  if (db.type() === 'http') {\n    return httpQuery(db, fun, opts);\n  }\n\n  /* istanbul ignore next */\n  if (typeof db._query === 'function') {\n    return customQuery(db, fun, opts);\n  }\n\n  if (typeof fun !== 'string') {\n    // temp_view\n    checkQueryParseError(opts, fun);\n\n    var createViewOpts = {\n      db : db,\n      viewName : 'temp_view/temp_view',\n      map : fun.map,\n      reduce : fun.reduce,\n      temporary : true\n    };\n    tempViewQueue.add(function () {\n      return createView(createViewOpts).then(function (view) {\n        function cleanup() {\n          return view.db.destroy();\n        }\n        return fin(updateView(view).then(function () {\n          return queryView(view, opts);\n        }), cleanup);\n      });\n    });\n    return tempViewQueue.finish();\n  } else {\n    // persistent view\n    var fullViewName = fun;\n    var parts = parseViewName(fullViewName);\n    var designDocName = parts[0];\n    var viewName = parts[1];\n    return db.get('_design/' + designDocName).then(function (doc) {\n      var fun = doc.views && doc.views[viewName];\n\n      if (!fun || typeof fun.map !== 'string') {\n        throw new NotFoundError('ddoc ' + designDocName +\n        ' has no view named ' + viewName);\n      }\n      checkQueryParseError(opts, fun);\n\n      var createViewOpts = {\n        db : db,\n        viewName : fullViewName,\n        map : fun.map,\n        reduce : fun.reduce\n      };\n      return createView(createViewOpts).then(function (view) {\n        if (opts.stale === 'ok' || opts.stale === 'update_after') {\n          if (opts.stale === 'update_after') {\n            process.nextTick(function () {\n              updateView(view);\n            });\n          }\n          return queryView(view, opts);\n        } else { // stale not ok\n          return updateView(view).then(function () {\n            return queryView(view, opts);\n          });\n        }\n      });\n    });\n  }\n}\n\nvar query = function (fun, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  opts = opts ? coerceOptions(opts) : {};\n\n  if (typeof fun === 'function') {\n    fun = {map : fun};\n  }\n\n  var db = this;\n  var promise = PouchPromise.resolve().then(function () {\n    return queryPromised(db, fun, opts);\n  });\n  promisedCallback(promise, callback);\n  return promise;\n};\n\n\nvar mapreduce = {\n  query: query,\n  viewCleanup: viewCleanup\n};\n\nfunction isGenOne$1(rev) {\n  return /^1-/.test(rev);\n}\n\nfunction fileHasChanged(localDoc, remoteDoc, filename) {\n  return !localDoc._attachments ||\n         !localDoc._attachments[filename] ||\n         localDoc._attachments[filename].digest !== remoteDoc._attachments[filename].digest;\n}\n\nfunction getDocAttachments(db, doc) {\n  var filenames = Object.keys(doc._attachments);\n  return PouchPromise.all(filenames.map(function (filename) {\n    return db.getAttachment(doc._id, filename, {rev: doc._rev});\n  }));\n}\n\nfunction getDocAttachmentsFromTargetOrSource(target, src, doc) {\n  var doCheckForLocalAttachments = src.type() === 'http' && target.type() !== 'http';\n  var filenames = Object.keys(doc._attachments);\n\n  if (!doCheckForLocalAttachments) {\n    return getDocAttachments(src, doc);\n  }\n\n  return target.get(doc._id).then(function (localDoc) {\n    return PouchPromise.all(filenames.map(function (filename) {\n      if (fileHasChanged(localDoc, doc, filename)) {\n        return src.getAttachment(doc._id, filename);\n      }\n\n      return target.getAttachment(localDoc._id, filename);\n    }));\n  }).catch(function (error) {\n    /* istanbul ignore if */\n    if (error.status !== 404) {\n      throw error;\n    }\n\n    return getDocAttachments(src, doc);\n  });\n}\n\nfunction createBulkGetOpts(diffs) {\n  var requests = [];\n  Object.keys(diffs).forEach(function (id) {\n    var missingRevs = diffs[id].missing;\n    missingRevs.forEach(function (missingRev) {\n      requests.push({\n        id: id,\n        rev: missingRev\n      });\n    });\n  });\n\n  return {\n    docs: requests,\n    revs: true\n  };\n}\n\n//\n// Fetch all the documents from the src as described in the \"diffs\",\n// which is a mapping of docs IDs to revisions. If the state ever\n// changes to \"cancelled\", then the returned promise will be rejected.\n// Else it will be resolved with a list of fetched documents.\n//\nfunction getDocs(src, target, diffs, state) {\n  diffs = clone(diffs); // we do not need to modify this\n\n  var resultDocs = [],\n      ok = true;\n\n  function getAllDocs() {\n\n    var bulkGetOpts = createBulkGetOpts(diffs);\n\n    if (!bulkGetOpts.docs.length) { // optimization: skip empty requests\n      return;\n    }\n\n    return src.bulkGet(bulkGetOpts).then(function (bulkGetResponse) {\n      /* istanbul ignore if */\n      if (state.cancelled) {\n        throw new Error('cancelled');\n      }\n      return PouchPromise.all(bulkGetResponse.results.map(function (bulkGetInfo) {\n        return PouchPromise.all(bulkGetInfo.docs.map(function (doc) {\n          var remoteDoc = doc.ok;\n\n          if (doc.error) {\n            // when AUTO_COMPACTION is set, docs can be returned which look\n            // like this: {\"missing\":\"1-7c3ac256b693c462af8442f992b83696\"}\n            ok = false;\n          }\n\n          if (!remoteDoc || !remoteDoc._attachments) {\n            return remoteDoc;\n          }\n\n          return getDocAttachmentsFromTargetOrSource(target, src, remoteDoc).then(function (attachments) {\n            var filenames = Object.keys(remoteDoc._attachments);\n            attachments.forEach(function (attachment, i) {\n              var att = remoteDoc._attachments[filenames[i]];\n              delete att.stub;\n              delete att.length;\n              att.data = attachment;\n            });\n\n            return remoteDoc;\n          });\n        }));\n      }))\n\n      .then(function (results) {\n        resultDocs = resultDocs.concat(flatten(results).filter(Boolean));\n      });\n    });\n  }\n\n  function hasAttachments(doc) {\n    return doc._attachments && Object.keys(doc._attachments).length > 0;\n  }\n\n  function fetchRevisionOneDocs(ids) {\n    // Optimization: fetch gen-1 docs and attachments in\n    // a single request using _all_docs\n    return src.allDocs({\n      keys: ids,\n      include_docs: true\n    }).then(function (res) {\n      if (state.cancelled) {\n        throw new Error('cancelled');\n      }\n      res.rows.forEach(function (row) {\n        if (row.deleted || !row.doc || !isGenOne$1(row.value.rev) ||\n            hasAttachments(row.doc)) {\n          // if any of these conditions apply, we need to fetch using get()\n          return;\n        }\n\n        // the doc we got back from allDocs() is sufficient\n        resultDocs.push(row.doc);\n        delete diffs[row.id];\n      });\n    });\n  }\n\n  function getRevisionOneDocs() {\n    // filter out the generation 1 docs and get them\n    // leaving the non-generation one docs to be got otherwise\n    var ids = Object.keys(diffs).filter(function (id) {\n      var missing = diffs[id].missing;\n      return missing.length === 1 && isGenOne$1(missing[0]);\n    });\n    if (ids.length > 0) {\n      return fetchRevisionOneDocs(ids);\n    }\n  }\n\n  function returnResult() {\n    return { ok:ok, docs:resultDocs };\n  }\n\n  return PouchPromise.resolve()\n    .then(getRevisionOneDocs)\n    .then(getAllDocs)\n    .then(returnResult);\n}\n\nvar CHECKPOINT_VERSION = 1;\nvar REPLICATOR = \"pouchdb\";\n// This is an arbitrary number to limit the\n// amount of replication history we save in the checkpoint.\n// If we save too much, the checkpoing docs will become very big,\n// if we save fewer, we'll run a greater risk of having to\n// read all the changes from 0 when checkpoint PUTs fail\n// CouchDB 2.0 has a more involved history pruning,\n// but let's go for the simple version for now.\nvar CHECKPOINT_HISTORY_SIZE = 5;\nvar LOWEST_SEQ = 0;\n\nfunction updateCheckpoint(db, id, checkpoint, session, returnValue) {\n  return db.get(id).catch(function (err) {\n    if (err.status === 404) {\n      if (db.type() === 'http') {\n        explainError(\n          404, 'PouchDB is just checking if a remote checkpoint exists.'\n        );\n      }\n      return {\n        session_id: session,\n        _id: id,\n        history: [],\n        replicator: REPLICATOR,\n        version: CHECKPOINT_VERSION\n      };\n    }\n    throw err;\n  }).then(function (doc) {\n    if (returnValue.cancelled) {\n      return;\n    }\n\n    // if the checkpoint has not changed, do not update\n    if (doc.last_seq === checkpoint) {\n      return;\n    }\n\n    // Filter out current entry for this replication\n    doc.history = (doc.history || []).filter(function (item) {\n      return item.session_id !== session;\n    });\n\n    // Add the latest checkpoint to history\n    doc.history.unshift({\n      last_seq: checkpoint,\n      session_id: session\n    });\n\n    // Just take the last pieces in history, to\n    // avoid really big checkpoint docs.\n    // see comment on history size above\n    doc.history = doc.history.slice(0, CHECKPOINT_HISTORY_SIZE);\n\n    doc.version = CHECKPOINT_VERSION;\n    doc.replicator = REPLICATOR;\n\n    doc.session_id = session;\n    doc.last_seq = checkpoint;\n\n    return db.put(doc).catch(function (err) {\n      if (err.status === 409) {\n        // retry; someone is trying to write a checkpoint simultaneously\n        return updateCheckpoint(db, id, checkpoint, session, returnValue);\n      }\n      throw err;\n    });\n  });\n}\n\nfunction Checkpointer(src, target, id, returnValue) {\n  this.src = src;\n  this.target = target;\n  this.id = id;\n  this.returnValue = returnValue;\n}\n\nCheckpointer.prototype.writeCheckpoint = function (checkpoint, session) {\n  var self = this;\n  return this.updateTarget(checkpoint, session).then(function () {\n    return self.updateSource(checkpoint, session);\n  });\n};\n\nCheckpointer.prototype.updateTarget = function (checkpoint, session) {\n  return updateCheckpoint(this.target, this.id, checkpoint,\n    session, this.returnValue);\n};\n\nCheckpointer.prototype.updateSource = function (checkpoint, session) {\n  var self = this;\n  if (this.readOnlySource) {\n    return PouchPromise.resolve(true);\n  }\n  return updateCheckpoint(this.src, this.id, checkpoint,\n    session, this.returnValue)\n    .catch(function (err) {\n      if (isForbiddenError(err)) {\n        self.readOnlySource = true;\n        return true;\n      }\n      throw err;\n    });\n};\n\nvar comparisons = {\n  \"undefined\": function (targetDoc, sourceDoc) {\n    // This is the previous comparison function\n    if (collate(targetDoc.last_seq, sourceDoc.last_seq) === 0) {\n      return sourceDoc.last_seq;\n    }\n    /* istanbul ignore next */\n    return 0;\n  },\n  \"1\": function (targetDoc, sourceDoc) {\n    // This is the comparison function ported from CouchDB\n    return compareReplicationLogs(sourceDoc, targetDoc).last_seq;\n  }\n};\n\nCheckpointer.prototype.getCheckpoint = function () {\n  var self = this;\n  return self.target.get(self.id).then(function (targetDoc) {\n    if (self.readOnlySource) {\n      return PouchPromise.resolve(targetDoc.last_seq);\n    }\n\n    return self.src.get(self.id).then(function (sourceDoc) {\n      // Since we can't migrate an old version doc to a new one\n      // (no session id), we just go with the lowest seq in this case\n      /* istanbul ignore if */\n      if (targetDoc.version !== sourceDoc.version) {\n        return LOWEST_SEQ;\n      }\n\n      var version;\n      if (targetDoc.version) {\n        version = targetDoc.version.toString();\n      } else {\n        version = \"undefined\";\n      }\n\n      if (version in comparisons) {\n        return comparisons[version](targetDoc, sourceDoc);\n      }\n      /* istanbul ignore next */\n      return LOWEST_SEQ;\n    }, function (err) {\n      if (err.status === 404 && targetDoc.last_seq) {\n        return self.src.put({\n          _id: self.id,\n          last_seq: LOWEST_SEQ\n        }).then(function () {\n          return LOWEST_SEQ;\n        }, function (err) {\n          if (isForbiddenError(err)) {\n            self.readOnlySource = true;\n            return targetDoc.last_seq;\n          }\n          /* istanbul ignore next */\n          return LOWEST_SEQ;\n        });\n      }\n      throw err;\n    });\n  }).catch(function (err) {\n    if (err.status !== 404) {\n      throw err;\n    }\n    return LOWEST_SEQ;\n  });\n};\n// This checkpoint comparison is ported from CouchDBs source\n// they come from here:\n// https://github.com/apache/couchdb-couch-replicator/blob/master/src/couch_replicator.erl#L863-L906\n\nfunction compareReplicationLogs(srcDoc, tgtDoc) {\n  if (srcDoc.session_id === tgtDoc.session_id) {\n    return {\n      last_seq: srcDoc.last_seq,\n      history: srcDoc.history\n    };\n  }\n\n  return compareReplicationHistory(srcDoc.history, tgtDoc.history);\n}\n\nfunction compareReplicationHistory(sourceHistory, targetHistory) {\n  // the erlang loop via function arguments is not so easy to repeat in JS\n  // therefore, doing this as recursion\n  var S = sourceHistory[0];\n  var sourceRest = sourceHistory.slice(1);\n  var T = targetHistory[0];\n  var targetRest = targetHistory.slice(1);\n\n  if (!S || targetHistory.length === 0) {\n    return {\n      last_seq: LOWEST_SEQ,\n      history: []\n    };\n  }\n\n  var sourceId = S.session_id;\n  /* istanbul ignore if */\n  if (hasSessionId(sourceId, targetHistory)) {\n    return {\n      last_seq: S.last_seq,\n      history: sourceHistory\n    };\n  }\n\n  var targetId = T.session_id;\n  if (hasSessionId(targetId, sourceRest)) {\n    return {\n      last_seq: T.last_seq,\n      history: targetRest\n    };\n  }\n\n  return compareReplicationHistory(sourceRest, targetRest);\n}\n\nfunction hasSessionId(sessionId, history) {\n  var props = history[0];\n  var rest = history.slice(1);\n\n  if (!sessionId || history.length === 0) {\n    return false;\n  }\n\n  if (sessionId === props.session_id) {\n    return true;\n  }\n\n  return hasSessionId(sessionId, rest);\n}\n\nfunction isForbiddenError(err) {\n  return typeof err.status === 'number' && Math.floor(err.status / 100) === 4;\n}\n\nvar STARTING_BACK_OFF = 0;\n\nfunction backOff(opts, returnValue, error, callback) {\n  if (opts.retry === false) {\n    returnValue.emit('error', error);\n    returnValue.removeAllListeners();\n    return;\n  }\n  if (typeof opts.back_off_function !== 'function') {\n    opts.back_off_function = defaultBackOff;\n  }\n  returnValue.emit('requestError', error);\n  if (returnValue.state === 'active' || returnValue.state === 'pending') {\n    returnValue.emit('paused', error);\n    returnValue.state = 'stopped';\n    var backOffSet = function backoffTimeSet() {\n      opts.current_back_off = STARTING_BACK_OFF;\n    };\n    var removeBackOffSetter = function removeBackOffTimeSet() {\n      returnValue.removeListener('active', backOffSet);\n    };\n    returnValue.once('paused', removeBackOffSetter);\n    returnValue.once('active', backOffSet);\n  }\n\n  opts.current_back_off = opts.current_back_off || STARTING_BACK_OFF;\n  opts.current_back_off = opts.back_off_function(opts.current_back_off);\n  setTimeout(callback, opts.current_back_off);\n}\n\nfunction sortObjectPropertiesByKey(queryParams) {\n  return Object.keys(queryParams).sort(collate).reduce(function (result, key) {\n    result[key] = queryParams[key];\n    return result;\n  }, {});\n}\n\n// Generate a unique id particular to this replication.\n// Not guaranteed to align perfectly with CouchDB's rep ids.\nfunction generateReplicationId(src, target, opts) {\n  var docIds = opts.doc_ids ? opts.doc_ids.sort(collate) : '';\n  var filterFun = opts.filter ? opts.filter.toString() : '';\n  var queryParams = '';\n  var filterViewName =  '';\n\n  if (opts.filter && opts.query_params) {\n    queryParams = JSON.stringify(sortObjectPropertiesByKey(opts.query_params));\n  }\n\n  if (opts.filter && opts.filter === '_view') {\n    filterViewName = opts.view.toString();\n  }\n\n  return PouchPromise.all([src.id(), target.id()]).then(function (res) {\n    var queryData = res[0] + res[1] + filterFun + filterViewName +\n      queryParams + docIds;\n    return new PouchPromise(function (resolve) {\n      binaryMd5(queryData, resolve);\n    });\n  }).then(function (md5sum) {\n    // can't use straight-up md5 alphabet, because\n    // the char '/' is interpreted as being for attachments,\n    // and + is also not url-safe\n    md5sum = md5sum.replace(/\\//g, '.').replace(/\\+/g, '_');\n    return '_local/' + md5sum;\n  });\n}\n\nfunction replicate$1(src, target, opts, returnValue, result) {\n  var batches = [];               // list of batches to be processed\n  var currentBatch;               // the batch currently being processed\n  var pendingBatch = {\n    seq: 0,\n    changes: [],\n    docs: []\n  }; // next batch, not yet ready to be processed\n  var writingCheckpoint = false;  // true while checkpoint is being written\n  var changesCompleted = false;   // true when all changes received\n  var replicationCompleted = false; // true when replication has completed\n  var last_seq = 0;\n  var continuous = opts.continuous || opts.live || false;\n  var batch_size = opts.batch_size || 100;\n  var batches_limit = opts.batches_limit || 10;\n  var changesPending = false;     // true while src.changes is running\n  var doc_ids = opts.doc_ids;\n  var repId;\n  var checkpointer;\n  var changedDocs = [];\n  // Like couchdb, every replication gets a unique session id\n  var session = uuid();\n\n  result = result || {\n    ok: true,\n    start_time: new Date(),\n    docs_read: 0,\n    docs_written: 0,\n    doc_write_failures: 0,\n    errors: []\n  };\n\n  var changesOpts = {};\n  returnValue.ready(src, target);\n\n  function initCheckpointer() {\n    if (checkpointer) {\n      return PouchPromise.resolve();\n    }\n    return generateReplicationId(src, target, opts).then(function (res) {\n      repId = res;\n      checkpointer = new Checkpointer(src, target, repId, returnValue);\n    });\n  }\n\n  function writeDocs() {\n    changedDocs = [];\n\n    if (currentBatch.docs.length === 0) {\n      return;\n    }\n    var docs = currentBatch.docs;\n    var bulkOpts = {timeout: opts.timeout};\n    return target.bulkDocs({docs: docs, new_edits: false}, bulkOpts).then(function (res) {\n      /* istanbul ignore if */\n      if (returnValue.cancelled) {\n        completeReplication();\n        throw new Error('cancelled');\n      }\n\n      // `res` doesn't include full documents (which live in `docs`), so we create a map of \n      // (id -> error), and check for errors while iterating over `docs`\n      var errorsById = Object.create(null);\n      res.forEach(function (res) {\n        if (res.error) {\n          errorsById[res.id] = res;\n        }\n      });\n\n      var errorsNo = Object.keys(errorsById).length;\n      result.doc_write_failures += errorsNo;\n      result.docs_written += docs.length - errorsNo;\n\n      docs.forEach(function (doc) {\n        var error = errorsById[doc._id];\n        if (error) {\n          result.errors.push(error);\n          if (error.name === 'unauthorized' || error.name === 'forbidden') {\n            returnValue.emit('denied', clone(error));\n          } else {\n            throw error;\n          }\n        } else {\n          changedDocs.push(doc);\n        }\n      });\n\n    }, function (err) {\n      result.doc_write_failures += docs.length;\n      throw err;\n    });\n  }\n\n  function finishBatch() {\n    if (currentBatch.error) {\n      throw new Error('There was a problem getting docs.');\n    }\n    result.last_seq = last_seq = currentBatch.seq;\n    var outResult = clone(result);\n    if (changedDocs.length) {\n      outResult.docs = changedDocs;\n      returnValue.emit('change', outResult);\n    }\n    writingCheckpoint = true;\n    return checkpointer.writeCheckpoint(currentBatch.seq,\n        session).then(function () {\n      writingCheckpoint = false;\n      /* istanbul ignore if */\n      if (returnValue.cancelled) {\n        completeReplication();\n        throw new Error('cancelled');\n      }\n      currentBatch = undefined;\n      getChanges();\n    }).catch(function (err) {\n      onCheckpointError(err);\n      throw err;\n    });\n  }\n\n  function getDiffs() {\n    var diff = {};\n    currentBatch.changes.forEach(function (change) {\n      // Couchbase Sync Gateway emits these, but we can ignore them\n      /* istanbul ignore if */\n      if (change.id === \"_user/\") {\n        return;\n      }\n      diff[change.id] = change.changes.map(function (x) {\n        return x.rev;\n      });\n    });\n    return target.revsDiff(diff).then(function (diffs) {\n      /* istanbul ignore if */\n      if (returnValue.cancelled) {\n        completeReplication();\n        throw new Error('cancelled');\n      }\n      // currentBatch.diffs elements are deleted as the documents are written\n      currentBatch.diffs = diffs;\n    });\n  }\n\n  function getBatchDocs() {\n    return getDocs(src, target, currentBatch.diffs, returnValue).then(function (got) {\n      currentBatch.error = !got.ok;\n      got.docs.forEach(function (doc) {\n        delete currentBatch.diffs[doc._id];\n        result.docs_read++;\n        currentBatch.docs.push(doc);\n      });\n    });\n  }\n\n  function startNextBatch() {\n    if (returnValue.cancelled || currentBatch) {\n      return;\n    }\n    if (batches.length === 0) {\n      processPendingBatch(true);\n      return;\n    }\n    currentBatch = batches.shift();\n    getDiffs()\n      .then(getBatchDocs)\n      .then(writeDocs)\n      .then(finishBatch)\n      .then(startNextBatch)\n      .catch(function (err) {\n        abortReplication('batch processing terminated with error', err);\n      });\n  }\n\n\n  function processPendingBatch(immediate) {\n    if (pendingBatch.changes.length === 0) {\n      if (batches.length === 0 && !currentBatch) {\n        if ((continuous && changesOpts.live) || changesCompleted) {\n          returnValue.state = 'pending';\n          returnValue.emit('paused');\n        }\n        if (changesCompleted) {\n          completeReplication();\n        }\n      }\n      return;\n    }\n    if (\n      immediate ||\n      changesCompleted ||\n      pendingBatch.changes.length >= batch_size\n    ) {\n      batches.push(pendingBatch);\n      pendingBatch = {\n        seq: 0,\n        changes: [],\n        docs: []\n      };\n      if (returnValue.state === 'pending' || returnValue.state === 'stopped') {\n        returnValue.state = 'active';\n        returnValue.emit('active');\n      }\n      startNextBatch();\n    }\n  }\n\n\n  function abortReplication(reason, err) {\n    if (replicationCompleted) {\n      return;\n    }\n    if (!err.message) {\n      err.message = reason;\n    }\n    result.ok = false;\n    result.status = 'aborting';\n    batches = [];\n    pendingBatch = {\n      seq: 0,\n      changes: [],\n      docs: []\n    };\n    completeReplication(err);\n  }\n\n\n  function completeReplication(fatalError) {\n    if (replicationCompleted) {\n      return;\n    }\n    /* istanbul ignore if */\n    if (returnValue.cancelled) {\n      result.status = 'cancelled';\n      if (writingCheckpoint) {\n        return;\n      }\n    }\n    result.status = result.status || 'complete';\n    result.end_time = new Date();\n    result.last_seq = last_seq;\n    replicationCompleted = true;\n\n    if (fatalError) {\n      fatalError.result = result;\n\n      if (fatalError.name === 'unauthorized' || fatalError.name === 'forbidden') {\n        returnValue.emit('error', fatalError);\n        returnValue.removeAllListeners();\n      } else {\n        backOff(opts, returnValue, fatalError, function () {\n          replicate$1(src, target, opts, returnValue);\n        });\n      }\n    } else {\n      returnValue.emit('complete', result);\n      returnValue.removeAllListeners();\n    }\n  }\n\n\n  function onChange(change) {\n    /* istanbul ignore if */\n    if (returnValue.cancelled) {\n      return completeReplication();\n    }\n    var filter = filterChange(opts)(change);\n    if (!filter) {\n      return;\n    }\n    pendingBatch.seq = change.seq;\n    pendingBatch.changes.push(change);\n    processPendingBatch(batches.length === 0 && changesOpts.live);\n  }\n\n\n  function onChangesComplete(changes) {\n    changesPending = false;\n    /* istanbul ignore if */\n    if (returnValue.cancelled) {\n      return completeReplication();\n    }\n\n    // if no results were returned then we're done,\n    // else fetch more\n    if (changes.results.length > 0) {\n      changesOpts.since = changes.last_seq;\n      getChanges();\n      processPendingBatch(true);\n    } else {\n\n      var complete = function () {\n        if (continuous) {\n          changesOpts.live = true;\n          getChanges();\n        } else {\n          changesCompleted = true;\n        }\n        processPendingBatch(true);\n      };\n\n      // update the checkpoint so we start from the right seq next time\n      if (!currentBatch && changes.results.length === 0) {\n        writingCheckpoint = true;\n        checkpointer.writeCheckpoint(changes.last_seq,\n            session).then(function () {\n          writingCheckpoint = false;\n          result.last_seq = last_seq = changes.last_seq;\n          complete();\n        })\n        .catch(onCheckpointError);\n      } else {\n        complete();\n      }\n    }\n  }\n\n\n  function onChangesError(err) {\n    changesPending = false;\n    /* istanbul ignore if */\n    if (returnValue.cancelled) {\n      return completeReplication();\n    }\n    abortReplication('changes rejected', err);\n  }\n\n\n  function getChanges() {\n    if (!(\n      !changesPending &&\n      !changesCompleted &&\n      batches.length < batches_limit\n      )) {\n      return;\n    }\n    changesPending = true;\n    function abortChanges() {\n      changes.cancel();\n    }\n    function removeListener() {\n      returnValue.removeListener('cancel', abortChanges);\n    }\n\n    if (returnValue._changes) { // remove old changes() and listeners\n      returnValue.removeListener('cancel', returnValue._abortChanges);\n      returnValue._changes.cancel();\n    }\n    returnValue.once('cancel', abortChanges);\n\n    var changes = src.changes(changesOpts)\n      .on('change', onChange);\n    changes.then(removeListener, removeListener);\n    changes.then(onChangesComplete)\n      .catch(onChangesError);\n\n    if (opts.retry) {\n      // save for later so we can cancel if necessary\n      returnValue._changes = changes;\n      returnValue._abortChanges = abortChanges;\n    }\n  }\n\n\n  function startChanges() {\n    initCheckpointer().then(function () {\n      /* istanbul ignore if */\n      if (returnValue.cancelled) {\n        completeReplication();\n        return;\n      }\n      return checkpointer.getCheckpoint().then(function (checkpoint) {\n        last_seq = checkpoint;\n        changesOpts = {\n          since: last_seq,\n          limit: batch_size,\n          batch_size: batch_size,\n          style: 'all_docs',\n          doc_ids: doc_ids,\n          return_docs: true // required so we know when we're done\n        };\n        if (opts.filter) {\n          if (typeof opts.filter !== 'string') {\n            // required for the client-side filter in onChange\n            changesOpts.include_docs = true;\n          } else { // ddoc filter\n            changesOpts.filter = opts.filter;\n          }\n        }\n        if ('heartbeat' in opts) {\n          changesOpts.heartbeat = opts.heartbeat;\n        }\n        if ('timeout' in opts) {\n          changesOpts.timeout = opts.timeout;\n        }\n        if (opts.query_params) {\n          changesOpts.query_params = opts.query_params;\n        }\n        if (opts.view) {\n          changesOpts.view = opts.view;\n        }\n        getChanges();\n      });\n    }).catch(function (err) {\n      abortReplication('getCheckpoint rejected with ', err);\n    });\n  }\n\n  /* istanbul ignore next */\n  function onCheckpointError(err) {\n    writingCheckpoint = false;\n    abortReplication('writeCheckpoint completed with error', err);\n  }\n\n  /* istanbul ignore if */\n  if (returnValue.cancelled) { // cancelled immediately\n    completeReplication();\n    return;\n  }\n\n  if (!returnValue._addedListeners) {\n    returnValue.once('cancel', completeReplication);\n\n    if (typeof opts.complete === 'function') {\n      returnValue.once('error', opts.complete);\n      returnValue.once('complete', function (result) {\n        opts.complete(null, result);\n      });\n    }\n    returnValue._addedListeners = true;\n  }\n\n  if (typeof opts.since === 'undefined') {\n    startChanges();\n  } else {\n    initCheckpointer().then(function () {\n      writingCheckpoint = true;\n      return checkpointer.writeCheckpoint(opts.since, session);\n    }).then(function () {\n      writingCheckpoint = false;\n      /* istanbul ignore if */\n      if (returnValue.cancelled) {\n        completeReplication();\n        return;\n      }\n      last_seq = opts.since;\n      startChanges();\n    }).catch(onCheckpointError);\n  }\n}\n\n// We create a basic promise so the caller can cancel the replication possibly\n// before we have actually started listening to changes etc\ninherits(Replication, events.EventEmitter);\nfunction Replication() {\n  events.EventEmitter.call(this);\n  this.cancelled = false;\n  this.state = 'pending';\n  var self = this;\n  var promise = new PouchPromise(function (fulfill, reject) {\n    self.once('complete', fulfill);\n    self.once('error', reject);\n  });\n  self.then = function (resolve, reject) {\n    return promise.then(resolve, reject);\n  };\n  self.catch = function (reject) {\n    return promise.catch(reject);\n  };\n  // As we allow error handling via \"error\" event as well,\n  // put a stub in here so that rejecting never throws UnhandledError.\n  self.catch(function () {});\n}\n\nReplication.prototype.cancel = function () {\n  this.cancelled = true;\n  this.state = 'cancelled';\n  this.emit('cancel');\n};\n\nReplication.prototype.ready = function (src, target) {\n  var self = this;\n  if (self._readyCalled) {\n    return;\n  }\n  self._readyCalled = true;\n\n  function onDestroy() {\n    self.cancel();\n  }\n  src.once('destroyed', onDestroy);\n  target.once('destroyed', onDestroy);\n  function cleanup() {\n    src.removeListener('destroyed', onDestroy);\n    target.removeListener('destroyed', onDestroy);\n  }\n  self.once('complete', cleanup);\n};\n\nfunction toPouch(db, opts) {\n  var PouchConstructor = opts.PouchConstructor;\n  if (typeof db === 'string') {\n    return new PouchConstructor(db, opts);\n  } else {\n    return db;\n  }\n}\n\nfunction replicate(src, target, opts, callback) {\n\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  if (typeof opts === 'undefined') {\n    opts = {};\n  }\n\n  if (opts.doc_ids && !Array.isArray(opts.doc_ids)) {\n    throw createError(BAD_REQUEST,\n                       \"`doc_ids` filter parameter is not a list.\");\n  }\n\n  opts.complete = callback;\n  opts = clone(opts);\n  opts.continuous = opts.continuous || opts.live;\n  opts.retry = ('retry' in opts) ? opts.retry : false;\n  /*jshint validthis:true */\n  opts.PouchConstructor = opts.PouchConstructor || this;\n  var replicateRet = new Replication(opts);\n  var srcPouch = toPouch(src, opts);\n  var targetPouch = toPouch(target, opts);\n  replicate$1(srcPouch, targetPouch, opts, replicateRet);\n  return replicateRet;\n}\n\ninherits(Sync, events.EventEmitter);\nfunction sync(src, target, opts, callback) {\n  if (typeof opts === 'function') {\n    callback = opts;\n    opts = {};\n  }\n  if (typeof opts === 'undefined') {\n    opts = {};\n  }\n  opts = clone(opts);\n  /*jshint validthis:true */\n  opts.PouchConstructor = opts.PouchConstructor || this;\n  src = toPouch(src, opts);\n  target = toPouch(target, opts);\n  return new Sync(src, target, opts, callback);\n}\n\nfunction Sync(src, target, opts, callback) {\n  var self = this;\n  this.canceled = false;\n\n  var optsPush = opts.push ? jsExtend.extend({}, opts, opts.push) : opts;\n  var optsPull = opts.pull ? jsExtend.extend({}, opts, opts.pull) : opts;\n\n  this.push = replicate(src, target, optsPush);\n  this.pull = replicate(target, src, optsPull);\n\n  this.pushPaused = true;\n  this.pullPaused = true;\n\n  function pullChange(change) {\n    self.emit('change', {\n      direction: 'pull',\n      change: change\n    });\n  }\n  function pushChange(change) {\n    self.emit('change', {\n      direction: 'push',\n      change: change\n    });\n  }\n  function pushDenied(doc) {\n    self.emit('denied', {\n      direction: 'push',\n      doc: doc\n    });\n  }\n  function pullDenied(doc) {\n    self.emit('denied', {\n      direction: 'pull',\n      doc: doc\n    });\n  }\n  function pushPaused() {\n    self.pushPaused = true;\n    /* istanbul ignore if */\n    if (self.pullPaused) {\n      self.emit('paused');\n    }\n  }\n  function pullPaused() {\n    self.pullPaused = true;\n    /* istanbul ignore if */\n    if (self.pushPaused) {\n      self.emit('paused');\n    }\n  }\n  function pushActive() {\n    self.pushPaused = false;\n    /* istanbul ignore if */\n    if (self.pullPaused) {\n      self.emit('active', {\n        direction: 'push'\n      });\n    }\n  }\n  function pullActive() {\n    self.pullPaused = false;\n    /* istanbul ignore if */\n    if (self.pushPaused) {\n      self.emit('active', {\n        direction: 'pull'\n      });\n    }\n  }\n\n  var removed = {};\n\n  function removeAll(type) { // type is 'push' or 'pull'\n    return function (event, func) {\n      var isChange = event === 'change' &&\n        (func === pullChange || func === pushChange);\n      var isDenied = event === 'denied' &&\n        (func === pullDenied || func === pushDenied);\n      var isPaused = event === 'paused' &&\n        (func === pullPaused || func === pushPaused);\n      var isActive = event === 'active' &&\n        (func === pullActive || func === pushActive);\n\n      if (isChange || isDenied || isPaused || isActive) {\n        if (!(event in removed)) {\n          removed[event] = {};\n        }\n        removed[event][type] = true;\n        if (Object.keys(removed[event]).length === 2) {\n          // both push and pull have asked to be removed\n          self.removeAllListeners(event);\n        }\n      }\n    };\n  }\n\n  if (opts.live) {\n    this.push.on('complete', self.pull.cancel.bind(self.pull));\n    this.pull.on('complete', self.push.cancel.bind(self.push));\n  }\n\n  this.on('newListener', function (event) {\n    if (event === 'change') {\n      self.pull.on('change', pullChange);\n      self.push.on('change', pushChange);\n    } else if (event === 'denied') {\n      self.pull.on('denied', pullDenied);\n      self.push.on('denied', pushDenied);\n    } else if (event === 'active') {\n      self.pull.on('active', pullActive);\n      self.push.on('active', pushActive);\n    } else if (event === 'paused') {\n      self.pull.on('paused', pullPaused);\n      self.push.on('paused', pushPaused);\n    }\n  });\n\n  this.on('removeListener', function (event) {\n    if (event === 'change') {\n      self.pull.removeListener('change', pullChange);\n      self.push.removeListener('change', pushChange);\n    } else if (event === 'denied') {\n      self.pull.removeListener('denied', pullDenied);\n      self.push.removeListener('denied', pushDenied);\n    } else if (event === 'active') {\n      self.pull.removeListener('active', pullActive);\n      self.push.removeListener('active', pushActive);\n    } else if (event === 'paused') {\n      self.pull.removeListener('paused', pullPaused);\n      self.push.removeListener('paused', pushPaused);\n    }\n  });\n\n  this.pull.on('removeListener', removeAll('pull'));\n  this.push.on('removeListener', removeAll('push'));\n\n  var promise = PouchPromise.all([\n    this.push,\n    this.pull\n  ]).then(function (resp) {\n    var out = {\n      push: resp[0],\n      pull: resp[1]\n    };\n    self.emit('complete', out);\n    if (callback) {\n      callback(null, out);\n    }\n    self.removeAllListeners();\n    return out;\n  }, function (err) {\n    self.cancel();\n    if (callback) {\n      // if there's a callback, then the callback can receive\n      // the error event\n      callback(err);\n    } else {\n      // if there's no callback, then we're safe to emit an error\n      // event, which would otherwise throw an unhandled error\n      // due to 'error' being a special event in EventEmitters\n      self.emit('error', err);\n    }\n    self.removeAllListeners();\n    if (callback) {\n      // no sense throwing if we're already emitting an 'error' event\n      throw err;\n    }\n  });\n\n  this.then = function (success, err) {\n    return promise.then(success, err);\n  };\n\n  this.catch = function (err) {\n    return promise.catch(err);\n  };\n}\n\nSync.prototype.cancel = function () {\n  if (!this.canceled) {\n    this.canceled = true;\n    this.push.cancel();\n    this.pull.cancel();\n  }\n};\n\nfunction replication(PouchDB) {\n  PouchDB.replicate = replicate;\n  PouchDB.sync = sync;\n\n  Object.defineProperty(PouchDB.prototype, 'replicate', {\n    get: function () {\n      var self = this;\n      return {\n        from: function (other, opts, callback) {\n          return self.constructor.replicate(other, self, opts, callback);\n        },\n        to: function (other, opts, callback) {\n          return self.constructor.replicate(self, other, opts, callback);\n        }\n      };\n    }\n  });\n\n  PouchDB.prototype.sync = function (dbName, opts, callback) {\n    return this.constructor.sync(this, dbName, opts, callback);\n  };\n}\n\nPouchDB.plugin(IDBPouch)\n  .plugin(WebSqlPouch)\n  .plugin(HttpPouch$1)\n  .plugin(mapreduce)\n  .plugin(replication);\n\n// Pull from src because pouchdb-node/pouchdb-browser themselves\n// are aggressively optimized and jsnext:main would normally give us this\n// aggressive bundle.\n\nmodule.exports = PouchDB;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/pouchdb/lib/index-browser.js\n ** module id = 1\n ** module chunks = 0\n **/","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/process/browser.js\n ** module id = 2\n ** module chunks = 0\n **/","(function(factory) {\n  if(typeof exports === 'object') {\n    factory(exports);\n  } else {\n    factory(this);\n  }\n}).call(this, function(root) { \n\n  var slice   = Array.prototype.slice,\n      each    = Array.prototype.forEach;\n\n  var extend = function(obj) {\n    if(typeof obj !== 'object') throw obj + ' is not an object' ;\n\n    var sources = slice.call(arguments, 1); \n\n    each.call(sources, function(source) {\n      if(source) {\n        for(var prop in source) {\n          if(typeof source[prop] === 'object' && obj[prop]) {\n            extend.call(obj, obj[prop], source[prop]);\n          } else {\n            obj[prop] = source[prop];\n          }\n        } \n      }\n    });\n\n    return obj;\n  }\n\n  root.extend = extend;\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/js-extend/extend.js\n ** module id = 3\n ** module chunks = 0\n **/","\n/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  return ('WebkitAppearance' in document.documentElement.style) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (window.console && (console.firebug || (console.exception && console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31);\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  return JSON.stringify(v);\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs() {\n  var args = arguments;\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return args;\n\n  var c = 'color: ' + this.color;\n  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n  return args;\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage(){\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/debug/browser.js\n ** module id = 4\n ** module chunks = 0\n **/","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = debug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lowercased letter, i.e. \"n\".\n */\n\nexports.formatters = {};\n\n/**\n * Previously assigned color.\n */\n\nvar prevColor = 0;\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n *\n * @return {Number}\n * @api private\n */\n\nfunction selectColor() {\n  return exports.colors[prevColor++ % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction debug(namespace) {\n\n  // define the `disabled` version\n  function disabled() {\n  }\n  disabled.enabled = false;\n\n  // define the `enabled` version\n  function enabled() {\n\n    var self = enabled;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // add the `color` if not set\n    if (null == self.useColors) self.useColors = exports.useColors();\n    if (null == self.color && self.useColors) self.color = selectColor();\n\n    var args = Array.prototype.slice.call(arguments);\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %o\n      args = ['%o'].concat(args);\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    if ('function' === typeof exports.formatArgs) {\n      args = exports.formatArgs.apply(self, args);\n    }\n    var logFn = enabled.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n  enabled.enabled = true;\n\n  var fn = exports.enabled(namespace) ? enabled : disabled;\n\n  fn.namespace = namespace;\n\n  return fn;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  var split = (namespaces || '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/debug/debug.js\n ** module id = 5\n ** module chunks = 0\n **/","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} options\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options){\n  options = options || {};\n  if ('string' == typeof val) return parse(val);\n  return options.long\n    ? long(val)\n    : short(val);\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = '' + str;\n  if (str.length > 10000) return;\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);\n  if (!match) return;\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction short(ms) {\n  if (ms >= d) return Math.round(ms / d) + 'd';\n  if (ms >= h) return Math.round(ms / h) + 'h';\n  if (ms >= m) return Math.round(ms / m) + 'm';\n  if (ms >= s) return Math.round(ms / s) + 's';\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction long(ms) {\n  return plural(ms, d, 'day')\n    || plural(ms, h, 'hour')\n    || plural(ms, m, 'minute')\n    || plural(ms, s, 'second')\n    || ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) return;\n  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ms/index.js\n ** module id = 6\n ** module chunks = 0\n **/","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/inherits/inherits_browser.js\n ** module id = 7\n ** module chunks = 0\n **/","'use strict';\nvar immediate = require('immediate');\n\n/* istanbul ignore next */\nfunction INTERNAL() {}\n\nvar handlers = {};\n\nvar REJECTED = ['REJECTED'];\nvar FULFILLED = ['FULFILLED'];\nvar PENDING = ['PENDING'];\n\nmodule.exports = Promise;\n\nfunction Promise(resolver) {\n  if (typeof resolver !== 'function') {\n    throw new TypeError('resolver must be a function');\n  }\n  this.state = PENDING;\n  this.queue = [];\n  this.outcome = void 0;\n  if (resolver !== INTERNAL) {\n    safelyResolveThenable(this, resolver);\n  }\n}\n\nPromise.prototype[\"catch\"] = function (onRejected) {\n  return this.then(null, onRejected);\n};\nPromise.prototype.then = function (onFulfilled, onRejected) {\n  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||\n    typeof onRejected !== 'function' && this.state === REJECTED) {\n    return this;\n  }\n  var promise = new this.constructor(INTERNAL);\n  if (this.state !== PENDING) {\n    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\n    unwrap(promise, resolver, this.outcome);\n  } else {\n    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\n  }\n\n  return promise;\n};\nfunction QueueItem(promise, onFulfilled, onRejected) {\n  this.promise = promise;\n  if (typeof onFulfilled === 'function') {\n    this.onFulfilled = onFulfilled;\n    this.callFulfilled = this.otherCallFulfilled;\n  }\n  if (typeof onRejected === 'function') {\n    this.onRejected = onRejected;\n    this.callRejected = this.otherCallRejected;\n  }\n}\nQueueItem.prototype.callFulfilled = function (value) {\n  handlers.resolve(this.promise, value);\n};\nQueueItem.prototype.otherCallFulfilled = function (value) {\n  unwrap(this.promise, this.onFulfilled, value);\n};\nQueueItem.prototype.callRejected = function (value) {\n  handlers.reject(this.promise, value);\n};\nQueueItem.prototype.otherCallRejected = function (value) {\n  unwrap(this.promise, this.onRejected, value);\n};\n\nfunction unwrap(promise, func, value) {\n  immediate(function () {\n    var returnValue;\n    try {\n      returnValue = func(value);\n    } catch (e) {\n      return handlers.reject(promise, e);\n    }\n    if (returnValue === promise) {\n      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));\n    } else {\n      handlers.resolve(promise, returnValue);\n    }\n  });\n}\n\nhandlers.resolve = function (self, value) {\n  var result = tryCatch(getThen, value);\n  if (result.status === 'error') {\n    return handlers.reject(self, result.value);\n  }\n  var thenable = result.value;\n\n  if (thenable) {\n    safelyResolveThenable(self, thenable);\n  } else {\n    self.state = FULFILLED;\n    self.outcome = value;\n    var i = -1;\n    var len = self.queue.length;\n    while (++i < len) {\n      self.queue[i].callFulfilled(value);\n    }\n  }\n  return self;\n};\nhandlers.reject = function (self, error) {\n  self.state = REJECTED;\n  self.outcome = error;\n  var i = -1;\n  var len = self.queue.length;\n  while (++i < len) {\n    self.queue[i].callRejected(error);\n  }\n  return self;\n};\n\nfunction getThen(obj) {\n  // Make sure we only access the accessor once as required by the spec\n  var then = obj && obj.then;\n  if (obj && typeof obj === 'object' && typeof then === 'function') {\n    return function appyThen() {\n      then.apply(obj, arguments);\n    };\n  }\n}\n\nfunction safelyResolveThenable(self, thenable) {\n  // Either fulfill, reject or reject with error\n  var called = false;\n  function onError(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.reject(self, value);\n  }\n\n  function onSuccess(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.resolve(self, value);\n  }\n\n  function tryToUnwrap() {\n    thenable(onSuccess, onError);\n  }\n\n  var result = tryCatch(tryToUnwrap);\n  if (result.status === 'error') {\n    onError(result.value);\n  }\n}\n\nfunction tryCatch(func, value) {\n  var out = {};\n  try {\n    out.value = func(value);\n    out.status = 'success';\n  } catch (e) {\n    out.status = 'error';\n    out.value = e;\n  }\n  return out;\n}\n\nPromise.resolve = resolve;\nfunction resolve(value) {\n  if (value instanceof this) {\n    return value;\n  }\n  return handlers.resolve(new this(INTERNAL), value);\n}\n\nPromise.reject = reject;\nfunction reject(reason) {\n  var promise = new this(INTERNAL);\n  return handlers.reject(promise, reason);\n}\n\nPromise.all = all;\nfunction all(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var values = new Array(len);\n  var resolved = 0;\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    allResolver(iterable[i], i);\n  }\n  return promise;\n  function allResolver(value, i) {\n    self.resolve(value).then(resolveFromAll, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n    function resolveFromAll(outValue) {\n      values[i] = outValue;\n      if (++resolved === len && !called) {\n        called = true;\n        handlers.resolve(promise, values);\n      }\n    }\n  }\n}\n\nPromise.race = race;\nfunction race(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    resolver(iterable[i]);\n  }\n  return promise;\n  function resolver(value) {\n    self.resolve(value).then(function (response) {\n      if (!called) {\n        called = true;\n        handlers.resolve(promise, response);\n      }\n    }, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n  }\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lie/lib/browser.js\n ** module id = 8\n ** module chunks = 0\n **/","'use strict';\nvar Mutation = global.MutationObserver || global.WebKitMutationObserver;\n\nvar scheduleDrain;\n\n{\n  if (Mutation) {\n    var called = 0;\n    var observer = new Mutation(nextTick);\n    var element = global.document.createTextNode('');\n    observer.observe(element, {\n      characterData: true\n    });\n    scheduleDrain = function () {\n      element.data = (called = ++called % 2);\n    };\n  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\n    var channel = new global.MessageChannel();\n    channel.port1.onmessage = nextTick;\n    scheduleDrain = function () {\n      channel.port2.postMessage(0);\n    };\n  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\n    scheduleDrain = function () {\n\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      var scriptEl = global.document.createElement('script');\n      scriptEl.onreadystatechange = function () {\n        nextTick();\n\n        scriptEl.onreadystatechange = null;\n        scriptEl.parentNode.removeChild(scriptEl);\n        scriptEl = null;\n      };\n      global.document.documentElement.appendChild(scriptEl);\n    };\n  } else {\n    scheduleDrain = function () {\n      setTimeout(nextTick, 0);\n    };\n  }\n}\n\nvar draining;\nvar queue = [];\n//named nextTick for less confusing stack traces\nfunction nextTick() {\n  draining = true;\n  var i, oldQueue;\n  var len = queue.length;\n  while (len) {\n    oldQueue = queue;\n    queue = [];\n    i = -1;\n    while (++i < len) {\n      oldQueue[i]();\n    }\n    len = queue.length;\n  }\n  draining = false;\n}\n\nmodule.exports = immediate;\nfunction immediate(task) {\n  if (queue.push(task) === 1 && !draining) {\n    scheduleDrain();\n  }\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/immediate/lib/browser.js\n ** module id = 9\n ** module chunks = 0\n **/","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/events/events.js\n ** module id = 10\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = argsArray;\n\nfunction argsArray(fun) {\n  return function () {\n    var len = arguments.length;\n    if (len) {\n      var args = [];\n      var i = -1;\n      while (++i < len) {\n        args[i] = arguments[i];\n      }\n      return fun.call(this, args);\n    } else {\n      return fun.call(this, []);\n    }\n  };\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/argsarray/index.js\n ** module id = 11\n ** module chunks = 0\n **/","// Generated by CoffeeScript 1.9.2\n(function() {\n  var hasProp = {}.hasOwnProperty,\n    slice = [].slice;\n\n  module.exports = function(source, scope) {\n    var key, keys, value, values;\n    keys = [];\n    values = [];\n    for (key in scope) {\n      if (!hasProp.call(scope, key)) continue;\n      value = scope[key];\n      if (key === 'this') {\n        continue;\n      }\n      keys.push(key);\n      values.push(value);\n    }\n    return Function.apply(null, slice.call(keys).concat([source])).apply(scope[\"this\"], values);\n  };\n\n}).call(this);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/scope-eval/scope_eval.js\n ** module id = 12\n ** module chunks = 0\n **/","(function (factory) {\n    if (typeof exports === 'object') {\n        // Node/CommonJS\n        module.exports = factory();\n    } else if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(factory);\n    } else {\n        // Browser globals (with support for web workers)\n        var glob;\n\n        try {\n            glob = window;\n        } catch (e) {\n            glob = self;\n        }\n\n        glob.SparkMD5 = factory();\n    }\n}(function (undefined) {\n\n    'use strict';\n\n    /*\n     * Fastest md5 implementation around (JKM md5).\n     * Credits: Joseph Myers\n     *\n     * @see http://www.myersdaily.org/joseph/javascript/md5-text.html\n     * @see http://jsperf.com/md5-shootout/7\n     */\n\n    /* this function is much faster,\n      so if possible we use it. Some IEs\n      are the only ones I know of that\n      need the idiotic second function,\n      generated by an if clause.  */\n    var add32 = function (a, b) {\n        return (a + b) & 0xFFFFFFFF;\n    },\n        hex_chr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];\n\n\n    function cmn(q, a, b, x, s, t) {\n        a = add32(add32(a, q), add32(x, t));\n        return add32((a << s) | (a >>> (32 - s)), b);\n    }\n\n    function ff(a, b, c, d, x, s, t) {\n        return cmn((b & c) | ((~b) & d), a, b, x, s, t);\n    }\n\n    function gg(a, b, c, d, x, s, t) {\n        return cmn((b & d) | (c & (~d)), a, b, x, s, t);\n    }\n\n    function hh(a, b, c, d, x, s, t) {\n        return cmn(b ^ c ^ d, a, b, x, s, t);\n    }\n\n    function ii(a, b, c, d, x, s, t) {\n        return cmn(c ^ (b | (~d)), a, b, x, s, t);\n    }\n\n    function md5cycle(x, k) {\n        var a = x[0],\n            b = x[1],\n            c = x[2],\n            d = x[3];\n\n        a = ff(a, b, c, d, k[0], 7, -680876936);\n        d = ff(d, a, b, c, k[1], 12, -389564586);\n        c = ff(c, d, a, b, k[2], 17, 606105819);\n        b = ff(b, c, d, a, k[3], 22, -1044525330);\n        a = ff(a, b, c, d, k[4], 7, -176418897);\n        d = ff(d, a, b, c, k[5], 12, 1200080426);\n        c = ff(c, d, a, b, k[6], 17, -1473231341);\n        b = ff(b, c, d, a, k[7], 22, -45705983);\n        a = ff(a, b, c, d, k[8], 7, 1770035416);\n        d = ff(d, a, b, c, k[9], 12, -1958414417);\n        c = ff(c, d, a, b, k[10], 17, -42063);\n        b = ff(b, c, d, a, k[11], 22, -1990404162);\n        a = ff(a, b, c, d, k[12], 7, 1804603682);\n        d = ff(d, a, b, c, k[13], 12, -40341101);\n        c = ff(c, d, a, b, k[14], 17, -1502002290);\n        b = ff(b, c, d, a, k[15], 22, 1236535329);\n\n        a = gg(a, b, c, d, k[1], 5, -165796510);\n        d = gg(d, a, b, c, k[6], 9, -1069501632);\n        c = gg(c, d, a, b, k[11], 14, 643717713);\n        b = gg(b, c, d, a, k[0], 20, -373897302);\n        a = gg(a, b, c, d, k[5], 5, -701558691);\n        d = gg(d, a, b, c, k[10], 9, 38016083);\n        c = gg(c, d, a, b, k[15], 14, -660478335);\n        b = gg(b, c, d, a, k[4], 20, -405537848);\n        a = gg(a, b, c, d, k[9], 5, 568446438);\n        d = gg(d, a, b, c, k[14], 9, -1019803690);\n        c = gg(c, d, a, b, k[3], 14, -187363961);\n        b = gg(b, c, d, a, k[8], 20, 1163531501);\n        a = gg(a, b, c, d, k[13], 5, -1444681467);\n        d = gg(d, a, b, c, k[2], 9, -51403784);\n        c = gg(c, d, a, b, k[7], 14, 1735328473);\n        b = gg(b, c, d, a, k[12], 20, -1926607734);\n\n        a = hh(a, b, c, d, k[5], 4, -378558);\n        d = hh(d, a, b, c, k[8], 11, -2022574463);\n        c = hh(c, d, a, b, k[11], 16, 1839030562);\n        b = hh(b, c, d, a, k[14], 23, -35309556);\n        a = hh(a, b, c, d, k[1], 4, -1530992060);\n        d = hh(d, a, b, c, k[4], 11, 1272893353);\n        c = hh(c, d, a, b, k[7], 16, -155497632);\n        b = hh(b, c, d, a, k[10], 23, -1094730640);\n        a = hh(a, b, c, d, k[13], 4, 681279174);\n        d = hh(d, a, b, c, k[0], 11, -358537222);\n        c = hh(c, d, a, b, k[3], 16, -722521979);\n        b = hh(b, c, d, a, k[6], 23, 76029189);\n        a = hh(a, b, c, d, k[9], 4, -640364487);\n        d = hh(d, a, b, c, k[12], 11, -421815835);\n        c = hh(c, d, a, b, k[15], 16, 530742520);\n        b = hh(b, c, d, a, k[2], 23, -995338651);\n\n        a = ii(a, b, c, d, k[0], 6, -198630844);\n        d = ii(d, a, b, c, k[7], 10, 1126891415);\n        c = ii(c, d, a, b, k[14], 15, -1416354905);\n        b = ii(b, c, d, a, k[5], 21, -57434055);\n        a = ii(a, b, c, d, k[12], 6, 1700485571);\n        d = ii(d, a, b, c, k[3], 10, -1894986606);\n        c = ii(c, d, a, b, k[10], 15, -1051523);\n        b = ii(b, c, d, a, k[1], 21, -2054922799);\n        a = ii(a, b, c, d, k[8], 6, 1873313359);\n        d = ii(d, a, b, c, k[15], 10, -30611744);\n        c = ii(c, d, a, b, k[6], 15, -1560198380);\n        b = ii(b, c, d, a, k[13], 21, 1309151649);\n        a = ii(a, b, c, d, k[4], 6, -145523070);\n        d = ii(d, a, b, c, k[11], 10, -1120210379);\n        c = ii(c, d, a, b, k[2], 15, 718787259);\n        b = ii(b, c, d, a, k[9], 21, -343485551);\n\n        x[0] = add32(a, x[0]);\n        x[1] = add32(b, x[1]);\n        x[2] = add32(c, x[2]);\n        x[3] = add32(d, x[3]);\n    }\n\n    function md5blk(s) {\n        var md5blks = [],\n            i; /* Andy King said do it this way. */\n\n        for (i = 0; i < 64; i += 4) {\n            md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);\n        }\n        return md5blks;\n    }\n\n    function md5blk_array(a) {\n        var md5blks = [],\n            i; /* Andy King said do it this way. */\n\n        for (i = 0; i < 64; i += 4) {\n            md5blks[i >> 2] = a[i] + (a[i + 1] << 8) + (a[i + 2] << 16) + (a[i + 3] << 24);\n        }\n        return md5blks;\n    }\n\n    function md51(s) {\n        var n = s.length,\n            state = [1732584193, -271733879, -1732584194, 271733878],\n            i,\n            length,\n            tail,\n            tmp,\n            lo,\n            hi;\n\n        for (i = 64; i <= n; i += 64) {\n            md5cycle(state, md5blk(s.substring(i - 64, i)));\n        }\n        s = s.substring(i - 64);\n        length = s.length;\n        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        for (i = 0; i < length; i += 1) {\n            tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);\n        }\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\n        if (i > 55) {\n            md5cycle(state, tail);\n            for (i = 0; i < 16; i += 1) {\n                tail[i] = 0;\n            }\n        }\n\n        // Beware that the final length might not fit in 32 bits so we take care of that\n        tmp = n * 8;\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\n        lo = parseInt(tmp[2], 16);\n        hi = parseInt(tmp[1], 16) || 0;\n\n        tail[14] = lo;\n        tail[15] = hi;\n\n        md5cycle(state, tail);\n        return state;\n    }\n\n    function md51_array(a) {\n        var n = a.length,\n            state = [1732584193, -271733879, -1732584194, 271733878],\n            i,\n            length,\n            tail,\n            tmp,\n            lo,\n            hi;\n\n        for (i = 64; i <= n; i += 64) {\n            md5cycle(state, md5blk_array(a.subarray(i - 64, i)));\n        }\n\n        // Not sure if it is a bug, however IE10 will always produce a sub array of length 1\n        // containing the last element of the parent array if the sub array specified starts\n        // beyond the length of the parent array - weird.\n        // https://connect.microsoft.com/IE/feedback/details/771452/typed-array-subarray-issue\n        a = (i - 64) < n ? a.subarray(i - 64) : new Uint8Array(0);\n\n        length = a.length;\n        tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n        for (i = 0; i < length; i += 1) {\n            tail[i >> 2] |= a[i] << ((i % 4) << 3);\n        }\n\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\n        if (i > 55) {\n            md5cycle(state, tail);\n            for (i = 0; i < 16; i += 1) {\n                tail[i] = 0;\n            }\n        }\n\n        // Beware that the final length might not fit in 32 bits so we take care of that\n        tmp = n * 8;\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\n        lo = parseInt(tmp[2], 16);\n        hi = parseInt(tmp[1], 16) || 0;\n\n        tail[14] = lo;\n        tail[15] = hi;\n\n        md5cycle(state, tail);\n\n        return state;\n    }\n\n    function rhex(n) {\n        var s = '',\n            j;\n        for (j = 0; j < 4; j += 1) {\n            s += hex_chr[(n >> (j * 8 + 4)) & 0x0F] + hex_chr[(n >> (j * 8)) & 0x0F];\n        }\n        return s;\n    }\n\n    function hex(x) {\n        var i;\n        for (i = 0; i < x.length; i += 1) {\n            x[i] = rhex(x[i]);\n        }\n        return x.join('');\n    }\n\n    // In some cases the fast add32 function cannot be used..\n    if (hex(md51('hello')) !== '5d41402abc4b2a76b9719d911017c592') {\n        add32 = function (x, y) {\n            var lsw = (x & 0xFFFF) + (y & 0xFFFF),\n                msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n            return (msw << 16) | (lsw & 0xFFFF);\n        };\n    }\n\n    // ---------------------------------------------------\n\n    /**\n     * ArrayBuffer slice polyfill.\n     *\n     * @see https://github.com/ttaubert/node-arraybuffer-slice\n     */\n\n    if (typeof ArrayBuffer !== 'undefined' && !ArrayBuffer.prototype.slice) {\n        (function () {\n            function clamp(val, length) {\n                val = (val | 0) || 0;\n\n                if (val < 0) {\n                    return Math.max(val + length, 0);\n                }\n\n                return Math.min(val, length);\n            }\n\n            ArrayBuffer.prototype.slice = function (from, to) {\n                var length = this.byteLength,\n                    begin = clamp(from, length),\n                    end = length,\n                    num,\n                    target,\n                    targetArray,\n                    sourceArray;\n\n                if (to !== undefined) {\n                    end = clamp(to, length);\n                }\n\n                if (begin > end) {\n                    return new ArrayBuffer(0);\n                }\n\n                num = end - begin;\n                target = new ArrayBuffer(num);\n                targetArray = new Uint8Array(target);\n\n                sourceArray = new Uint8Array(this, begin, num);\n                targetArray.set(sourceArray);\n\n                return target;\n            };\n        })();\n    }\n\n    // ---------------------------------------------------\n\n    /**\n     * Helpers.\n     */\n\n    function toUtf8(str) {\n        if (/[\\u0080-\\uFFFF]/.test(str)) {\n            str = unescape(encodeURIComponent(str));\n        }\n\n        return str;\n    }\n\n    function utf8Str2ArrayBuffer(str, returnUInt8Array) {\n        var length = str.length,\n           buff = new ArrayBuffer(length),\n           arr = new Uint8Array(buff),\n           i;\n\n        for (i = 0; i < length; i += 1) {\n            arr[i] = str.charCodeAt(i);\n        }\n\n        return returnUInt8Array ? arr : buff;\n    }\n\n    function arrayBuffer2Utf8Str(buff) {\n        return String.fromCharCode.apply(null, new Uint8Array(buff));\n    }\n\n    function concatenateArrayBuffers(first, second, returnUInt8Array) {\n        var result = new Uint8Array(first.byteLength + second.byteLength);\n\n        result.set(new Uint8Array(first));\n        result.set(new Uint8Array(second), first.byteLength);\n\n        return returnUInt8Array ? result : result.buffer;\n    }\n\n    function hexToBinaryString(hex) {\n        var bytes = [],\n            length = hex.length,\n            x;\n\n        for (x = 0; x < length - 1; x += 2) {\n            bytes.push(parseInt(hex.substr(x, 2), 16));\n        }\n\n        return String.fromCharCode.apply(String, bytes);\n    }\n\n    // ---------------------------------------------------\n\n    /**\n     * SparkMD5 OOP implementation.\n     *\n     * Use this class to perform an incremental md5, otherwise use the\n     * static methods instead.\n     */\n\n    function SparkMD5() {\n        // call reset to init the instance\n        this.reset();\n    }\n\n    /**\n     * Appends a string.\n     * A conversion will be applied if an utf8 string is detected.\n     *\n     * @param {String} str The string to be appended\n     *\n     * @return {SparkMD5} The instance itself\n     */\n    SparkMD5.prototype.append = function (str) {\n        // Converts the string to utf8 bytes if necessary\n        // Then append as binary\n        this.appendBinary(toUtf8(str));\n\n        return this;\n    };\n\n    /**\n     * Appends a binary string.\n     *\n     * @param {String} contents The binary string to be appended\n     *\n     * @return {SparkMD5} The instance itself\n     */\n    SparkMD5.prototype.appendBinary = function (contents) {\n        this._buff += contents;\n        this._length += contents.length;\n\n        var length = this._buff.length,\n            i;\n\n        for (i = 64; i <= length; i += 64) {\n            md5cycle(this._hash, md5blk(this._buff.substring(i - 64, i)));\n        }\n\n        this._buff = this._buff.substring(i - 64);\n\n        return this;\n    };\n\n    /**\n     * Finishes the incremental computation, reseting the internal state and\n     * returning the result.\n     *\n     * @param {Boolean} raw True to get the raw string, false to get the hex string\n     *\n     * @return {String} The result\n     */\n    SparkMD5.prototype.end = function (raw) {\n        var buff = this._buff,\n            length = buff.length,\n            i,\n            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            ret;\n\n        for (i = 0; i < length; i += 1) {\n            tail[i >> 2] |= buff.charCodeAt(i) << ((i % 4) << 3);\n        }\n\n        this._finish(tail, length);\n        ret = hex(this._hash);\n\n        if (raw) {\n            ret = hexToBinaryString(ret);\n        }\n\n        this.reset();\n\n        return ret;\n    };\n\n    /**\n     * Resets the internal state of the computation.\n     *\n     * @return {SparkMD5} The instance itself\n     */\n    SparkMD5.prototype.reset = function () {\n        this._buff = '';\n        this._length = 0;\n        this._hash = [1732584193, -271733879, -1732584194, 271733878];\n\n        return this;\n    };\n\n    /**\n     * Gets the internal state of the computation.\n     *\n     * @return {Object} The state\n     */\n    SparkMD5.prototype.getState = function () {\n        return {\n            buff: this._buff,\n            length: this._length,\n            hash: this._hash\n        };\n    };\n\n    /**\n     * Gets the internal state of the computation.\n     *\n     * @param {Object} state The state\n     *\n     * @return {SparkMD5} The instance itself\n     */\n    SparkMD5.prototype.setState = function (state) {\n        this._buff = state.buff;\n        this._length = state.length;\n        this._hash = state.hash;\n\n        return this;\n    };\n\n    /**\n     * Releases memory used by the incremental buffer and other additional\n     * resources. If you plan to use the instance again, use reset instead.\n     */\n    SparkMD5.prototype.destroy = function () {\n        delete this._hash;\n        delete this._buff;\n        delete this._length;\n    };\n\n    /**\n     * Finish the final calculation based on the tail.\n     *\n     * @param {Array}  tail   The tail (will be modified)\n     * @param {Number} length The length of the remaining buffer\n     */\n    SparkMD5.prototype._finish = function (tail, length) {\n        var i = length,\n            tmp,\n            lo,\n            hi;\n\n        tail[i >> 2] |= 0x80 << ((i % 4) << 3);\n        if (i > 55) {\n            md5cycle(this._hash, tail);\n            for (i = 0; i < 16; i += 1) {\n                tail[i] = 0;\n            }\n        }\n\n        // Do the final computation based on the tail and length\n        // Beware that the final length may not fit in 32 bits so we take care of that\n        tmp = this._length * 8;\n        tmp = tmp.toString(16).match(/(.*?)(.{0,8})$/);\n        lo = parseInt(tmp[2], 16);\n        hi = parseInt(tmp[1], 16) || 0;\n\n        tail[14] = lo;\n        tail[15] = hi;\n        md5cycle(this._hash, tail);\n    };\n\n    /**\n     * Performs the md5 hash on a string.\n     * A conversion will be applied if utf8 string is detected.\n     *\n     * @param {String}  str The string\n     * @param {Boolean} raw True to get the raw string, false to get the hex string\n     *\n     * @return {String} The result\n     */\n    SparkMD5.hash = function (str, raw) {\n        // Converts the string to utf8 bytes if necessary\n        // Then compute it using the binary function\n        return SparkMD5.hashBinary(toUtf8(str), raw);\n    };\n\n    /**\n     * Performs the md5 hash on a binary string.\n     *\n     * @param {String}  content The binary string\n     * @param {Boolean} raw     True to get the raw string, false to get the hex string\n     *\n     * @return {String} The result\n     */\n    SparkMD5.hashBinary = function (content, raw) {\n        var hash = md51(content),\n            ret = hex(hash);\n\n        return raw ? hexToBinaryString(ret) : ret;\n    };\n\n    // ---------------------------------------------------\n\n    /**\n     * SparkMD5 OOP implementation for array buffers.\n     *\n     * Use this class to perform an incremental md5 ONLY for array buffers.\n     */\n    SparkMD5.ArrayBuffer = function () {\n        // call reset to init the instance\n        this.reset();\n    };\n\n    /**\n     * Appends an array buffer.\n     *\n     * @param {ArrayBuffer} arr The array to be appended\n     *\n     * @return {SparkMD5.ArrayBuffer} The instance itself\n     */\n    SparkMD5.ArrayBuffer.prototype.append = function (arr) {\n        var buff = concatenateArrayBuffers(this._buff.buffer, arr, true),\n            length = buff.length,\n            i;\n\n        this._length += arr.byteLength;\n\n        for (i = 64; i <= length; i += 64) {\n            md5cycle(this._hash, md5blk_array(buff.subarray(i - 64, i)));\n        }\n\n        this._buff = (i - 64) < length ? new Uint8Array(buff.buffer.slice(i - 64)) : new Uint8Array(0);\n\n        return this;\n    };\n\n    /**\n     * Finishes the incremental computation, reseting the internal state and\n     * returning the result.\n     *\n     * @param {Boolean} raw True to get the raw string, false to get the hex string\n     *\n     * @return {String} The result\n     */\n    SparkMD5.ArrayBuffer.prototype.end = function (raw) {\n        var buff = this._buff,\n            length = buff.length,\n            tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n            i,\n            ret;\n\n        for (i = 0; i < length; i += 1) {\n            tail[i >> 2] |= buff[i] << ((i % 4) << 3);\n        }\n\n        this._finish(tail, length);\n        ret = hex(this._hash);\n\n        if (raw) {\n            ret = hexToBinaryString(ret);\n        }\n\n        this.reset();\n\n        return ret;\n    };\n\n    /**\n     * Resets the internal state of the computation.\n     *\n     * @return {SparkMD5.ArrayBuffer} The instance itself\n     */\n    SparkMD5.ArrayBuffer.prototype.reset = function () {\n        this._buff = new Uint8Array(0);\n        this._length = 0;\n        this._hash = [1732584193, -271733879, -1732584194, 271733878];\n\n        return this;\n    };\n\n    /**\n     * Gets the internal state of the computation.\n     *\n     * @return {Object} The state\n     */\n    SparkMD5.ArrayBuffer.prototype.getState = function () {\n        var state = SparkMD5.prototype.getState.call(this);\n\n        // Convert buffer to a string\n        state.buff = arrayBuffer2Utf8Str(state.buff);\n\n        return state;\n    };\n\n    /**\n     * Gets the internal state of the computation.\n     *\n     * @param {Object} state The state\n     *\n     * @return {SparkMD5.ArrayBuffer} The instance itself\n     */\n    SparkMD5.ArrayBuffer.prototype.setState = function (state) {\n        // Convert string to buffer\n        state.buff = utf8Str2ArrayBuffer(state.buff, true);\n\n        return SparkMD5.prototype.setState.call(this, state);\n    };\n\n    SparkMD5.ArrayBuffer.prototype.destroy = SparkMD5.prototype.destroy;\n\n    SparkMD5.ArrayBuffer.prototype._finish = SparkMD5.prototype._finish;\n\n    /**\n     * Performs the md5 hash on an array buffer.\n     *\n     * @param {ArrayBuffer} arr The array buffer\n     * @param {Boolean}     raw True to get the raw string, false to get the hex one\n     *\n     * @return {String} The result\n     */\n    SparkMD5.ArrayBuffer.hash = function (arr, raw) {\n        var hash = md51_array(new Uint8Array(arr)),\n            ret = hex(hash);\n\n        return raw ? hexToBinaryString(ret) : ret;\n    };\n\n    return SparkMD5;\n}));\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/spark-md5/spark-md5.js\n ** module id = 13\n ** module chunks = 0\n **/","'use strict';\n\n/**\n * Stringify/parse functions that don't operate\n * recursively, so they avoid call stack exceeded\n * errors.\n */\nexports.stringify = function stringify(input) {\n  var queue = [];\n  queue.push({obj: input});\n\n  var res = '';\n  var next, obj, prefix, val, i, arrayPrefix, keys, k, key, value, objPrefix;\n  while ((next = queue.pop())) {\n    obj = next.obj;\n    prefix = next.prefix || '';\n    val = next.val || '';\n    res += prefix;\n    if (val) {\n      res += val;\n    } else if (typeof obj !== 'object') {\n      res += typeof obj === 'undefined' ? null : JSON.stringify(obj);\n    } else if (obj === null) {\n      res += 'null';\n    } else if (Array.isArray(obj)) {\n      queue.push({val: ']'});\n      for (i = obj.length - 1; i >= 0; i--) {\n        arrayPrefix = i === 0 ? '' : ',';\n        queue.push({obj: obj[i], prefix: arrayPrefix});\n      }\n      queue.push({val: '['});\n    } else { // object\n      keys = [];\n      for (k in obj) {\n        if (obj.hasOwnProperty(k)) {\n          keys.push(k);\n        }\n      }\n      queue.push({val: '}'});\n      for (i = keys.length - 1; i >= 0; i--) {\n        key = keys[i];\n        value = obj[key];\n        objPrefix = (i > 0 ? ',' : '');\n        objPrefix += JSON.stringify(key) + ':';\n        queue.push({obj: value, prefix: objPrefix});\n      }\n      queue.push({val: '{'});\n    }\n  }\n  return res;\n};\n\n// Convenience function for the parse function.\n// This pop function is basically copied from\n// pouchCollate.parseIndexableString\nfunction pop(obj, stack, metaStack) {\n  var lastMetaElement = metaStack[metaStack.length - 1];\n  if (obj === lastMetaElement.element) {\n    // popping a meta-element, e.g. an object whose value is another object\n    metaStack.pop();\n    lastMetaElement = metaStack[metaStack.length - 1];\n  }\n  var element = lastMetaElement.element;\n  var lastElementIndex = lastMetaElement.index;\n  if (Array.isArray(element)) {\n    element.push(obj);\n  } else if (lastElementIndex === stack.length - 2) { // obj with key+value\n    var key = stack.pop();\n    element[key] = obj;\n  } else {\n    stack.push(obj); // obj with key only\n  }\n}\n\nexports.parse = function (str) {\n  var stack = [];\n  var metaStack = []; // stack for arrays and objects\n  var i = 0;\n  var collationIndex,parsedNum,numChar;\n  var parsedString,lastCh,numConsecutiveSlashes,ch;\n  var arrayElement, objElement;\n  while (true) {\n    collationIndex = str[i++];\n    if (collationIndex === '}' ||\n        collationIndex === ']' ||\n        typeof collationIndex === 'undefined') {\n      if (stack.length === 1) {\n        return stack.pop();\n      } else {\n        pop(stack.pop(), stack, metaStack);\n        continue;\n      }\n    }\n    switch (collationIndex) {\n      case ' ':\n      case '\\t':\n      case '\\n':\n      case ':':\n      case ',':\n        break;\n      case 'n':\n        i += 3; // 'ull'\n        pop(null, stack, metaStack);\n        break;\n      case 't':\n        i += 3; // 'rue'\n        pop(true, stack, metaStack);\n        break;\n      case 'f':\n        i += 4; // 'alse'\n        pop(false, stack, metaStack);\n        break;\n      case '0':\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n      case '-':\n        parsedNum = '';\n        i--;\n        while (true) {\n          numChar = str[i++];\n          if (/[\\d\\.\\-e\\+]/.test(numChar)) {\n            parsedNum += numChar;\n          } else {\n            i--;\n            break;\n          }\n        }\n        pop(parseFloat(parsedNum), stack, metaStack);\n        break;\n      case '\"':\n        parsedString = '';\n        lastCh = void 0;\n        numConsecutiveSlashes = 0;\n        while (true) {\n          ch = str[i++];\n          if (ch !== '\"' || (lastCh === '\\\\' &&\n              numConsecutiveSlashes % 2 === 1)) {\n            parsedString += ch;\n            lastCh = ch;\n            if (lastCh === '\\\\') {\n              numConsecutiveSlashes++;\n            } else {\n              numConsecutiveSlashes = 0;\n            }\n          } else {\n            break;\n          }\n        }\n        pop(JSON.parse('\"' + parsedString + '\"'), stack, metaStack);\n        break;\n      case '[':\n        arrayElement = { element: [], index: stack.length };\n        stack.push(arrayElement.element);\n        metaStack.push(arrayElement);\n        break;\n      case '{':\n        objElement = { element: {}, index: stack.length };\n        stack.push(objElement.element);\n        metaStack.push(objElement);\n        break;\n      default:\n        throw new Error(\n          'unexpectedly reached end of input: ' + collationIndex);\n    }\n  }\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/vuvuzela/index.js\n ** module id = 14\n ** module chunks = 0\n **/","(function (root, factory) {\r\n  /* istanbul ignore next */\r\n  if (typeof define === 'function' && define.amd) {\r\n    define([], factory)\r\n  } else if (typeof exports === 'object') {\r\n    module.exports = factory()\r\n  } else {\r\n    root.PromisePool = factory()\r\n    // Legacy API\r\n    root.promisePool = root.PromisePool\r\n  }\r\n})(this, function () {\r\n  'use strict'\r\n\r\n  var EventTarget = function () {\r\n    this._listeners = {}\r\n  }\r\n\r\n  EventTarget.prototype.addEventListener = function (type, listener) {\r\n    this._listeners[type] = this._listeners[type] || []\r\n    if (this._listeners[type].indexOf(listener) < 0) {\r\n      this._listeners[type].push(listener)\r\n    }\r\n  }\r\n\r\n  EventTarget.prototype.removeEventListener = function (type, listener) {\r\n    if (this._listeners[type]) {\r\n      var p = this._listeners[type].indexOf(listener)\r\n      if (p >= 0) {\r\n        this._listeners[type].splice(p, 1)\r\n      }\r\n    }\r\n  }\r\n\r\n  EventTarget.prototype.dispatchEvent = function (evt) {\r\n    if (this._listeners[evt.type] && this._listeners[evt.type].length) {\r\n      var listeners = this._listeners[evt.type].slice()\r\n      for (var i = 0, l = listeners.length; i < l; ++i) {\r\n        listeners[i].call(this, evt)\r\n      }\r\n    }\r\n  }\r\n\r\n  var isGenerator = function (func) {\r\n    return (typeof func.constructor === 'function' &&\r\n      func.constructor.name === 'GeneratorFunction')\r\n  }\r\n\r\n  var functionToIterator = function (func) {\r\n    return {\r\n      next: function () {\r\n        var promise = func()\r\n        return promise ? {value: promise} : {done: true}\r\n      }\r\n    }\r\n  }\r\n\r\n  var promiseToIterator = function (promise) {\r\n    var called = false\r\n    return {\r\n      next: function () {\r\n        if (called) {\r\n          return {done: true}\r\n        }\r\n        called = true\r\n        return {value: promise}\r\n      }\r\n    }\r\n  }\r\n\r\n  var toIterator = function (obj, Promise) {\r\n    var type = typeof obj\r\n    if (type === 'object') {\r\n      if (typeof obj.next === 'function') {\r\n        return obj\r\n      }\r\n      /* istanbul ignore else */\r\n      if (typeof obj.then === 'function') {\r\n        return promiseToIterator(obj)\r\n      }\r\n    }\r\n    if (type === 'function') {\r\n      return isGenerator(obj) ? obj() : functionToIterator(obj)\r\n    }\r\n    return promiseToIterator(Promise.resolve(obj))\r\n  }\r\n\r\n  var PromisePoolEvent = function (target, type, data) {\r\n    this.target = target\r\n    this.type = type\r\n    this.data = data\r\n  }\r\n\r\n  var PromisePool = function (source, concurrency, options) {\r\n    EventTarget.call(this)\r\n    if (typeof concurrency !== 'number' ||\r\n        Math.floor(concurrency) !== concurrency ||\r\n        concurrency < 1) {\r\n      throw new Error('Invalid concurrency')\r\n    }\r\n    this._concurrency = concurrency\r\n    this._options = options || {}\r\n    this._options.promise = this._options.promise || Promise\r\n    this._iterator = toIterator(source, this._options.promise)\r\n    this._done = false\r\n    this._size = 0\r\n    this._promise = null\r\n    this._callbacks = null\r\n  }\r\n  PromisePool.prototype = new EventTarget()\r\n  PromisePool.prototype.constructor = PromisePool\r\n\r\n  PromisePool.prototype.concurrency = function (value) {\r\n    if (typeof value !== 'undefined') {\r\n      this._concurrency = value\r\n      if (this.active()) {\r\n        this._proceed()\r\n      }\r\n    }\r\n    return this._concurrency\r\n  }\r\n\r\n  PromisePool.prototype.size = function () {\r\n    return this._size\r\n  }\r\n\r\n  PromisePool.prototype.active = function () {\r\n    return !!this._promise\r\n  }\r\n\r\n  PromisePool.prototype.promise = function () {\r\n    return this._promise\r\n  }\r\n\r\n  PromisePool.prototype.start = function () {\r\n    var that = this\r\n    var Promise = this._options.promise\r\n    this._promise = new Promise(function (resolve, reject) {\r\n      that._callbacks = {\r\n        reject: reject,\r\n        resolve: resolve\r\n      }\r\n      that._proceed()\r\n    })\r\n    return this._promise\r\n  }\r\n\r\n  PromisePool.prototype._fireEvent = function (type, data) {\r\n    this.dispatchEvent(new PromisePoolEvent(this, type, data))\r\n  }\r\n\r\n  PromisePool.prototype._settle = function (error) {\r\n    if (error) {\r\n      this._callbacks.reject(error)\r\n    } else {\r\n      this._callbacks.resolve()\r\n    }\r\n    this._promise = null\r\n    this._callbacks = null\r\n  }\r\n\r\n  PromisePool.prototype._onPooledPromiseFulfilled = function (promise, result) {\r\n    this._size--\r\n    if (this.active()) {\r\n      this._fireEvent('fulfilled', {\r\n        promise: promise,\r\n        result: result\r\n      })\r\n      this._proceed()\r\n    }\r\n  }\r\n\r\n  PromisePool.prototype._onPooledPromiseRejected = function (promise, error) {\r\n    this._size--\r\n    if (this.active()) {\r\n      this._fireEvent('rejected', {\r\n        promise: promise,\r\n        error: error\r\n      })\r\n      this._settle(error || new Error('Unknown error'))\r\n    }\r\n  }\r\n\r\n  PromisePool.prototype._trackPromise = function (promise) {\r\n    var that = this\r\n    promise\r\n      .then(function (result) {\r\n        that._onPooledPromiseFulfilled(promise, result)\r\n      }, function (error) {\r\n        that._onPooledPromiseRejected(promise, error)\r\n      })['catch'](function (err) {\r\n        that._settle(new Error('Promise processing failed: ' + err))\r\n      })\r\n  }\r\n\r\n  PromisePool.prototype._proceed = function () {\r\n    if (!this._done) {\r\n      var result = null\r\n      while (this._size < this._concurrency &&\r\n          !(result = this._iterator.next()).done) {\r\n        this._size++\r\n        this._trackPromise(result.value)\r\n      }\r\n      this._done = (result === null || !!result.done)\r\n    }\r\n    if (this._done && this._size === 0) {\r\n      this._settle()\r\n    }\r\n  }\r\n\r\n  PromisePool.PromisePoolEvent = PromisePoolEvent\r\n  // Legacy API\r\n  PromisePool.PromisePool = PromisePool\r\n\r\n  return PromisePool\r\n})\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/es6-promise-pool/es6-promise-pool.js\n ** module id = 15\n ** module chunks = 0\n **/"],"sourceRoot":""}